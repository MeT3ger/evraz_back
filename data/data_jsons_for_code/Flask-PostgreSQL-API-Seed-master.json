{"Flask-PostgreSQL-API-Seed-master": {}, ".gitignore": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbin/\nbuild/\ndevelop-eggs/\ndist/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# Rope\n.ropeproject\n\n# Django stuff:\n*.log\n*.pot\n\n# Sphinx documentation\ndocs/_build/\n\n# Sublime Stuff\n*.sublime-project\n*.sublime-workspace\n\n# Vagrant Stuff\n.vagrant\n", "app": {}, "routes.py": "# TODO \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0432 components/app/adapters/api/app.py\n\nfrom app import rest_api\n\nfrom users import api as users_api\n\n# TODO \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u0442\u044c \u0432 \u043c\u0435\u0442\u043e\u0434 - \u0444\u0430\u0431\u0440\u0438\u043a\u0443\nrest_api.add_resource(users_api.UserAPI, '/api/v1/user')\nrest_api.add_resource(users_api.AuthenticationAPI, '/api/v1/authenticate')\nrest_api.add_resource(users_api.PasswordResetRequestAPI, '/api/v1/password-reset/request')\nrest_api.add_resource(users_api.PasswordResetConfirmAPI, '/api/v1/password-reset/confirm')\nrest_api.add_resource(users_api.AdminOnlyAPI, '/api/v1/admin')\n", "users": {}, "api.py": "\n\n# TODO \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0432 components/app/adapters/api/controllers/user.py\n\nfrom datetime import datetime\n\nfrom flask import g\nfrom flask.ext import restful\nfrom flask.ext.restful import reqparse, fields, marshal_with\nfrom sqlalchemy.exc import IntegrityError\n\n\nfrom app.users.mixins import SignupLoginMixin\nfrom app.users.models import AppUser, PasswordReset\n\nfrom app.utils.auth import auth_required, admin_required, generate_token\nfrom app.utils.errors import EMAIL_IN_USE, CODE_NOT_VALID, BAD_CREDENTIALS\n\nfrom app import db, bcrypt\n\n\nuser_fields = {\n    'id': fields.Integer,\n    'email': fields.String\n}\n\n\nclass UserAPI(SignupLoginMixin, restful.Resource):\n\n    @auth_required\n    @marshal_with(user_fields)\n    def get(self):\n        return g.current_user\n\n    # TODO \u0441\u0443\u0434\u044f \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 @auth_required\n    def post(self):\n        args = self.req_parser.parse_args()\n\n        user = AppUser(email=args['email'], password=args['password'])\n        db.session.add(user)\n\n        try:\n            # TODO \u041d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0435\u0439 \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\n            #  \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u042d\u0442\u043e \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u0442 \u043a \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043a\u043e\u0434\u0430. \u042d\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c\n            #  \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043b\u0438\u0431\u043e \u0432 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\n            #  \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.\n            db.session.commit()\n        # TODO \u0421\u043b\u0435\u0434\u0443\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043e\u043a\n        except IntegrityError:\n            return EMAIL_IN_USE\n\n        return {\n            'id': user.id,\n            'token': generate_token(user)\n        }, 201  # TODO \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        #           \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043a\u0430\u0436\u0434\u044b\u0439\n        #           \u0440\u0430\u0437. \u041a\u043e\u0434 \u043e\u0442\u0432\u0435\u0442\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0432 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b.\n\n\nclass AuthenticationAPI(SignupLoginMixin, restful.Resource):\n\n    def post(self):\n        args = self.req_parser.parse_args()\n\n        # TODO \u041d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\u0445. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e\n        #  \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439. \u0425\u043e\u0442\u044f \u0432 \u043d\u043e\u0432\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 \u044d\u0442\u043e\n        #  \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f.\n        user = db.session.query(AppUser).filter(AppUser.email==args['email']).first()\n        # TODO \u0414\u0430\u043d\u043d\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0432 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443\n        #  \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n        if user and bcrypt.check_password_hash(user.password, args['password']):\n\n            return {\n                'id': user.id,\n                'token': generate_token(user)\n            }\n\n        return BAD_CREDENTIALS\n\n\nclass PasswordResetRequestAPI(restful.Resource):\n\n    # TODO \u0441\u0443\u0434\u044f \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 @auth_required\n    def post(self):\n        req_parser = reqparse.RequestParser()\n        req_parser.add_argument('email', type=str, required=True)\n        args = req_parser.parse_args()\n\n        # TODO \u041d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\u0445. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e\n        #  \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439. \u0425\u043e\u0442\u044f \u0432 \u043d\u043e\u0432\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 \u044d\u0442\u043e\n        #  \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f.\n        user = db.session.query(AppUser).filter(AppUser.email==args['email']).first()\n        if user:\n            # TODO \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u043f\u043e\u0447\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0432 \u0441\u043b\u0443\u0436\u0431\u0435\n            #  (\u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438).\n            password_reset = PasswordReset(user=user)\n            db.session.add(password_reset)\n            # TODO \u041d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0435\u0439 \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\n            #  \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u042d\u0442\u043e \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u0442 \u043a \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043a\u043e\u0434\u0430. \u042d\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c\n            #  \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043b\u0438\u0431\u043e \u0432 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\n            #  \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.\n            db.session.commit()\n            # TODO: Send the email using any preferred method\n\n        return {}, 201  # TODO \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f\n        #                  \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0435\n        #                  \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437. \u041a\u043e\u0434 \u043e\u0442\u0432\u0435\u0442\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c\n        #                  \u0432 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b.\n\n\nclass PasswordResetConfirmAPI(restful.Resource):\n\n    # TODO \u0441\u0443\u0434\u044f \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 @auth_required\n    def post(self):\n        req_parser = reqparse.RequestParser()\n        req_parser.add_argument('code', type=str, required=True)\n        req_parser.add_argument('password', type=str, required=True)\n        args = req_parser.parse_args()\n\n        # TODO \u042d\u0442\u043e\u0442 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0432 \u0441\u043b\u0443\u0436\u0431\u0435 (\u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438).\n\n        # TODO \u041d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\u0445. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e\n        #  \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439. \u0425\u043e\u0442\u044f \u0432 \u043d\u043e\u0432\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 \u044d\u0442\u043e\n        #  \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f.\n        password_reset = db.session.query(PasswordReset\n                            ).filter(PasswordReset.code==args['code']\n                            ).filter(PasswordReset.date>datetime.now()).first()\n\n        if not password_reset:\n            return CODE_NOT_VALID\n\n        password_reset.user.set_password(args['password'])\n        db.session.delete(password_reset)\n        # TODO \u041d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0435\u0439 \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\n        #  \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u042d\u0442\u043e \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u0442 \u043a \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043a\u043e\u0434\u0430. \u042d\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c\n        #  \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043b\u0438\u0431\u043e \u0432 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\n        #  \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.\n        db.session.commit()\n\n        return {}, 200  # TODO \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f\n        #                  \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0435\n        #                  \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437. \u041a\u043e\u0434 \u043e\u0442\u0432\u0435\u0442\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c\n        #                  \u0432 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b.\n\n\n\nclass AdminOnlyAPI(restful.Resource):\n\n    @admin_required\n    def get(self):\n        return {}, 200  # TODO \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f\n        #                  \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0435\n        #                  \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437. \u041a\u043e\u0434 \u043e\u0442\u0432\u0435\u0442\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c\n        #                  \u0432 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b.\n", "mixins.py": "# TODO \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0432 components/app/adapters/api/controllers/base.py\n\nfrom flask.ext.restful import reqparse\n\n\nclass SignupLoginMixin(object):\n    # TODO \u041b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043e\u0442 restful.Resource\n\n    req_parser = reqparse.RequestParser()\n    req_parser.add_argument('email', type=str, required=True)\n    req_parser.add_argument('password', type=str, required=True)\n", "models.py": "# TODO \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0432 components/app/application/entities.py\n\nfrom datetime import datetime, timedelta\n\nfrom app import db, bcrypt\nfrom app.utils.misc import make_code\n\n\ndef expiration_date():\n    return datetime.now() + timedelta(days=1)\n\n\nclass AppUser(db.Model):\n\n    # TODO \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0432\u0435\u0441\u044c \u043c\u0430\u043f\u0438\u043d\u0433 SQLAlchemy \u0432 components/app/adapters/db/mapping.py\n    id = db.Column(db.Integer(), primary_key=True)\n    email = db.Column(db.String(255), unique=True)\n    password = db.Column(db.String(255))\n    active = db.Column(db.Boolean())\n    is_admin = db.Column(db.Boolean())\n\n    def __init__(self, email, password, is_admin=False):\n        # TODO @dataclass\n        self.email = email\n        self.active = True\n        self.is_admin = is_admin\n        self.set_password(password)\n\n    def set_password(self, password):\n        self.password = bcrypt.generate_password_hash(password)\n\n    def deactivate(self):\n        self.active = False\n\n\nclass PasswordReset(db.Model):\n\n    # TODO \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0432\u0435\u0441\u044c \u043c\u0430\u043f\u0438\u043d\u0433 SQLAlchemy \u0432 components/app/adapters/db/mapping.py\n    id = db.Column(db.Integer(), primary_key=True)\n    user_id = db.Column(db.Integer(), db.ForeignKey('app_user.id'))\n    code = db.Column(db.String(255), unique=True, default=make_code)\n    date = db.Column(db.DateTime(), default=expiration_date)\n\n    user = db.relationship(AppUser)\n\n    db.UniqueConstraint('user_id', 'code', name='uni_user_code')\n\n    def __init__(self, user):\n        # TODO @dataclass\n        self.user = user\n", "tests.py": "\n\n# TODO \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0432 components/app/tests/integration/adapters/api/controllers/test_user.py\n\nimport json\n\nfrom app import db\nfrom app.utils.testing import ApiTestCase\nfrom app.users.models import PasswordReset\n\n\nclass UserApiTest(ApiTestCase):\n\n    user_data = {\n        'email': 'something@email.com',\n        'password': '123456',\n    }\n\n    def test_registration(self):\n        response = self.app.post('/api/v1/user', data=self.user_data)\n        data = json.loads(response.data)\n\n        assert data['id'] == 1\n        assert len(data['token']) > 10\n\n    def test_duplicate_registration(self):\n        response = self.app.post('/api/v1/user', data=self.user_data)\n        assert response.status_code == 201\n\n        response = self.app.post('/api/v1/user', data=self.user_data)\n        assert response.status_code == 409\n\n    def test_get_user(self):\n        response = self.app.post('/api/v1/user', data=self.user_data)\n        data = json.loads(response.data)\n\n        headers = {'Authorization': data['token']}\n\n        response = self.app.get('/api/v1/user', headers=headers)\n        data = json.loads(response.data)\n        assert data['email'] == 'something@email.com'\n\n    def test_password_reset(self):\n        response = self.app.post('/api/v1/user', data=self.user_data)\n        assert response.status_code == 201\n\n        response = self.app.post('/api/v1/password-reset/request', data={\n            'email': 'something@email.com'\n        })\n        assert response.status_code == 201\n\n        pw_reset = db.session.query(PasswordReset).first()\n\n        response = self.app.post('/api/v1/password-reset/confirm', data={\n            'code': \"bad code\",\n            'password': 'abc123'\n        })\n        assert response.status_code == 401\n\n        response = self.app.post('/api/v1/password-reset/confirm', data={\n            'code': pw_reset.code,\n            'password': 'abc123'\n        })\n        assert response.status_code == 200\n\n        response = self.app.post('/api/v1/authenticate', data={\n            'email': 'something@email.com',\n            'password': 'abc123'\n        })\n        assert response.status_code == 200\n", "__init__.py": "from flask import Flask\nfrom flask.ext import restful\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom flask.ext.bcrypt import Bcrypt\nfrom flask.ext.migrate import Migrate, MigrateCommand\nfrom flask.ext.script import Manager\nfrom flask_redis import Redis\n\n\napp = Flask(__name__)\napp.config.from_object('config')\n\nrest_api = restful.Api(app)\n\ndb = SQLAlchemy(app)\nbcrypt = Bcrypt(app)\nredis = Redis(app)\n\n\nimport routes\n\n\nmigrate = Migrate(app, db)\n\nmanager = Manager(app)\nmanager.add_command('db', MigrateCommand)\n", "utils": {}, "auth.py": "# TODO \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0432 components/app/adapters/api/auth.py\n\nfrom functools import wraps\n\nfrom flask import request, g\nfrom itsdangerous import TimedJSONWebSignatureSerializer as Serializer\nfrom itsdangerous import SignatureExpired, BadSignature\n\nfrom app import app\nfrom app.utils.errors import UNAUTHORIZED, FORBIDDEN\n\n\nTWO_WEEKS = 1209600\n\n\ndef generate_token(user, expiration=TWO_WEEKS):\n    s = Serializer(app.config['SECRET_KEY'], expires_in=expiration)\n    return s.dumps({\n        'id': user.id,\n        'email': user.email,\n        'is_admin': user.is_admin\n    })\n\n\ndef verify_token(token):\n    s = Serializer(app.config['SECRET_KEY'])\n    try:\n        data = s.loads(token)\n    except (SignatureExpired, BadSignature):\n        return None\n    return data\n\n\ndef auth_required(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        token = request.headers.get('Authorization', '')\n        if token:\n            user = verify_token(token)\n            if user:\n                g.current_user = user\n                return func(*args, **kwargs)\n        return UNAUTHORIZED\n    return wrapper\n\n\ndef admin_required(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        token = request.headers.get('Authorization', '')\n        if token:\n            user = verify_token(token)\n            if user and user['is_admin']:\n                g.current_user = user\n                return func(*args, **kwargs)\n        return FORBIDDEN\n    return wrapper\n", "errors.py": "# TODO \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0432 components/app/adapters/api/errors.py\n\n# TODO \u041f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0430 \u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a\u043e\u0432 \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 Exception\nEMAIL_IN_USE = ({'message': 'User with that email already exists'}, 409)\nUNAUTHORIZED = ({'message': 'Authentication is required to access this resource'}, 401)\nBAD_CREDENTIALS = ({'message': 'Invalid credentials'}, 401)\nFORBIDDEN = ({'message': 'Access to this resource is forbidden'}, 403)\nCODE_NOT_VALID = ({'message': 'Valid code is required to reset a password'}, 401)\nTOO_MANY_REQUESTS = ({'message': 'Too many requests'}, 429)\n", "misc.py": "# TODO \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0432 components/app/application/utils.py\n\nimport uuid\n\n\ndef make_code():\n    return str(uuid.uuid4())\n", "rate_limit.py": "# TODO \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c\n\nfrom functools import wraps\n\nfrom flask import request, g\nfrom time import time\n\nfrom app import app, redis\nfrom app.utils.errors import TOO_MANY_REQUESTS\n\n\ndef rate_limit(limit=100, window=60):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = \"{0}: {1}\".format(request.remote_addr, request.path)\n\n            try:\n                remaining = limit - int(redis.get(key))\n            except (ValueError, TypeError):\n                remaining = limit\n                redis.set(key, 0)\n\n            expires_in = redis.ttl(key)\n            if not expires_in:\n                redis.expire(key, window)\n                expires_in = window\n\n            g.rate_limits = (limit, remaining-1, time()+expires_in)\n\n            if remaining > 0:\n                redis.incr(key, 1)\n                return func(*args, **kwargs)\n            return TOO_MANY_REQUESTS\n        return wrapper\n    return decorator\n\n\n@app.after_request\ndef add_rate_limit_headers(response):\n    try:\n        limit, remaining, expires = map(int, g.rate_limits)\n    except (AttributeError, ValueError):\n        return response\n    else:\n        response.headers.add('X-RateLimit-Remaining', remaining)\n        response.headers.add('X-RateLimit-Limit', limit)\n        response.headers.add('X-RateLimit-Reset', expires)\n        return response\n", "testing.py": "# TODO \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0432 components/app/tests/integration/adapters/api/controllers/conftest.py\n\nimport unittest\n\nfrom app import db, app\n\n\nclass ApiTestCase(unittest.TestCase):\n\n    def setUp(self):\n        app.config['TESTING'] = True\n        app.config['DEBUG'] = True\n        self.app = app.test_client()\n        db.create_all()\n\n    def tearDown(self):\n        db.session.remove()\n        db.drop_all()\n", "config.py": "import os\n\n\nBASE_DIR = os.path.abspath(os.path.dirname(__file__))\n\nDATABASE_CONNECT_OPTIONS = {}\n\nDEBUG = os.getenv('DEBUG', False)\n\nPORT = os.getenv('PORT', 5000)\n\nSQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL',\n    'postgres://docker:docker@{0}/docker'.format(os.getenv('DB_1_PORT_5432_TCP_ADDR')))\n\nSECRET_KEY = os.getenv('SECRET_KEY', None)\nassert SECRET_KEY\n\nTHREADS_PER_PAGE = 2\n", "docker-compose.yml": "redis:\n    image: redis\n    ports:\n        - 6379:6379\ndb:\n    image: orchardup/postgresql\n    ports:\n        - 5432:5432\nweb:\n    build: .\n    command: python run.py runserver -h 0.0.0.0 -p 5000\n    volumes:\n        - .:/code\n    ports:\n        - 5000:5000\n    links:\n        - db\n    environment:\n        DEBUG: True\n        SECRET_KEY: asdklfjeoja039rjdlkjfaoi3rdk\n", "Dockerfile": "FROM ubuntu:trusty\n\nRUN apt-get update -qq\nRUN apt-get install -y socat git software-properties-common python-software-properties postgresql-client-9.3 postgresql-client-common\n\nRUN apt-get update -qq\nRUN apt-get install -y python-pip python-psycopg2 libpq-dev python2.7-dev gunicorn libmagic1\n\nRUN mkdir /code\nADD . /code/\nWORKDIR /code\nRUN pip install -r requirements.txt\n\nEXPOSE 5000\n", "LICENSE": "The MIT License (MIT)\n\nCopyright (c) 2014 Brian Hines\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n", "migrations": {}, "alembic.ini": "# A generic, single database configuration.\n\n[alembic]\n# template used to generate migration files\n# file_template = %%(rev)s_%%(slug)s\n\n# set to 'true' to run the environment during\n# the 'revision' command, regardless of autogenerate\n# revision_environment = false\n\n\n# Logging configuration\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARN\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel = WARN\nhandlers =\nqualname = sqlalchemy.engine\n\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n", "env.py": "# TODO \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0432 components/app/adapters/db/alembic/app.py\n\nfrom __future__ import with_statement\nfrom alembic import context\nfrom sqlalchemy import engine_from_config, pool\nfrom logging.config import fileConfig\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\n\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nfrom flask import current_app\nconfig.set_main_option('sqlalchemy.url', current_app.config.get('SQLALCHEMY_DATABASE_URI'))\ntarget_metadata = current_app.extensions['migrate'].db.metadata\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\n\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(url=url)\n\n    with context.begin_transaction():\n        context.run_migrations()\n\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    engine = engine_from_config(\n                config.get_section(config.config_ini_section),\n                prefix='sqlalchemy.',\n                poolclass=pool.NullPool)\n\n    connection = engine.connect()\n    context.configure(\n                connection=connection,\n                target_metadata=target_metadata\n                )\n\n    try:\n        with context.begin_transaction():\n            context.run_migrations()\n    finally:\n        connection.close()\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n\n", "README": "Generic single-database configuration.", "script.py.mako": "\"\"\"${message}\n\nRevision ID: ${up_revision}\nRevises: ${down_revision}\nCreate Date: ${create_date}\n\n\"\"\"\n\n# revision identifiers, used by Alembic.\nrevision = ${repr(up_revision)}\ndown_revision = ${repr(down_revision)}\n\nfrom alembic import op\nimport sqlalchemy as sa\n${imports if imports else \"\"}\n\ndef upgrade():\n    ${upgrades if upgrades else \"pass\"}\n\n\ndef downgrade():\n    ${downgrades if downgrades else \"pass\"}\n", "versions": {}, "351c26992f23_.py": "# TODO \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0432 components/app/adapters/db/migrations/app.py\n\n\"\"\"empty message\n\nRevision ID: 351c26992f23\nRevises: None\nCreate Date: 2014-09-19 10:47:39.386944\n\n\"\"\"\n\n# revision identifiers, used by Alembic.\nrevision = '351c26992f23'\ndown_revision = None\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\ndef upgrade():\n    ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('app_user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('email', sa.String(length=255), nullable=True),\n    sa.Column('password', sa.String(length=255), nullable=True),\n    sa.Column('active', sa.Boolean(), nullable=True),\n    sa.Column('is_admin', sa.Boolean(), nullable=True),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('email')\n    )\n    op.create_table('password_reset',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('user_id', sa.Integer(), nullable=True),\n    sa.Column('code', sa.String(length=255), nullable=True),\n    sa.Column('date', sa.DateTime(), nullable=True),\n    sa.ForeignKeyConstraint(['user_id'], ['app_user.id'], ),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('code')\n    )\n    ### end Alembic commands ###\n\n    op.create_unique_constraint('unique_user_code', 'password_reset', ['user_id', 'code'])\n\n\ndef downgrade():\n    ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('password_reset')\n    op.drop_table('app_user')\n    ### end Alembic commands ###\n", "README.md": "Development Environment\n====================\n\nThe development environment uses [Docker](http://www.docker.com/) and [Docker Compose](https://docs.docker.com/compose/). This makes it super easy to get up and running with a configuration that would closely mirror production. A [Vagrant](http://www.vagrantup.com/) config file is included for operating systems that cannot yet run Docker natively.\n\nWith Docker/Compose/Vagrant installed, use the following steps to launch for the first time:\n\n* `vagrant up` - from within the project root to build the Ubuntu VM with Docker and Fig automatically installed. If you're already using Linux, you can skip this step and just install Docker and Fig on your system.\n* `docker-compose up` to start the web app. This will download and provision two containers: one running PostgreSQL and one running the Flask app. This will take a while, but once it completes subsequent launches will be much faster. (NOTE: if you are using the Vagrant VM that was provisioned in the first step, change into the `/vagrant` directory before running `docker-compose up`.)\n* When `docker-compose up` completes, the app should be accessible at [http://127.0.0.1:5000](http://127.0.0.1:5000). (NOTE: if running commands within the Vagrant VM that was provisioned in the first step, the app can be found at: [http://192.168.13.81:5000](http://192.168.13.81:5000))\n\n\nEnvironment Variables\n====================\n\nThere are just a couple of configurations managed as environment variables. In the development environment, these are injected by Docker Compose and managed in the `docker-compose.yml` file.\n\n* `DATABASE_URL` - This is the connection URL for the PostgreSQL database. It is not used in the **development environment**.\n* `DEBUG` - This toggle debug mode for the app to True/False.\n* `SECRET_KEY` - This is a secret string that you make up. It is used to encrypt and verify the authentication token on routes that require authentication.\n\n\nProject Organization\n====================\n\n* Application-wide settings are stored in `config.py` at the root of the repository. These items are accessible on the `config` dictionary property of the `app` object. Example: `debug = app.config['DEBUG']`\n* The directory `/app` contains the API application\n* URL mapping is managed in `/app/routes.py`\n* Functionality is organized in packages. Example: `/app/users` or `/app/utils`.\n* Tests are contained in each package. Example: `app/users/tests.py`\n\n\nRunning Tests\n====================\n\nTests are ran with [nose](https://nose.readthedocs.org/en/latest/) from inside the `docker-compose` web container:\n\n```\n$ docker-compose run web nosetests -v\n```\n\n\nDatabase Migrations\n====================\n\nMigrations for the provided models are part of the seed project. To generate new migrations use `Flask-Migrate`:\n\n    $ docker-compose run web python run.py db migrate\n    $ docker-compose run web python run.py db upgrade\n\n\nAPI Routes\n====================\n\nThis API uses token-based authentication. A token is obtained by registering a new user (`/api/v1/user`) or authenticating an existing user (`/api/v1/authenticate`). Once the client has the token, it must be included in the `Authorization` header of all requests.\n\n\n### Register a new user\n\n**POST:**\n```\n/api/v1/user\n```\n\n**Body:**\n```json\n{\n    \"email\": \"something@email.com\",\n    \"password\": \"123456\"\n}\n```\n\n**Response:**\n```json\n{\n    \"id\": 2,\n    \"token\": \"eyJhbGciOiJIUzI1NiIsImV4cCI6MTQxMDk2ODA5NCwiaWF0IjoxNDA5NzU4NDk0fQ.eyJpc19hZG1pbiI6ZmFsc2UsImlkIjoyLCJlbWFpbCI6InRlc3QyQHRlc3QuY29tIn0.goBHisCajafl4a93jfal0sD5pdjeYd5se_a9sEkHs\"\n}\n```\n\n**Status Codes:**\n* `201` if successful\n* `400` if incorrect data provided\n* `409` if email is in use\n\n\n### Get the authenticated user\n\n**GET:**\n```\n/api/v1/user\n```\n\n**Response:**\n```json\n{\n    \"id\": 2,\n    \"email\": \"test2@test.com\",\n}\n```\n\n**Status Codes:**\n* `200` if successful\n* `401` if not authenticated\n\n\n### Authenticate a user\n\n**POST:**\n```\n/api/v1/authenticate\n```\n\n**Body:**\n```json\n{\n    \"email\": \"something@email.com\",\n    \"password\": \"123456\"\n}\n```\n\n**Response:**\n```json\n{\n    \"id\": 2,\n    \"token\": \"eyJhbGciOiJIUzI1NiIsImV4cCI6MTQxMDk2ODA5NCwiaWF0IjoxNDA5NzU4NDk0fQ.eyJpc19hZG1pbiI6ZmFsc2UsImlkIjoyLCJlbWFpbCI6InRlc3QyQHRlc3QuY29tIn0.goBHisCajafl4a93jfal0sD5pdjeYd5se_a9sEkHs\"\n}\n```\n\n**Status Codes:**\n* `200` if successful\n* `401` if invalid credentials\n", "requirements.txt": "Flask==0.10.1\nFlask-Bcrypt==0.6.0\nFlask-Failsafe==0.2\nFlask-Migrate==1.2.0\nFlask-RESTful==0.2.12\nFlask-Redis==0.0.6\nFlask-SQLAlchemy==2.0\nFlask-Script==2.0.5\nJinja2==2.7.3\nMako==1.0.0\nMarkupSafe==0.23\nSQLAlchemy==0.9.7\nWerkzeug==0.9.6\nalembic==0.6.6\naniso8601==0.83\nblinker==1.3\nitsdangerous==0.24\nnose==1.3.4\npasslib==1.6.2\npsycopg2==2.5.3\npy-bcrypt==0.4\npytz==2014.4\nredis==2.10.3\nsix==1.7.3\nwsgiref==0.1.2\n", "run.py": "from flask_failsafe import failsafe\n\n\n@failsafe\ndef create_app():\n    from app import manager\n    return manager\n\n\nif __name__ == '__main__':\n    create_app().run()\n", "Vagrantfile": "# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!\nVAGRANTFILE_API_VERSION = \"2\"\n\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  config.vm.box = \"phusion-open-ubuntu-14.04-amd64\"\n  config.vm.box_url = \"https://oss-binaries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-14.04-amd64-vbox.box\"\n\n  config.vm.provider :vmware_fusion do |f, override|\n    override.vm.box_url = \"https://oss-binaries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-14.04-amd64-vmwarefusion.box\"\n  end\n\n  if Dir.glob(\"#{File.dirname(__FILE__)}/.vagrant/machines/default/*/id\").empty?\n    # Install Docker\n    pkg_cmd = \"wget -q -O - https://get.docker.io/gpg | apt-key add -;\" \\\n      \"echo deb http://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list;\" \\\n      \"apt-get update -qq; apt-get install -q -y --force-yes lxc-docker; \" \\\n      \"apt-get install -y python-pip;\" \\\n      \"pip install -U docker-compose;\"\n    # Add vagrant user to the docker group\n    pkg_cmd << \"usermod -a -G docker vagrant; \"\n    config.vm.provision :shell, :inline => pkg_cmd\n  end\n\n  config.vm.network \"private_network\", ip: \"192.168.13.81\"\n  config.vm.network \"forwarded_port\", guest: 5000, host: 5000\n\nend\n"}