{"luncher-api-master": {}, ".gitignore": "# Default ignored files\n/shelf/\n/workspace.xml\n# Editor-based HTTP Client requests\n/httpRequests/\n# Datasource local storage ignored files\n/dataSources/\n/dataSources.local.xml\n", "Dockerfile": "FROM python:3.6\nMAINTAINER Piotr Poteralski <piotr.poteralski@rst-it.com>\nENV PYTHONUNBUFFERED 1\n\nRUN mkdir /code\nWORKDIR /code\nADD requirements.txt /code/\nRUN pip install -r requirements.txt\nADD . /code/", "README.md": "Luncher\n===============================\nBackend application for Luncher.\n\n\nauthor: Piotr Poteralski\n\nOverview\n--------\n\nThe application was created for recruitation purposes\n\nRequirements\n------------\n\nhttps://docs.docker.com/engine/installation/\n\n\nUsage\n-----\nTo run test you should build project using docker-compose command:\n\n```\ndocker-compose build\n```\n\nThen to run test you simply use up parameter\n\n```\ndocker-compose up\n```\n\nYou should see log with test errors.\nSee issues for all task list.\n\nGood Luck!\n", "conftest.py": "# TODO: \u043f\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0443 \u0443\u0434\u0430\u043b\u044f\u0435\u043c", "docker-compose.yml": "version: '2'\nservices:\n\n  unit_tests:\n    build:\n      context: .\n    command: pytest tests/unit_tests\n\n  integration_tests:\n    build:\n      context: .\n    command: pytest tests/integration_tests\n\n  flakes_tests:\n    build:\n      context: .\n    command: pytest tests/ --flakes -m flakes\n\n  pep8_tests:\n    build:\n      context: .\n    command: pytest tests/ --pep8 -m pep8\n", "pytest.ini": "# content of setup.cfg\n[pytest]\naddopts = --pep8 --flakes\npep8maxlinelength = 100\nnorecursedirs =\n    postgresql\n    .venv/*\npep8ignore =\n    tests/* ALL\n    migrations/* ALL\nflakes-ignore =\n    migrations/* ALL\n    .venv/* ALL", "requirements.txt": "Flask==0.12\nFlask-Testing\nFlask-SQLAlchemy\nSQLAlchemy-Utils==0.32.14\nSQLAlchemy==1.1.10\npsycopg2==2.7.1\nflask-marshmallow==0.7.0\nmarshmallow-sqlalchemy\nitsdangerous\n\n#tests\npytest-pep8==1.0.6\npytest-flakes==2.0.0\npytest-cov==2.5.1\npyflakes==1.5.0\npytest==3.1.3", "REVIEW.md": "\n1. \u041e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b \u0411\u0414, \u0434\u0435\u043f\u043b\u043e\u0439\u043c\u0435\u043d\u0442\u0430\n2. \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0443, \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 MVC\n3. O\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u0435\u0442 \u043f\u0430\u043f\u043a\u0430 deployment\n4. \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u043e\u043d\u043e\u043b\u0438\u0442 \u0441 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u044c\u044e \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0441\u0442\u0438, \u0432\u0441\u0435 \u043f\u0430\u043a\u0435\u0442\u044b \u0437\u043d\u0430\u044e\u0442 \u043f\u0440\u043e \u0432\u0441\u0435 \u0423\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u044c \u0441\u043b\u043e\u0435\u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432\u043d\u0435\u0434\u0440\u0438\u0442\u044c DI\n5. \u041f\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c pytest \u0437\u0434\u0435\u0441\u044c unittest\n6. \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u0442\u0438\u043b\u044c \u043f\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0443 \u0438\u043c\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439\n7. \u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u043e\n\n\u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u043b \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u0432 TODO: \"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439\"", "luncher": {}, "__init__.py": "", "app.py": "\"\"\"The app module, containing the app factory function.\"\"\"\nfrom flask import Flask\n\nfrom luncher.config import Config\nfrom luncher.extensions import db\nfrom luncher.auth.routes import register_routes as register_auth_routes\nfrom luncher.meals.routes import register_routes as register_meals_routes\n\n\ndef create_app(config_object=Config):\n    \"\"\"An application factory, as explained here:\n        http://flask.pocoo.org/docs/patterns/appfactories/\n\n    :param config_object: The configuration object to use.\n    \"\"\"\n\n    app = Flask(__name__)\n    app.config.from_object(config_object)\n    register_extensions(app)\n    register_routes(app)\n    return app\n\n\ndef register_extensions(app):\n    db.init_app(app)\n\n\ndef register_routes(app):\n    register_auth_routes(app)\n    register_meals_routes(app)\n", "common.py": "from flask import request\nfrom flask.views import MethodView\n\n# TODO: \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u044e\u0442 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445 \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\nclass Request:\n    def __getattr__(self, item):\n        return getattr(request, item)\n\n\nclass APIView(MethodView):\n    def __init__(self, request) -> None:\n        self.request = request or Request()\n", "config.py": "import os\n\n\nclass Config(object):\n    SECRET_KEY = os.environ.get('SECRET_KEY', 'secret-key')\n    APP_DIR = os.path.abspath(os.path.dirname(__file__))\n    PROJECT_ROOT = os.path.abspath(os.path.join(APP_DIR, os.pardir))\n    APP_DIR = os.path.abspath(os.path.dirname(__file__))\n    SQLALCHEMY_DATABASE_URI = \"sqlite://\"\n    SQLALCHEMY_TRACK_MODIFICATIONS = True\n    TESTING = True\n", "database.py": "from sqlalchemy.exc import SQLAlchemyError\nfrom sqlalchemy.orm import Query\n\nfrom .extensions import db\n\n\nclass BaseDao:\n    def __init__(self, model_cls, db=db):\n        self._model = model_cls\n        self.db = db\n\n    @property\n    def _query(self):\n        return self.db.session.query(self._model)\n\n    def get(self, **kwargs):\n        return self._query.filter_by(**kwargs).first()\n\n    def one(self, **kwargs):\n        return self._query.filter_by(**kwargs).one()\n\n    def create(self, commit=True, **kwargs):\n        entity = self._model(**kwargs)\n        return self.save(entity, commit=commit)\n\n    def get_or_create(self, **kwargs):\n        entity = self.get(**kwargs)\n        if not entity:\n            entity = self.create(**kwargs)\n        return entity\n\n    def update(self, entity, commit=True):\n        self.save(entity, commit=commit)\n\n    def delete(self, entity, commit=True):\n        self.db.session.delete(entity)\n        return commit and self._commit()\n\n    def save(self, entity, commit=True):\n        self.db.session.add(entity)\n        if commit:\n            self._commit()\n        return entity\n\n    def _commit(self):\n        try:\n            self.db.session.commit()\n        except SQLAlchemyError:\n            self.db.session.rollback()\n            raise\n\n    def count(self):\n        return self._query.count()\n\n    def all(self) -> Query:\n        return self._query\n\n    def get_by_ids(self, ids):\n        return self._query.filter(self._model.id.in_(ids))\n", "extensions.py": "from flask_sqlalchemy import SQLAlchemy\nfrom flask_marshmallow import Marshmallow\n\ndb = SQLAlchemy()\nma = Marshmallow()\n", "accounts": {}, "daos.py": "from luncher.database import BaseDao\nfrom luncher.meals.models import Venue\n\n# TODO: \u041d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 CRUD \u043e\u0442 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430, \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\nclass VenueDao(BaseDao):\n    def __init__(self):\n        super().__init__(Venue)\n", "models.py": "from sqlalchemy import Column, Integer, String, DateTime, func\n\n\nclass SurrogatePK:\n    \"\"\"A mixin that adds a surrogate integer 'primary key' column named ``id``\n    to any declarative-mapped class.\"\"\"\n\n    __table_args__ = {'extend_existing': True}\n\n    id = Column(Integer, primary_key=True)\n\n\nclass ValueMixin:\n    __table_args__ = {'extend_existing': True}\n\n    value = Column(String, unique=True, nullable=False)\n\n    def __str__(self) -> str:\n        return f\"{self.__class__.__name__}: {self.value}\"\n\n# TODO: \u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435\nclass TimeSign:\n    __table_args__ = {'extend_existing': True}\n\n    created_at = Column(DateTime(timezone=True), default=func.now())\n    updated_at = Column(DateTime(timezone=True), default=func.now(), onupdate=func.now())\n", "serializers.py": "from luncher.extensions import ma\nfrom luncher.venues.models import Venue\n\n\nclass VenueSchema(ma.ModelSchema):\n    class Meta:\n        model = Venue\n        fields = ('id', 'name', 'description')\n", "views.py": "from unittest import TestCase\nfrom unittest.mock import Mock\n\nfrom luncher.meals.views import MealListView\nfrom utils.status import HTTPStatus\n\n\nclass MealListViewTest(TestCase):\n    def setUp(self):\n        self.mock_dao = Mock(all=Mock(return_value=[]))\n        self.view = MealListView(self.mock_dao)\n\n    def test_get_valid_data(self):\n        assert self.view.get()[0] == []\n\n    def test_get_valid_status(self):\n        assert self.view.get()[1] == HTTPStatus.HTTP_200_OK\n", "auth": {}, "helpers.py": "from datetime import datetime\n\nfrom flask import current_app\nfrom itsdangerous import TimestampSigner\n\n# TODO: \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u044e\u0442 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445 \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\nclass TokenHelper:\n    def __init__(self) -> None:\n        # TODO: \u0438\u043d\u0441\u0442\u0430\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 TimestampSigner \u0434\u0430\u043b\u044c\u0448\u0435 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\n        self.serializer = TimestampSigner(current_app.config.SECRET_KEY)\n\n    def create(self, user_id):\n        s = TimestampSigner(current_app.config.SECRET_KEY)\n        return s.sign({\n            \"datetime\": datetime.now(),\n            \"user_id\": user_id\n        })\n", "routes.py": "# TODO: \u041f\u0443\u0441\u0442\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u043d\u0435 \u043f\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0443", "meals": {}, "orders": {}, "venues": {}, "tests": {}, "integration_tests": {}, "base.py": "from flask_testing import TestCase\n\nfrom luncher.app import create_app\nfrom luncher.extensions import db\n\n\nclass BaseIntegrationTest(TestCase):\n\n    def create_app(self):\n        return create_app()\n\n    def setUp(self):\n        db.create_all()\n\n    def tearDown(self):\n        db.session.remove()\n        db.drop_all()\n", "test_endpoint.py": "from json import dumps\n\nfrom luncher.accounts.daos import UserDao\nfrom luncher.auth.helpers import TokenHelper\nfrom luncher.meals.daos import MealDao\nfrom luncher.venues.daos import VenueDao, BaseDao\nfrom tests.integration_tests.base import BaseIntegrationTest\nfrom utils.content_type import ContentType\nfrom utils.status import *\nfrom utils.tests import QueriesCounter\n# TODO: import * \u043d\u0435 \u043f\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0443\n\nclass MealsListEndpointTest(BaseIntegrationTest):\n    def test_status_ok(self):\n        response = self.client.get(\"/meals/\")\n\n        assert response.status_code == HTTPStatus.HTTP_200_OK\n\n    def create_data(self):\n        kfc = VenueDao().create(name=\"KFC\")\n        mcdonald = VenueDao().create(name=\"McDonald\")\n\n        MealDao().create(name=\"Grander\", venue=kfc)\n        MealDao().create(name=\"BigMac\", venue=mcdonald)\n\n    def test_performance(self):\n        self.create_data()\n\n        with QueriesCounter(print_sql=True) as counter:\n\n            self.client.get(\"/meals/\")\n\n            assert counter.count == 1\n\n\nclass CreateMealEndpointTest(BaseIntegrationTest):\n    def test_unauthorized(self):\n        response = self.client.post(\"/meals/\")\n\n        assert response.status_code == HTTPStatus.HTTP_401_UNAUTHORIZED\n\n    def get_authorization_header(self):\n        user = UserDao().create(login=\"test\", password=\"test\")\n\n        return {\n            \"Authorization\": TokenHelper().create(user.id)\n        }\n\n\n\n    def test_created_with_success(self):\n        response = self.client.post(\n            \"/meals/\",\n            content_type=ContentType.APPLICATION_JSON,\n            headers=self.get_authorization_header(),\n            data=dumps({\n                \"name\": \"McFlurry\",\n                \"price\": 1090,\n            })\n        )\n\n        assert response.status_code == HTTPStatus.HTTP_201_CREATED\n\n\n    # TODO: \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f response \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f\n    def test_created_with_database_populate(self):\n        response = self.client.post(\n            \"/meals/\",\n            content_type=ContentType.APPLICATION_JSON,\n            headers=self.get_authorization_header(),\n            data=dumps({\n                \"name\": \"McFlurry\",\n                \"price\": 1090,\n            })\n        )\n        \n        assert MealDao().count()==1\n\n    def test_created_with_failure_missing_price(self):\n        response = self.client.post(\n            \"/meals/\",\n            content_type=ContentType.APPLICATION_JSON,\n            headers=self.get_authorization_header(),\n            data=dumps({\n                \"name\": \"McFlurry\"\n            })\n        )\n\n        assert response.status_code == HTTPStatus.HTTP_400_BAD_REQUEST\n\n    # TODO: \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f response \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f\n    def test_created_with_failure_missing_price_not_populate(self):\n        response = self.client.post(\n            \"/meals/\",\n            content_type=ContentType.APPLICATION_JSON,\n            headers=self.get_authorization_header(),\n            data=dumps({\n                \"name\": \"McFlurry\",\n                \"price\": 1090,\n            })\n        )\n\n        assert MealDao().count()==0\n\n\n\n    def test_not_allowed(self):\n        response = self.client.post(\n            \"/meals/\",\n            content_type=ContentType.APPLICATION_JSON,\n            data=dumps({\n                \"name\": \"McFlurry\",\n                \"price\": 1090,\n            })\n        )\n\n        assert response.status_code == HTTPStatus.HTTP_401_UNAUTHORIZED\n", "unit_tests": {}, "test_views.py": "from unittest import TestCase\nfrom unittest.mock import Mock\n\nfrom luncher.meals.views import MealListView\nfrom utils.status import HTTPStatus\n\n\nclass MealListViewTest(TestCase):\n    def setUp(self):\n        self.mock_dao = Mock(all=Mock(return_value=[]))\n        self.view = MealListView(self.mock_dao)\n\n    def test_get_valid_data(self):\n        assert self.view.get()[0] == []\n\n    def test_get_valid_status(self):\n        assert self.view.get()[1] == HTTPStatus.HTTP_200_OK\n", "utils": {}, "content_type.py": "class ContentType:\n    MULTIPART_FORM_DATA = 'multipart/form-data'\n    APPLICATION_JSON = 'application/json'\n# TODO: \u041d\u0435 \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 utils", "status.py": "class HTTPStatus:\n    HTTP_100_CONTINUE = 100\n    HTTP_101_SWITCHING_PROTOCOLS = 101\n    HTTP_200_OK = 200\n    HTTP_201_CREATED = 201\n    HTTP_202_ACCEPTED = 202\n    HTTP_203_NON_AUTHORITATIVE_INFORMATION = 203\n    HTTP_204_NO_CONTENT = 204\n    HTTP_205_RESET_CONTENT = 205\n    HTTP_206_PARTIAL_CONTENT = 206\n    HTTP_207_MULTI_STATUS = 207\n    HTTP_300_MULTIPLE_CHOICES = 300\n    HTTP_301_MOVED_PERMANENTLY = 301\n    HTTP_302_FOUND = 302\n    HTTP_303_SEE_OTHER = 303\n    HTTP_304_NOT_MODIFIED = 304\n    HTTP_305_USE_PROXY = 305\n    HTTP_306_RESERVED = 306\n    HTTP_307_TEMPORARY_REDIRECT = 307\n    HTTP_400_BAD_REQUEST = 400\n    HTTP_401_UNAUTHORIZED = 401\n    HTTP_402_PAYMENT_REQUIRED = 402\n    HTTP_403_FORBIDDEN = 403\n    HTTP_404_NOT_FOUND = 404\n    HTTP_405_METHOD_NOT_ALLOWED = 405\n    HTTP_406_NOT_ACCEPTABLE = 406\n    HTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407\n    HTTP_408_REQUEST_TIMEOUT = 408\n    HTTP_409_CONFLICT = 409\n    HTTP_410_GONE = 410\n    HTTP_411_LENGTH_REQUIRED = 411\n    HTTP_412_PRECONDITION_FAILED = 412\n    HTTP_413_REQUEST_ENTITY_TOO_LARGE = 413\n    HTTP_414_REQUEST_URI_TOO_LONG = 414\n    HTTP_415_UNSUPPORTED_MEDIA_TYPE = 415\n    HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416\n    HTTP_417_EXPECTATION_FAILED = 417\n    HTTP_422_UNPROCESSABLE_ENTITY = 422\n    HTTP_423_LOCKED = 423\n    HTTP_424_FAILED_DEPENDENCY = 424\n    HTTP_428_PRECONDITION_REQUIRED = 428\n    HTTP_429_TOO_MANY_REQUESTS = 429\n    HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431\n    HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451\n    HTTP_500_INTERNAL_SERVER_ERROR = 500\n    HTTP_501_NOT_IMPLEMENTED = 501\n    HTTP_502_BAD_GATEWAY = 502\n    HTTP_503_SERVICE_UNAVAILABLE = 503\n    HTTP_504_GATEWAY_TIMEOUT = 504\n    HTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505\n    HTTP_507_INSUFFICIENT_STORAGE = 507\n    HTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511\n# TODO: \u041d\u0435 \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 utils", "tests.py": "from sqlalchemy import event\nfrom sqlalchemy.engine import Connection\n\n\nclass QueriesCounter:\n\n    def __init__(self, print_sql=False):\n        self.conn = Connection\n        self.count = 0\n        self.print_sql=print_sql\n        event.listen(self.conn, 'before_cursor_execute', self.callback)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *_):\n        event.remove(self.conn, 'before_cursor_execute', self.callback)\n\n    def callback(self, conn, cursor, statement, parameters, context, executemany):\n        self.count += 1\n        if self.count > 0 and self.print_sql:\n            print(statement, \"\\n\")\n\n    def reset(self):\n        self.count = 0", "sqla": {}, ".idea": {}, "workspace.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"a29decc2-96ab-4860-992f-2f0d624de687\" name=\"Changes\" comment=\"\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 1\n}</component>\n  <component name=\"ProjectId\" id=\"2p4XuZHILUCKkdfhVMX4zZjswR0\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"last_opened_file_path\": \"/home/alex/Documents/PROJECTS/ml-flask-api-master\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$\" />\n    </key>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"a29decc2-96ab-4860-992f-2f0d624de687\" name=\"Changes\" comment=\"\" />\n      <created>1732026545237</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1732026545237</updated>\n      <workItem from=\"1732026546249\" duration=\"56000\" />\n      <workItem from=\"1732026638875\" duration=\"1434000\" />\n      <workItem from=\"1732034044532\" duration=\"3000\" />\n      <workItem from=\"1732034064280\" duration=\"21000\" />\n      <workItem from=\"1732085057389\" duration=\"5110000\" />\n      <workItem from=\"1732113740821\" duration=\"2110000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n</project>", "luncher-api-master.iml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\" />\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n  <component name=\"PyDocumentationSettings\">\n    <option name=\"format\" value=\"PLAIN\" />\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\n  </component>\n  <component name=\"TemplatesService\">\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Jinja2\" />\n  </component>\n</module>", "modules.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectModuleManager\">\n    <modules>\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/luncher-api-master.iml\" filepath=\"$PROJECT_DIR$/.idea/luncher-api-master.iml\" />\n    </modules>\n  </component>\n</project>", "inspectionProfiles": {}, "Project_Default.xml": "<component name=\"InspectionProjectProfileManager\">\n  <profile version=\"1.0\">\n    <option name=\"myName\" value=\"Project Default\" />\n    <inspection_tool class=\"DuplicatedCode\" enabled=\"true\" level=\"WEAK WARNING\" enabled_by_default=\"true\">\n      <Languages>\n        <language minSize=\"105\" name=\"Python\" />\n      </Languages>\n    </inspection_tool>\n    <inspection_tool class=\"Eslint\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\" />\n    <inspection_tool class=\"PyPackageRequirementsInspection\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\n      <option name=\"ignoredPackages\">\n        <value>\n          <list size=\"40\">\n            <item index=\"0\" class=\"java.lang.String\" itemvalue=\"cv2\" />\n            <item index=\"1\" class=\"java.lang.String\" itemvalue=\"numpy\" />\n            <item index=\"2\" class=\"java.lang.String\" itemvalue=\"kombu\" />\n            <item index=\"3\" class=\"java.lang.String\" itemvalue=\"sqlalchemy\" />\n            <item index=\"4\" class=\"java.lang.String\" itemvalue=\"kafka\" />\n            <item index=\"5\" class=\"java.lang.String\" itemvalue=\"pydantic\" />\n            <item index=\"6\" class=\"java.lang.String\" itemvalue=\"pytest\" />\n            <item index=\"7\" class=\"java.lang.String\" itemvalue=\"click\" />\n            <item index=\"8\" class=\"java.lang.String\" itemvalue=\"alembic\" />\n            <item index=\"9\" class=\"java.lang.String\" itemvalue=\"pytz\" />\n            <item index=\"10\" class=\"java.lang.String\" itemvalue=\"intervaltree\" />\n            <item index=\"11\" class=\"java.lang.String\" itemvalue=\"falcon\" />\n            <item index=\"12\" class=\"java.lang.String\" itemvalue=\"scikit-learn\" />\n            <item index=\"13\" class=\"java.lang.String\" itemvalue=\"requests-ntlm\" />\n            <item index=\"14\" class=\"java.lang.String\" itemvalue=\"evraz-auto-api\" />\n            <item index=\"15\" class=\"java.lang.String\" itemvalue=\"attrs\" />\n            <item index=\"16\" class=\"java.lang.String\" itemvalue=\"evraz-health-check\" />\n            <item index=\"17\" class=\"java.lang.String\" itemvalue=\"requests\" />\n            <item index=\"18\" class=\"java.lang.String\" itemvalue=\"classic\" />\n            <item index=\"19\" class=\"java.lang.String\" itemvalue=\"psycopg\" />\n            <item index=\"20\" class=\"java.lang.String\" itemvalue=\"python-json-logger\" />\n            <item index=\"21\" class=\"java.lang.String\" itemvalue=\"pypika\" />\n            <item index=\"22\" class=\"java.lang.String\" itemvalue=\"pymssql\" />\n            <item index=\"23\" class=\"java.lang.String\" itemvalue=\"qrcode\" />\n            <item index=\"24\" class=\"java.lang.String\" itemvalue=\"evraz-vault-settings\" />\n            <item index=\"25\" class=\"java.lang.String\" itemvalue=\"python-dotenv\" />\n            <item index=\"26\" class=\"java.lang.String\" itemvalue=\"pyjwt\" />\n            <item index=\"27\" class=\"java.lang.String\" itemvalue=\"evraz-spectree\" />\n            <item index=\"28\" class=\"java.lang.String\" itemvalue=\"minio\" />\n            <item index=\"29\" class=\"java.lang.String\" itemvalue=\"evraz-classic-http-auth\" />\n            <item index=\"30\" class=\"java.lang.String\" itemvalue=\"gunicorn\" />\n            <item index=\"31\" class=\"java.lang.String\" itemvalue=\"spectree\" />\n            <item index=\"32\" class=\"java.lang.String\" itemvalue=\"evraz-classic-http-api\" />\n            <item index=\"33\" class=\"java.lang.String\" itemvalue=\"msgspec\" />\n            <item index=\"34\" class=\"java.lang.String\" itemvalue=\"embrace\" />\n            <item index=\"35\" class=\"java.lang.String\" itemvalue=\"PIL\" />\n            <item index=\"36\" class=\"java.lang.String\" itemvalue=\"watchdog\" />\n            <item index=\"37\" class=\"java.lang.String\" itemvalue=\"psycopg-pool\" />\n            <item index=\"38\" class=\"java.lang.String\" itemvalue=\"psycopg2-binary\" />\n            <item index=\"39\" class=\"java.lang.String\" itemvalue=\"ipcqueue\" />\n          </list>\n        </value>\n      </option>\n    </inspection_tool>\n    <inspection_tool class=\"PyPep8Inspection\" enabled=\"true\" level=\"WEAK WARNING\" enabled_by_default=\"true\">\n      <option name=\"ignoredErrors\">\n        <list>\n          <option value=\"E501\" />\n        </list>\n      </option>\n    </inspection_tool>\n    <inspection_tool class=\"PyPep8NamingInspection\" enabled=\"true\" level=\"WEAK WARNING\" enabled_by_default=\"true\">\n      <option name=\"ignoredErrors\">\n        <list>\n          <option value=\"N801\" />\n          <option value=\"N802\" />\n          <option value=\"N803\" />\n        </list>\n      </option>\n    </inspection_tool>\n    <inspection_tool class=\"PyUnresolvedReferencesInspection\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\n      <option name=\"ignoredIdentifiers\">\n        <list>\n          <option value=\"str.like\" />\n        </list>\n      </option>\n    </inspection_tool>\n  </profile>\n</component>", "profiles_settings.xml": "<component name=\"InspectionProjectProfileManager\">\n  <settings>\n    <option name=\"USE_PROJECT_PROFILE\" value=\"false\" />\n    <version value=\"1.0\" />\n  </settings>\n</component>"}