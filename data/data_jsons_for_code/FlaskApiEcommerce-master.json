{"FlaskApiEcommerce-master": {}, ".gitignore": "# Default ignored files\n/shelf/\n/workspace.xml\n# Editor-based HTTP Client requests\n/httpRequests/\n# Datasource local storage ignored files\n/dataSources/\n/dataSources.local.xml\n# Zeppelin ignored files\n/ZeppelinRemoteNotebooks/\n", ".idea": {}, "FlaskApiEcommerce-master.iml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\" />\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n  <component name=\"PyDocumentationSettings\">\n    <option name=\"format\" value=\"PLAIN\" />\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\n  </component>\n</module>", "inspectionProfiles": {}, "profiles_settings.xml": "<component name=\"InspectionProjectProfileManager\">\n  <settings>\n    <option name=\"USE_PROJECT_PROFILE\" value=\"false\" />\n    <version value=\"1.0\" />\n  </settings>\n</component>", "Project_Default.xml": "<component name=\"InspectionProjectProfileManager\">\n  <profile version=\"1.0\">\n    <option name=\"myName\" value=\"Project Default\" />\n    <inspection_tool class=\"DuplicatedCode\" enabled=\"true\" level=\"WEAK WARNING\" enabled_by_default=\"true\">\n      <Languages>\n        <language minSize=\"117\" name=\"Python\" />\n      </Languages>\n    </inspection_tool>\n    <inspection_tool class=\"Eslint\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\" />\n    <inspection_tool class=\"HtmlUnknownAttribute\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\n      <option name=\"myValues\">\n        <value>\n          <list size=\"2\">\n            <item index=\"0\" class=\"java.lang.String\" itemvalue=\"}}\" />\n            <item index=\"1\" class=\"java.lang.String\" itemvalue=\"group.title\" />\n          </list>\n        </value>\n      </option>\n      <option name=\"myCustomValuesEnabled\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"HtmlUnknownTag\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\n      <option name=\"myValues\">\n        <value>\n          <list size=\"8\">\n            <item index=\"0\" class=\"java.lang.String\" itemvalue=\"nobr\" />\n            <item index=\"1\" class=\"java.lang.String\" itemvalue=\"noembed\" />\n            <item index=\"2\" class=\"java.lang.String\" itemvalue=\"comment\" />\n            <item index=\"3\" class=\"java.lang.String\" itemvalue=\"noscript\" />\n            <item index=\"4\" class=\"java.lang.String\" itemvalue=\"embed\" />\n            <item index=\"5\" class=\"java.lang.String\" itemvalue=\"script\" />\n            <item index=\"6\" class=\"java.lang.String\" itemvalue=\"a\" />\n            <item index=\"7\" class=\"java.lang.String\" itemvalue=\"div\" />\n          </list>\n        </value>\n      </option>\n      <option name=\"myCustomValuesEnabled\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PyPackageRequirementsInspection\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\n      <option name=\"ignoredPackages\">\n        <value>\n          <list size=\"2\">\n            <item index=\"0\" class=\"java.lang.String\" itemvalue=\"pydantic\" />\n            <item index=\"1\" class=\"java.lang.String\" itemvalue=\"evraz-spectree\" />\n          </list>\n        </value>\n      </option>\n    </inspection_tool>\n    <inspection_tool class=\"PyPep8NamingInspection\" enabled=\"true\" level=\"WEAK WARNING\" enabled_by_default=\"true\">\n      <option name=\"ignoredErrors\">\n        <list>\n          <option value=\"N802\" />\n          <option value=\"N803\" />\n        </list>\n      </option>\n    </inspection_tool>\n    <inspection_tool class=\"Stylelint\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\" />\n  </profile>\n</component>", "misc.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"Black\">\n    <option name=\"sdkName\" value=\"Python 3.13 (airflow)\" />\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.13 (airflow)\" project-jdk-type=\"Python SDK\" />\n</project>", "modules.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectModuleManager\">\n    <modules>\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/FlaskApiEcommerce-master.iml\" filepath=\"$PROJECT_DIR$/.idea/FlaskApiEcommerce-master.iml\" />\n    </modules>\n  </component>\n</project>", "workspace.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"1482e4b3-f66b-46ce-bdc4-9520e304216a\" name=\"Changes\" comment=\"\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 2\n}</component>\n  <component name=\"ProjectId\" id=\"2pA2Lhdf6vNKH9GTdwx4BkIpIIW\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/media/sf_vbox/review/FlaskApiEcommerce-master&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.stylelint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.stylelint&quot;: &quot;&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$\" />\n    </key>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-1d06a55b98c1-91d5c284f522-JavaScript-PY-241.15989.155\" />\n        <option value=\"bundled-python-sdk-babbdf50b680-7c6932dee5e4-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-241.15989.155\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"1482e4b3-f66b-46ce-bdc4-9520e304216a\" name=\"Changes\" comment=\"\" />\n      <created>1732194507193</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1732194507193</updated>\n      <workItem from=\"1732194510011\" duration=\"1935000\" />\n      <workItem from=\"1732257536748\" duration=\"6444000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n</project>", "addresses": {}, "models.py": "from datetime import datetime\n\nfrom ecommerce_api.factory import db, bcrypt\nfrom roles.models import users_roles\n\n\nclass User(db.Model):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), index=True, unique=True)\n    email = db.Column(db.String(120), index=True, unique=True)\n    password = db.Column(db.String(128))\n    first_name = db.Column(db.String(300), nullable=False)\n    last_name = db.Column(db.String(300), nullable=False)\n\n    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    # comments = db.relationship('Comment', foreign_keys='comment.user_id', backref='user', lazy='dynamic')\n\n    roles = db.relationship('Role', secondary=users_roles, backref='users')\n\n    def __repr__(self):\n        return '<User {}>'.format(self.username)\n\n    def is_password_valid(self, password):\n        return bcrypt.check_password_hash(self.password, password)\n\n    def is_admin(self):\n        return 'ROLE_ADMIN' in [r.name for r in self.roles]\n\n    def is_not_admin(self):\n        return not self.is_admin()\n", "serializers.py": "from shared.serializers import PageSerializer\n\n\nclass TagListSerializer(PageSerializer):\n    resource_name = 'tags'\n", "views.py": "from flask import request, jsonify\nfrom flask_jwt_extended import create_access_token, jwt_optional, get_jwt_identity\n\nfrom ecommerce_api.factory import db, bcrypt\nfrom roles.models import Role\nfrom routes import blueprint\nfrom shared.serializers import get_success_response\nfrom users.models import User\n\n\n@blueprint.route('/users', methods=['POST'])\ndef register():\n    first_name = request.json.get('first_name', None)\n    last_name = request.json.get('last_name', None)\n    username = request.json.get('username', None)\n    password = request.json.get('password', None)\n    email = request.json.get('email', None)\n    role = db.session.query(Role).filter_by(name='ROLE_USER').first()\n    db.session.add(\n        User(first_name=first_name, last_name=last_name, username=username,\n             password=bcrypt.generate_password_hash(password).decode('utf-8'), roles=[role], email=email)\n    )\n    db.session.commit()\n    return get_success_response('User registered successfully')\n\n\n@jwt_optional\ndef partially_protected():\n    # If no JWT is sent in with the request, get_jwt_identity()\n    # will return None\n    current_user = get_jwt_identity()\n    if current_user:\n        return jsonify(logged_in_as=current_user), 200\n    else:\n        return jsonify(loggeed_in_as='anonymous user'), 200\n\n\n@blueprint.route('/users/login', methods=['POST'])\ndef login():\n    if not request.is_json:\n        return jsonify({\"msg\": \"Missing JSON in request\"}), 400\n\n    username = request.json.get('username', None)\n    password = request.json.get('password', None)\n    if username is None:\n        return jsonify({\"msg\": \"You must supply a username\"}), 400\n    if password is None:\n        return jsonify({\"msg\": \"Missing password parameter\"}), 400\n\n    user = User.query.filter_by(username=username).first()\n\n    if user is None or not user.is_password_valid(str(password)):\n        return jsonify({\"msg\": \"\"}), 401\n\n    # Identity can be any data that is json serializable\n    access_token = create_access_token(identity=user)\n\n    return jsonify({\n        'success': True,\n        'user': {\n            'username': user.username, 'id': user.id,\n            'roles': [role.name for role in user.roles],\n            'token': access_token}\n    }), 200\n", "__init__.py": "import sys\n\nimport users.views\n\nsys.stdout.write('[+] Registering routes for user\\n')\n", "app.py": "from addresses.models import Address\nfrom categories.models import Category\nfrom comments.models import Comment\nfrom ecommerce_api.factory import app, db\nfrom file_uploads.models import FileUpload, ProductImage, TagImage, CategoryImage\nfrom orders.models import Order\nfrom products.models import Product\nfrom routes import blueprint\nfrom tags.models import Tag\nfrom users.models import User\n\n# Extensions, it is not how a well organized project initializes the extensions but hey, it\n# is simple and readable anyways.\n\n# TODO: \u0432 \u044d\u0442\u043e\u043c \u043c\u043e\u0434\u0443\u043b\u0435 \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u0432\u043d\u0435\u0434\u0440\u0438\u0442\u044c \u043a\u0430\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438\n\napp.register_blueprint(blueprint, url_prefix='/api')\n\n\n# Like the old school Flask-Script for the shell, but using the new Flask CLI which is way better\n@app.shell_context_processor\ndef make_shell_context():\n    return dict(app=app, db=db, User=User, address=Address, order=Order, product=Product,\n                tag=Tag, category=Category, comment=Comment, file_upload=FileUpload, tag_image=TagImage,\n                category_image=CategoryImage, product_image=ProductImage)\n\n\n'''\nNot used, to seed the database, it is as easy as running the seed_database.py python script\nimport click\nimport sys\n@app.cli.command()\n@click.option('--seed', default=None, help='seed the database')\ndef seed_db(value):\n    sys.stdout.write('seed the database')\n'''\n\nif __name__ == '__main__':\n    app.run(port=8080)\n", "categories": {}, "comments": {}, "config.py": "import os\nfrom datetime import timedelta\n\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\n\nclass Config(object):\n    DEBUG = True\n\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \\\n                              'sqlite:///' + os.path.join(basedir, 'app.db') + '?check_same_thread=False'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    MAX_CONTENT_LENGTH = 16 * 1024 * 1024\n\n    IMAGES_LOCATION = os.path.join(basedir, 'static', 'images')\n    # Flask Jwt extended\n    # for more info either look at the official page or jwt_manager.py file\n    JWT_SECRET_KEY = os.environ.get('JWT_SECRET', 'JWT_SUPER_SECRET')\n    JWT_ACCESS_TOKEN_EXPIRES = timedelta(10 ** 6)\n    JWT_AUTH_USERNAME_KEY = 'username'\n    JWT_AUTH_HEADER_PREFIX = 'Bearer'\n\n    # CORS\n    CORS_ORIGIN_WHITELIST = [\n        'http://localhost:4000'\n    ]\n", "ecommerce_api": {}, "factory.py": "import os\n\nfrom flask import Flask\nfrom flask_bcrypt import Bcrypt\nfrom flask_caching import Cache\nfrom flask_cors import CORS\nfrom flask_jwt_extended import JWTManager\nfrom flask_migrate import Migrate\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom config import Config\n# TODO: \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 app.py\n# TODO: \u0444\u0430\u0431\u0440\u0438\u043a\u0443 Flask \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\nbasedir = os.path.abspath(os.path.dirname(__file__))\napp = Flask(__name__, root_path=os.getcwd(), static_url_path='/static')\n\napp.config.from_object(Config)\ndb = SQLAlchemy(app)  # , model_class=BaseModel)\nmigrate = Migrate(app, db)\ncache = Cache()\n\n# cors with defaults, which means allow all domains, it is fine for the moment\ncors = CORS(app)\nbcrypt = Bcrypt()\njwt = JWTManager(app)\n", "file_uploads": {}, "github_images": {}, "db_structure.png": "some image", "postman.png": "some image", "migrations": {}, "alembic.ini": "# A generic, single database configuration.\n\n[alembic]\n# template used to generate migration files\n# file_template = %%(rev)s_%%(slug)s\n\n# set to 'true' to run the environment during\n# the 'revision' command, regardless of autogenerate\n# revision_environment = false\n\n\n# Logging configuration\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARN\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel = WARN\nhandlers =\nqualname = sqlalchemy.engine\n\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n", "README": "Generic single-database configuration.", "script.py.mako": "\"\"\"${message}\n\nRevision ID: ${up_revision}\nRevises: ${down_revision | comma,n}\nCreate Date: ${create_date}\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n${imports if imports else \"\"}\n\n# revision identifiers, used by Alembic.\nrevision = ${repr(up_revision)}\ndown_revision = ${repr(down_revision)}\nbranch_labels = ${repr(branch_labels)}\ndepends_on = ${repr(depends_on)}\n\n\ndef upgrade():\n    ${upgrades if upgrades else \"pass\"}\n\n\ndef downgrade():\n    ${downgrades if downgrades else \"pass\"}\n", "versions": {}, "2728d2dc2146_.py": "\"\"\"empty message\n\nRevision ID: 2728d2dc2146\nRevises: \nCreate Date: 2019-02-17 17:29:11.553000\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = '2728d2dc2146'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('categories',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=255), nullable=True),\n    sa.Column('slug', sa.String(length=255), nullable=True),\n    sa.Column('description', sa.String(), nullable=True),\n    sa.Column('created_at', sa.DateTime(), nullable=True),\n    sa.Column('updated_at', sa.DateTime(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_categories_created_at'), 'categories', ['created_at'], unique=False)\n    op.create_index(op.f('ix_categories_slug'), 'categories', ['slug'], unique=True)\n    op.create_table('products',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=255), nullable=False),\n    sa.Column('slug', sa.String(), nullable=True),\n    sa.Column('description', sa.Text(), nullable=False),\n    sa.Column('price', sa.Integer(), nullable=False),\n    sa.Column('stock', sa.Integer(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\n    sa.Column('publish_on', sa.DateTime(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_products_created_at'), 'products', ['created_at'], unique=False)\n    op.create_index(op.f('ix_products_publish_on'), 'products', ['publish_on'], unique=False)\n    op.create_index(op.f('ix_products_slug'), 'products', ['slug'], unique=True)\n    op.create_table('roles',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=80), nullable=False),\n    sa.Column('description', sa.String(length=100), nullable=True),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('name')\n    )\n    op.create_table('tags',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=100), nullable=True),\n    sa.Column('slug', sa.String(), nullable=True),\n    sa.Column('description', sa.String(), nullable=True),\n    sa.Column('created_at', sa.DateTime(), nullable=True),\n    sa.Column('updated_at', sa.DateTime(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_tags_created_at'), 'tags', ['created_at'], unique=False)\n    op.create_index(op.f('ix_tags_slug'), 'tags', ['slug'], unique=True)\n    op.create_table('users',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=64), nullable=True),\n    sa.Column('email', sa.String(length=120), nullable=True),\n    sa.Column('password', sa.String(length=128), nullable=True),\n    sa.Column('first_name', sa.String(length=300), nullable=False),\n    sa.Column('last_name', sa.String(length=300), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)\n    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)\n    op.create_table('addresses',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('first_name', sa.String(), nullable=False),\n    sa.Column('last_name', sa.String(), nullable=False),\n    sa.Column('city', sa.String(), nullable=False),\n    sa.Column('country', sa.String(), nullable=False),\n    sa.Column('zip_code', sa.String(), nullable=False),\n    sa.Column('street_address', sa.String(), nullable=False),\n    sa.Column('phone_number', sa.String(), nullable=True),\n    sa.Column('user_id', sa.Integer(), nullable=True),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('comments',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('content', sa.Text(), nullable=False),\n    sa.Column('rating', sa.Integer(), nullable=True),\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('product_id', sa.Integer(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\n    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('file_uploads',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('type', sa.String(length=15), nullable=True),\n    sa.Column('file_path', sa.String(), nullable=False),\n    sa.Column('file_name', sa.String(), nullable=False),\n    sa.Column('file_size', sa.Integer(), nullable=False),\n    sa.Column('original_name', sa.String(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\n    sa.Column('tag_id', sa.Integer(), nullable=True),\n    sa.Column('product_id', sa.Integer(), nullable=True),\n    sa.Column('category_id', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),\n    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),\n    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('products_categories',\n    sa.Column('category_id', sa.Integer(), nullable=True),\n    sa.Column('product_id', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),\n    sa.ForeignKeyConstraint(['product_id'], ['products.id'], )\n    )\n    op.create_table('products_tags',\n    sa.Column('product_id', sa.Integer(), nullable=False),\n    sa.Column('tag_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),\n    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),\n    sa.UniqueConstraint('product_id', 'tag_id', name='same_tag_for_same_product')\n    )\n    op.create_table('users_roles',\n    sa.Column('user_id', sa.Integer(), nullable=True),\n    sa.Column('role_id', sa.Integer(), nullable=True),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )\n    )\n    op.create_table('orders',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('order_status', sa.Integer(), nullable=True),\n    sa.Column('tracking_number', sa.String(), nullable=True),\n    sa.Column('address_id', sa.Integer(), nullable=False),\n    sa.Column('user_id', sa.Integer(), nullable=True),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.ForeignKeyConstraint(['address_id'], ['addresses.id'], ),\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('order_items',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.Column('slug', sa.String(), nullable=True),\n    sa.Column('price', sa.Integer(), nullable=False),\n    sa.Column('quantity', sa.Integer(), nullable=False),\n    sa.Column('order_id', sa.Integer(), nullable=False),\n    sa.Column('product_id', sa.Integer(), nullable=False),\n    sa.Column('user_id', sa.Integer(), nullable=True),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.Column('updated_at', sa.DateTime(), nullable=True),\n    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),\n    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_order_items_name'), 'order_items', ['name'], unique=False)\n    op.create_index(op.f('ix_order_items_price'), 'order_items', ['price'], unique=False)\n    op.create_index(op.f('ix_order_items_quantity'), 'order_items', ['quantity'], unique=False)\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_order_items_quantity'), table_name='order_items')\n    op.drop_index(op.f('ix_order_items_price'), table_name='order_items')\n    op.drop_index(op.f('ix_order_items_name'), table_name='order_items')\n    op.drop_table('order_items')\n    op.drop_table('orders')\n    op.drop_table('users_roles')\n    op.drop_table('products_tags')\n    op.drop_table('products_categories')\n    op.drop_table('file_uploads')\n    op.drop_table('comments')\n    op.drop_table('addresses')\n    op.drop_index(op.f('ix_users_username'), table_name='users')\n    op.drop_index(op.f('ix_users_email'), table_name='users')\n    op.drop_table('users')\n    op.drop_index(op.f('ix_tags_slug'), table_name='tags')\n    op.drop_index(op.f('ix_tags_created_at'), table_name='tags')\n    op.drop_table('tags')\n    op.drop_table('roles')\n    op.drop_index(op.f('ix_products_slug'), table_name='products')\n    op.drop_index(op.f('ix_products_publish_on'), table_name='products')\n    op.drop_index(op.f('ix_products_created_at'), table_name='products')\n    op.drop_table('products')\n    op.drop_index(op.f('ix_categories_slug'), table_name='categories')\n    op.drop_index(op.f('ix_categories_created_at'), table_name='categories')\n    op.drop_table('categories')\n    # ### end Alembic commands ###\n", "orders": {}, "products": {}, "README.md": "# Introduction\nThis is one of my E-commerce API app implementations. It is written in Python with Flask as the main dependency.\nThis is not a finished project by any means, but it has a valid enough shape to be git cloned and studied if you are interested in this topic.\nIf you are interested in this project take a look at my other server API implementations I have made with:\n\n- [Node Js + Sequelize](https://github.com/melardev/ApiEcomSequelizeExpress)\n- [Node Js + Bookshelf](https://github.com/melardev/ApiEcomBookshelfExpress)\n- [Node Js + Mongoose](https://github.com/melardev/ApiEcomMongooseExpress)\n- [Python Django](https://github.com/melardev/DjangoRestShopApy)\n- [Java EE Spring Boot and Hibernate](https://github.com/melardev/SBootApiEcomMVCHibernate)\n- [Ruby on Rails](https://github.com/melardev/RailsApiEcommerce)\n- [AspNet Core](https://github.com/melardev/ApiAspCoreEcommerce)\n- [Laravel](https://github.com/melardev/ApiEcommerceLaravel)\n\nThe next projects to come will be:\n- Elixir with phoenix and Ecto\n- AspNet MVC 6\n- Java EE with Jax RS with jersey\n- Java EE with Apache Struts 2\n- Spring Boot with Kotlin\n- Go with Gorilla and Gorm\n- Go with Beego\n- Laravel with Fractal and Api Resources\n- Flask with other Rest Api frameworks such as apisec, flask restful\n\n## WARNING\nIf you debug the seed_database.py file then be warned you may run into exceptions related to thread safety, in that\ncase just rerun the script and try to not place the breakpoint where creating the model takes place\n# Getting started\n1. Git clone the project\n1. Setup Flask-Migrate\n`flask db init && flask db migrate && flask db upgrade`\n1. Seed the database with\n1. Seed the database\n`python2 seed_database.py`\n\nWhile you play with the project, if you want to reset the database(delete the app.db, regenerate the migrations and migrate)\nyou can execute reset.bat, it relies on flask2 executable(you may want to change it to flask instead); Flask2 it is\njust a custom bat file that I have that points to flask.exe from my Python2 Installation folder\n\n# Useful commands\n- Setup the migrations folder to hold migration files\n`flask2 db init`\n- Generate migration files\n`flask2 db migrate`\n- Make the actual migration and create tables on database\n`flask2 db upgrade`\n\n\n# Features\n- Authentication / Authorization\n- JWT middleware for authentication\n- Multi file upload\n- Database seed\n- Paging\n- CRUD operations on products, comments, tags, categories, orders\n![Fetching products page](./github_images/postman.png)\n- Orders, guest users may place an order\n![Database diagram](./github_images/db_structure.png)\n\n# What you will learn\n- Flask\n- Jwt authentication with flask\n- Controllers\n- Middlewares\n- JWT Authentication\n- Role based authorization\n- Flask SQLAlchemy ORM\n    - associations: ManyToMany, OneToMany, ManyToOne\n    - Select specific columns\n    - Eager loading\n    - Count related association\n    \n- seed data\n- misc\n    - project structure\n\n# Understanding the project\nIn project apps you will most of the times see that there is the launcher file, and the creation of the app and db is done\nelsewhere, why? to avoid circular dependencies. The app flask instance along with the db are heavily import from\nall over the places in our project, those variables are better placed in a separate file, I will explain this aspect \nin a youtube video if you did not get it.\n\n# TODO\n- Security, validations, fix vulnerabilities\n- File upload validation\n- unit testing\n- Create annotation to require authenticated user to be admin\n- Considering changing the project structure to a flask-ish way, with extensions clearly separated in a separate file\neven though the way it is implemented right now is not that bad\n- I do not think it is a good idea to put the get_dto inside the model itself, that should be placed in the corresponding\nserializer class to clearly separate the concerns, this is easy to refactor\n\n# Resources\n- [](https://flask-jwt-extended.readthedocs.io/en/latest/api.html#flask_jwt_extended.JWTManager.user_identity_loader", "reset.bat": "REM delete database /q: quiet mode, do not prompt for confirmation\ndel /q app.db\nREM remove migrations folder\nrd /q /s migrations\n\nflask2 db init && flask2 db migrate && flask2 db upgrade", "REVIEW.md": "## \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\n```\ncomponents/\n  backend/\n    app/\n      adapters/\n        db/\n          tables.py\n          repositories.py\n        api/\n          controllers/\n          app.py\n          settings.py\n      application/\n        entities.py\n        services.py\n        interfaces.py\n      composites/\n        api.py\n    tests/\n```\n\n## \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438\n- \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0438\u0442\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0438\u0437 `models.py` \u0432 `entities.py`.\n- \u041c\u0435\u0442\u043e\u0434\u044b `get_summary` \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\u0445.\n- \u0415\u0441\u043b\u0438 \u0432\u044b \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442\u0435 \u043d\u0430 \u0438\u043c\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u0442\u0438\u043b\u044c ORM, \u043c\u0430\u043f\u043f\u0438\u043d\u0433 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 `mapping.py`.\n- \u041a\u043e\u0434 \u0438\u0437 `views.py`, `serializers.py` \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0438\u0442\u0435 \u0432 `controllers`.\n- \u041b\u043e\u0433\u0438\u043a\u0443 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u0441\u043b\u043e\u0439 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438 \u0432\u043d\u0435\u0434\u0440\u044f\u0442\u044c \u043a\u0430\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0432 \u043a\u043b\u0430\u0441\u0441\u044b \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432.\n- \u0420\u0430\u0431\u043e\u0442\u0443 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u043d\u0435\u0441\u0438\u0442\u0435 \u0432 \u0441\u043b\u043e\u0439 \u0430\u0434\u0430\u043f\u0442\u0435\u0440\u043e\u0432 \u0438 \u0432\u043d\u0435\u0434\u0440\u044f\u0439\u0442\u0435 \u043a\u0430\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0432 \u043a\u043b\u0430\u0441\u0441\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432.\n- \u0412\u0441\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432\u044b\u043d\u0435\u0441\u0435\u043d\u044b \u0432 `tables.py`.\n- \u0412\u043d\u0435\u0434\u0440\u0438\u0442\u0435 \u0441\u043b\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 \u0432 `services.py`.\n- \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0439\u0442\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432.\n- \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0444\u0430\u0431\u0440\u0438\u043a\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043a\u0430\u043a \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438.\n- \u0412\u043d\u0435\u0434\u0440\u0438\u0442\u0435 \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0442, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u0443\u0434\u0443\u0442 \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438, \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u044b.\n- \u0412\u043d\u0435\u0434\u0440\u0438\u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 Pydantic \u0432 endpoints \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.", "roles": {}, "routes.py": "from flask import Blueprint\n\nblueprint = Blueprint('main', __name__)", "seed_database.py": "import datetime\nimport random\nimport sys\n\nimport faker\nfrom sqlalchemy.orm import load_only\nfrom sqlalchemy.sql import ClauseElement\nfrom sqlalchemy.sql.expression import func\n\nfrom addresses.models import Address\n\nfrom categories.models import Category\nfrom comments.models import Comment\nfrom ecommerce_api.factory import db, bcrypt\nfrom file_uploads.models import ProductImage, TagImage, CategoryImage\nfrom orders.models import Order, OrderItem\nfrom products.models import Product\nfrom roles.models import Role, UserRole\nfrom tags.models import Tag\nfrom users.models import User\n\nfake = faker.Faker()\ntags = []\ncategories = []\n\n\ndef get_or_create(session, model, defaults=None, **kwargs):\n    instance = session.query(model).filter_by(**kwargs).first()\n    if instance:\n        return instance, False\n    else:\n        params = dict((k, v) for k, v in kwargs.iteritems() if not isinstance(v, ClauseElement))\n        params.update(defaults or {})\n        instance = model(**params)\n        session.add(instance)\n        return instance, True\n\n\ndef encrypt_password(password):\n    return bcrypt.generate_password_hash(password).decode('utf-8')\n\n\ndef generate_image(model):\n    # pattern = \"\".join([random.choice(['?', '#']) for i in range(0, 10)]) + '.png'\n    filename_pattern = \"\".join(fake.random_choices(elements=('?', '#'),\n                                                   length=fake.random_int(min=16, max=32))) + '.png'\n    # file_name=fake.md5(raw_output=False) + '.png'\n    return model(file_name=\"\".join(fake.random_letters(length=16)) + '.png',\n                 file_path=fake.image_url(width=None, height=None),\n                 file_size=fake.random_int(min=1000, max=15000),\n                 original_name=fake.bothify(text=filename_pattern))\n\n\ndef seed_admin():\n    role, created = get_or_create(db.session, Role,\n                                  defaults={'description': 'for admin only'},\n                                  name='ROLE_ADMIN')\n    '''\n    # count admin\n    admin_count = User.query.filter(User.roles.any(id=role.id)).count()\n\n    # 4 ways of retrieving the admin users\n    admin_users = User.query.filter(User.users_roles.any(role_id=role.id)).all()\n    admin_users = User.query.filter(User.roles.any(id=role.id)).all()\n    admin_users = User.query.filter(User.roles.any(name='ROLE_ADMIN')).all()\n    admin_users = User.query.join(User.roles).filter_by(name=role.name).all()\n    '''\n\n    user, created = get_or_create(db.session, User, defaults={'first_name': 'adminFN',\n                                                              'last_name': 'adminFN',\n                                                              'email': 'admin@flaskblogapi.app',\n                                                              'password': bcrypt.generate_password_hash('password')},\n                                  **{'username': 'admin'})\n\n    db.session.commit()\n\n    if len(user.roles) == 0:\n        # user.users_roles.append(UserRole(user_id=user.id, role_id=role.id))\n        user.roles.append(role)\n        db.session.commit()\n\n\ndef seed_authors():\n    role, created = get_or_create(db.session, Role, defaults={'description': 'for authors only'},\n                                  name='ROLE_AUTHOR')\n\n    authors_count = db.session.query(User.id).filter(User.roles.any(id=role.id)).count()\n    authors_count = User.query.filter(User.roles.any(id=role.id)).count()\n    authors_to_seed = 5\n    authors_to_seed -= authors_count\n\n    for i in range(0, authors_to_seed):\n        profile = fake.profile(fields='username,mail,name')\n        username = profile['username']\n        first_name = profile['name'].split()[0]\n        last_name = profile['name'].split()[1]\n        email = profile['mail']\n        password = bcrypt.generate_password_hash('password')\n        user = User(username=username, first_name=first_name, last_name=last_name, email=email,\n                    password=password, roles=[role])\n        db.session.add(user)\n        db.session.commit()\n        # db.session.add(UserRole(user_id=user.id, role_id=role.id))\n\n    db.session.commit()\n\n\ndef seed_users():\n    role, created = get_or_create(db.session, Role,\n                                  defaults={'description': 'for standard users'},\n                                  name='ROLE_USER')\n    db.session.commit()\n    non_standard_user_ids = db.session.query(User.id) \\\n        .filter(~User.roles.any(id=role.id)).all()\n\n    all_users_count = db.session.query(func.count(User.id)).all()[0][0]\n    all_users_count = db.session.query(User.id).count()\n\n    # User.query.filter(User.roles.any(UserRole.role_id.in_([1,2]))).count()\n    standard_users_count = db.session.query(User).filter(User.roles.any(UserRole.role_id.in_([role.id]))).count()\n    standard_users_count = db.session.query(User.id).filter(\n        User.roles.any(id=role.id)).count()\n\n    users_to_seed = 23\n    users_to_seed -= standard_users_count\n    sys.stdout.write('[+] Seeding %d users\\n' % users_to_seed)\n\n    for i in range(0, users_to_seed):\n        profile = fake.profile(fields='username,mail,name')\n        username = profile['username']\n        # fake.first_name() fake.first_name_male() fake.first_name_female(), same for last_name()\n        first_name = profile['name'].split()[0]\n        last_name = profile['name'].split()[1]\n        email = profile['mail']\n        password = bcrypt.generate_password_hash('password')\n        user = User(username=username, first_name=first_name, last_name=last_name, email=email,\n                    password=password)\n        user.roles.append(role)\n        db.session.add(user)\n        db.session.commit()\n\n    db.session.commit()\n\n\ndef seed_tags():\n    sys.stdout.write('[+] Seeding tags\\n')\n    pairs = []\n\n    tag, created = get_or_create(db.session, Tag, defaults={'description': 'shoes for everyone'}, name='Shoes')\n    tags.append(tag)\n    pairs.append((tag, created))\n\n    tag, created = get_or_create(db.session, Tag, defaults={'description': 'jeans for everyone'}, name='Jeans')\n    tags.append(tag)\n    pairs.append((tag, created))\n\n    tag, created = get_or_create(db.session, Tag, defaults={'description': 'jackets for everyone'}, name='Jackets')\n    tags.append(tag)\n    pairs.append((tag, created))\n\n    tag, created = get_or_create(db.session, Tag, defaults={'description': 'shorts for everyone'}, name='Shorts')\n    tags.append(tag)\n    pairs.append((tag, created))\n\n    for pair in pairs:\n        if pair[1]:  # if created\n            for i in range(0, random.randint(1, 2)):\n                pi = generate_image(TagImage)\n                pair[0].images.append(pi)\n\n    db.session.add_all(tags)\n    db.session.commit()\n\n\ndef seed_categories():\n    sys.stdout.write('[+] Seeding categories\\n')\n    pairs = []\n    category, created = get_or_create(db.session, Category,\n                                      defaults={'description': 'clothes for  men'},\n                                      name='Men')\n    categories.append(category)\n    pairs.append((category, created))\n\n    category, created = get_or_create(db.session, Category,\n                                      defaults={'description': 'clothes for women'}, name='Women')\n    categories.append(category)\n    pairs.append((category, created))\n\n    category, created = get_or_create(db.session, Category,\n                                      defaults={'description': 'clothes for kids'}, name='Kids')\n    categories.append(category)\n    pairs.append((category, created))\n\n    category, created = get_or_create(db.session, Category,\n                                      defaults={'description': 'clothes for teenagers'}, name='Teenagers')\n    categories.append(category)\n    pairs.append((category, created))\n\n    for pair in pairs:\n        if pair[1]:  # if created\n            for i in range(0, random.randint(1, 2)):\n                category_image = generate_image(CategoryImage)\n                pair[0].images.append(category_image)\n\n    db.session.add_all(categories)\n    db.session.commit()\n\n\ndef seed_products():\n    products_count = db.session.query(func.count(Product.id)).all()[0][0]\n    products_to_seed = 23\n    sys.stdout.write('[+] Seeding %d products\\n' % products_to_seed)\n\n    # tag_ids = [tag[0] for tag in db.session.query(Tag.id).all()]\n    # category_ids = [category[0] for category in db.session.query(Category.id).all()]\n\n    for i in range(products_count, products_to_seed):\n        name = fake.sentence()\n        description = fake.text()\n\n        start_date = datetime.date(year=2017, month=1, day=1)\n        random_date = fake.date_between(start_date=start_date, end_date='+4y')\n        publish_on = random_date\n        product = Product(name=name, description=description, price=fake.random_int(min=50, max=2500),\n                          stock=fake.random_int(min=5, max=1000), publish_on=publish_on)\n\n        # product.tags.append(db.session.query(Tag).order_by(func.random()).first())\n\n        tags_for_product = []\n        categories_for_product = []\n\n        for i in range(0, random.randint(1, 2)):\n            tag_to_add = random.choice(tags)\n            if tag_to_add.id not in tags_for_product:\n                product.tags.append(tag_to_add)\n                tags_for_product.append(tag_to_add.id)\n\n        for i in range(0, random.randint(1, 2)):\n            category_to_add = random.choice(categories)\n            if category_to_add.id not in categories_for_product:\n                product.categories.append(category_to_add)\n                categories_for_product.append(category_to_add.id)\n\n        for i in range(0, random.randint(1, 2)):\n            product_image = generate_image(ProductImage)\n            product.images.append(product_image)\n\n        db.session.add(product)\n        db.session.commit()\n\n\ndef seed_comments():\n    comments_count = db.session.query(func.count(Comment.id)).scalar()\n    comments_to_seed = 31\n    comments_to_seed -= comments_count\n    sys.stdout.write('[+] Seeding %d comments\\n' % comments_to_seed)\n    comments = []\n\n    user_ids = [user[0] for user in User.query.with_entities(User.id).all()]\n    product_ids = [product[0] for product in Product.query.with_entities(Product.id)]\n    # equivalent:\n    # user_ids = [user[0] for user in db.session.query(User.id).all()]\n    # product_ids = [product[0] for product in db.session.query(Product.id).all()]\n\n    for i in range(comments_count, comments_to_seed):\n        user_id = random.choice(user_ids)\n        product_id = random.choice(product_ids)\n        rating = fake.random_int(min=1, max=5) if fake.boolean(chance_of_getting_true=50) else None\n        comments.append(Comment(product_id=product_id,\n                                user_id=user_id, rating=rating,\n                                content=fake.paragraph(nb_sentences=4, variable_nb_sentences=True, ext_word_list=None)))\n\n    db.session.add_all(comments)\n    db.session.commit()\n\n\ndef seed_addresses():\n    addresses_count = db.session.query(func.count(Address.id)).scalar()\n    addresses_to_seed = 30\n    user_ids = [user[0] for user in db.session.query(User.id).all()]\n\n    for i in range(addresses_count, addresses_to_seed):\n        user_id = random.choice(user_ids) if fake.boolean(chance_of_getting_true=80) else None\n\n        first_name = fake.first_name()\n        last_name = fake.last_name()\n        zip_code = fake.zipcode_plus4()  # postcode(), postalcode(), zipcode(), postalcode_plus4\n        street_address = fake.address()\n        phone_number = fake.phone_number()\n        city = fake.city()\n        country = fake.country()\n        db.session.add(Address(user_id=user_id, first_name=first_name, last_name=last_name, zip_code=zip_code,\n                               street_address=street_address, phone_number=phone_number, city=city, country=country))\n\n    db.session.commit()\n\n\ndef seed_orders():\n    orders_count = db.session.query(func.count(Order.id)).scalar()\n    orders_to_seed = 31\n    addresses = db.session.query(Address).options(load_only('id', 'user_id')).all()\n    products = db.session.query(Product).options(load_only('id', 'name', 'slug', 'price')).all()\n\n    for i in range(orders_count, orders_to_seed):\n        address = random.choice(addresses)\n        tracking_number = fake.uuid4()\n        order_status = fake.random_int(min=0, max=2)\n        user_id = address.user_id\n        order = Order(tracking_number=tracking_number, order_status=order_status, address_id=address.id,\n                      user_id=user_id)\n\n        db.session.add(order)\n\n        '''\n        this is to save the order now, so I can have the id to be used in order items\n        or the other way is to comment flush(), order_id=order.id, and session.add(oi).\n        Instead use order.order_items.append(oi); See below. Both ways lead to the same result\n        '''\n\n        db.session.flush()\n\n        for i in range(fake.random_int(min=1, max=6)):\n            product = random.choice(products)\n            oi = OrderItem(name=product.name, slug=product.slug, price=product.price,\n                           order_id=order.id,\n                           product_id=product.id, user_id=user_id, quantity=fake.random_int(min=1, max=5))\n            db.session.add(oi)\n\n            # order.order_items.append(oi)\n\n        db.session.commit()\n\n\nif __name__ == '__main__':\n    seed_admin()\n    seed_users()\n    seed_tags()\n    seed_categories()\n    seed_products()\n    seed_comments()\n    seed_addresses()\n    seed_orders()\n", "shared": {}, "columns.py": "from ecommerce_api.factory import db\n\n\nclass ColIntEnum(db.TypeDecorator):\n    \"\"\"\n    Enables passing in a Python enum and storing the enum's *value* in the db.\n    The default would have stored the enum's *name* (ie the string).\n    \"\"\"\n    impl = db.Integer\n\n    def __init__(self, enumtype, *args, **kwargs):\n        super(ColIntEnum, self).__init__(*args, **kwargs)\n        self._enumtype = enumtype\n\n    def process_bind_param(self, value, dialect):\n        if isinstance(value, int):\n            return value\n\n        return value.value\n\n    def process_result_value(self, value, dialect):\n        return self._enumtype(value)", "database.py": "from sqlalchemy.sql import ClauseElement\n\n# TODO: \u0432\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u0411\u0414 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 repositories.py\ndef get_or_create(session, model, defaults=None, **kwargs):\n    instance = session.query(model).filter_by(**kwargs).first()\n    if instance:\n        return instance, False\n    else:\n        params = dict((k, v) for k, v in kwargs.iteritems() if not isinstance(v, ClauseElement))\n        params.update(defaults or {})\n        instance = model(**params)\n        session.add(instance)\n        return instance, True\n", "middlewares.py": "import sys\nimport time\nfrom datetime import datetime\n\nfrom flask import g\nfrom flask_jwt_extended import current_user\n\nfrom ecommerce_api.factory import db, app\n\nstart_time = 0\n\n\n# TODO: not working, what did I wrong ??\n@app.before_request\ndef before_req():\n    global start_time\n    g.user = current_user\n    start_time = time.clock()\n\n\n@app.after_request\ndef after_req(response):\n    end_time = time.clock()\n    elapsed = (end_time - start_time) * 1000\n    sys.stdout.write('Request took %d milliseconds\\n' % elapsed)\n    return response\n", "tags": {}, "users": {}}