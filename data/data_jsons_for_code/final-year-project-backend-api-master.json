{"final-year-project-backend-api-master": {}, ".env_sample": "FLASK_APP=run_api.py\nFLASK_ENV=dev\nFLASK_DEBUG=1\nSECRET_KEY={secret_key}\nJWT_SECRET_KEY={jwt_secret_key}\nSQLALCHEMY_DATABASE_URI='mysql+{driver}://{username}:{password}@{host}/{db_name}'\nSQLALCHEMY_TRACK_MODIFICATIONS=0\nDB_USER={username}\nDB_PASS={password}\nDB_NAME={db_name}\nMAIL_HOST=\nMAIL_PORT=\nMAIL_USERNAME=\nMAIL_PASSWORD=\nMAIL_USE_TLS=False\nADMINS=\"[]\"\n\n\nREGISTERED_COURSES_TABLE_FIRST_19=\nREGISTERED_COURSES_TABLE_SECOND_19=\nSTUDENT_LECTURES_FIRST_19=\nSTUDENT_LECTURES_SECOND_19=\nSTUDENT_EXAM_FIRST_19=\nSTUDENT_EXAM_SECOND_19=\n\nLECTURER_LECTURES_FIRST_19=\nLECTURER_LECTURES_SECOND_19=\nASSIGN_COURSES_TABLE_FIRST_19=\nASSIGN_COURSES_TABLE_SECOND_19=\n\n\nCURRENT_ASSIGNED_COURSES_SESSION=\nCURRENT_ASSIGNED_COURSES_SEMESTER=\nCURRENT_REGISTERED_COURSES_SESSION=\nCURRENT_REGISTERED_COURSES_SEMESTER=\n\n\n\nCURRENT_SEMESTER=\nCURRENT_SESSION=", ".gitignore": "# Default ignored files\n/shelf/\n/workspace.xml\n# Editor-based HTTP Client requests\n/httpRequests/\n# Datasource local storage ignored files\n/dataSources/\n/dataSources.local.xml\n# Zeppelin ignored files\n/ZeppelinRemoteNotebooks/\n", ".idea": {}, "final-year-project-backend-api-master.iml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\" />\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n  <component name=\"PyDocumentationSettings\">\n    <option name=\"format\" value=\"PLAIN\" />\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\n  </component>\n  <component name=\"TemplatesService\">\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Jinja2\" />\n  </component>\n</module>", "inspectionProfiles": {}, "profiles_settings.xml": "<component name=\"InspectionProjectProfileManager\">\n  <settings>\n    <option name=\"USE_PROJECT_PROFILE\" value=\"false\" />\n    <version value=\"1.0\" />\n  </settings>\n</component>", "Project_Default.xml": "<component name=\"InspectionProjectProfileManager\">\n  <profile version=\"1.0\">\n    <option name=\"myName\" value=\"Project Default\" />\n    <inspection_tool class=\"DuplicatedCode\" enabled=\"true\" level=\"WEAK WARNING\" enabled_by_default=\"true\">\n      <Languages>\n        <language minSize=\"117\" name=\"Python\" />\n      </Languages>\n    </inspection_tool>\n    <inspection_tool class=\"Eslint\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\" />\n    <inspection_tool class=\"HtmlUnknownAttribute\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\n      <option name=\"myValues\">\n        <value>\n          <list size=\"2\">\n            <item index=\"0\" class=\"java.lang.String\" itemvalue=\"}}\" />\n            <item index=\"1\" class=\"java.lang.String\" itemvalue=\"group.title\" />\n          </list>\n        </value>\n      </option>\n      <option name=\"myCustomValuesEnabled\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"HtmlUnknownTag\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\n      <option name=\"myValues\">\n        <value>\n          <list size=\"8\">\n            <item index=\"0\" class=\"java.lang.String\" itemvalue=\"nobr\" />\n            <item index=\"1\" class=\"java.lang.String\" itemvalue=\"noembed\" />\n            <item index=\"2\" class=\"java.lang.String\" itemvalue=\"comment\" />\n            <item index=\"3\" class=\"java.lang.String\" itemvalue=\"noscript\" />\n            <item index=\"4\" class=\"java.lang.String\" itemvalue=\"embed\" />\n            <item index=\"5\" class=\"java.lang.String\" itemvalue=\"script\" />\n            <item index=\"6\" class=\"java.lang.String\" itemvalue=\"a\" />\n            <item index=\"7\" class=\"java.lang.String\" itemvalue=\"div\" />\n          </list>\n        </value>\n      </option>\n      <option name=\"myCustomValuesEnabled\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PyPackageRequirementsInspection\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\n      <option name=\"ignoredPackages\">\n        <value>\n          <list size=\"2\">\n            <item index=\"0\" class=\"java.lang.String\" itemvalue=\"pydantic\" />\n            <item index=\"1\" class=\"java.lang.String\" itemvalue=\"evraz-spectree\" />\n          </list>\n        </value>\n      </option>\n    </inspection_tool>\n    <inspection_tool class=\"PyPep8NamingInspection\" enabled=\"true\" level=\"WEAK WARNING\" enabled_by_default=\"true\">\n      <option name=\"ignoredErrors\">\n        <list>\n          <option value=\"N802\" />\n          <option value=\"N803\" />\n        </list>\n      </option>\n    </inspection_tool>\n    <inspection_tool class=\"Stylelint\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\" />\n  </profile>\n</component>", "modules.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectModuleManager\">\n    <modules>\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/final-year-project-backend-api-master.iml\" filepath=\"$PROJECT_DIR$/.idea/final-year-project-backend-api-master.iml\" />\n    </modules>\n  </component>\n</project>", "workspace.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"e922be1a-f2b0-46dd-99ef-e6e6f611e61c\" name=\"Changes\" comment=\"\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 1\n}</component>\n  <component name=\"ProjectId\" id=\"2p9JHsguEGrirZfbdoMruh0F24Z\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.stylelint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.stylelint&quot;: &quot;&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-1d06a55b98c1-91d5c284f522-JavaScript-PY-241.15989.155\" />\n        <option value=\"bundled-python-sdk-babbdf50b680-7c6932dee5e4-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-241.15989.155\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"e922be1a-f2b0-46dd-99ef-e6e6f611e61c\" name=\"Changes\" comment=\"\" />\n      <created>1732172276444</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1732172276444</updated>\n      <workItem from=\"1732172279517\" duration=\"6038000\" />\n      <workItem from=\"1732190394871\" duration=\"3630000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n</project>", "api": {}, "controller": {}, "admins_controller.py": "from flask import request\nfrom flask_restplus import Resource, Namespace, fields\nfrom marshmallow import ValidationError\n#TODO: \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u043a\u0438\u0434\u044b\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c\nfrom api.service import AdminsService, admin_login_required\nfrom api.schema import NewAdminSchema\n#TODO: \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u0444\u0430\u0431\u0440\u0438\u043a\u0443 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f app\nadmin_api = Namespace('admins', description='Endpoints to manage admin operations')\n\n#TODO: \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0442\u043e\u0438\u0442 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u043a\u0435\u0442\nadmin_reg = admin_api.model('Admin Registration', {\n    'name': fields.String(required=True, description='Admin\\'s name'),\n    'email': fields.String(required=True, description='Admin\\'s email'),\n    'password': fields.String(required=True, description='Admin\\'s password')\n})\n\n#TODO: \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u0444\u0430\u0431\u0440\u0438\u043a\u0443 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f app\n@admin_api.route('/signup')\nclass Signup(Resource):\n    @admin_api.doc('Register a new Admin')\n    @admin_api.response(201, 'New Admin successfully registered')\n    @admin_api.expect(admin_reg)\n    def post(self):\n        ''' Signup a new admin '''\n        data = request.json\n        payload = admin_api.payload or data\n        schema = NewAdminSchema()\n\n        try:\n            new_payload = schema.load(payload)._asdict()\n        except ValidationError as e:\n            response = {\n                'success': False,\n                'error': e.messages\n            }\n            return response, 400\n        #TODO: \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u043a\u0438\u0434\u044b\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c\n        response, code = AdminsService.create(data=new_payload)\n        return response, code\n#TODO: \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0440\u043e\u0443\u0442 \u0432 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b\n@admin_api.route('/exam/oar/<string:session>/<string:semester>/<string:course>/<string:department>')\nclass ExamOAR(Resource):\n    @admin_login_required\n    @admin_api.doc('Get data for exam OAR sheet', security='apiKey')\n    def get(self, session, semester, course, department, decoded_payload):\n        ''' Get all students from a department who attended exam for a course '''\n        email = decoded_payload.get('email')\n        response, code = AdminsService.get_exam_oar(\n            session=session, semester=semester, course_code=course, department_code=department, email=email)\n        return response, code\n\n@admin_api.route('/lecture/oar/<string:session>/<string:semester>/<string:course>/<string:department>')\nclass LectureOAR(Resource):\n    @admin_login_required\n    @admin_api.doc('Get data for lecture OAR sheet', security='apiKey')\n    def get(self, session, semester, course, department, decoded_payload):\n        ''' Get all students from a department who attended exam for a course '''\n        email = decoded_payload.get('email')\n        response, code = AdminsService.get_lecture_oar(\n            session=session, semester=semester, course_code=course, department_code=department, email=email)\n        return response, code\n\n@admin_api.route('/mastersheet/<string:session>/<string:semester>/<string:level>/<string:department>')\nclass LectureOAR(Resource):\n    @admin_login_required\n    @admin_api.doc('Get data for master sheet', security='apiKey')\n    def get(self, session, semester, level, department, decoded_payload):\n        ''' Get all students from a department and level who attended lecture, for all courses '''\n        email = decoded_payload.get('email')\n        response, code = AdminsService.get_mastersheet(\n            session=session, semester=semester, level=level, department_code=department, email=email)\n        return response, code\n", "auth_controller.py": "from flask import request\nfrom flask_restplus import Resource, Namespace, fields\nfrom marshmallow import ValidationError\n\nfrom api.service import AuthService\nfrom api.schema import StudentLoginSchema, LecturerLoginSchema, HODLoginSchema, AdminLoginSchema\n\nstudent_auth_api = Namespace(\n    'students', description='API endpoints for authenticating Students')\n\nstudent_login = student_auth_api.model('Student login', {\n    'reg_no': fields.String(required=True, description='Student\\'s reg number'),\n    'password': fields.String(required=True, description='Student\\'s password'),\n})\n\nlecturer_auth_api = Namespace(\n    'lecturers', description='API endpoints for authenticating Lecturers')\n\nlecturer_login = lecturer_auth_api.model('Lecturer login', {\n    'email': fields.String(required=True, description='Lecturer\\'s email'),\n    'password': fields.String(required=True, description='Lecturer\\'s password'),\n})\n\nhod_auth_api = Namespace(\n    'hods', description='API endpoints for authenticating HODs')\n\nhod_login = hod_auth_api.model('HOD login', {\n    'email': fields.String(required=True, description='HOD\\'s email'),\n    'password': fields.String(required=True, description='HOD\\'s password'),\n})\n\nadmin_auth_api = Namespace(\n    'admins', description='API endpoints for authenticating Admins')\n\nadmin_login = admin_auth_api.model('Admin login', {\n    'email': fields.String(required=True, description='Admin\\'s email'),\n    'password': fields.String(required=True, description='Admin\\'s password'),\n})\n\nauth_verification_api = Namespace('auth', description='API endpoint for verifying auth token')\n\n\n@student_auth_api.route('/signin')\nclass StudentLogin(Resource):\n    @student_auth_api.doc('Login a student')\n    @student_auth_api.response(200, 'Logged in successfully')\n    @student_auth_api.expect(student_login)\n    def post(self):\n        ''' Authenticate a student '''\n        data = request.json\n        payload = student_auth_api.payload or data\n        schema = StudentLoginSchema()\n\n        try:\n            new_payload = schema.load(payload)._asdict()\n        except ValidationError as e:\n            response = {\n                'success': False,\n                'error': e.messages\n            }\n            return response, 400\n\n        response, code = AuthService.login_student(data=new_payload)\n        return response, code\n\n\n@student_auth_api.route('/signout')\nclass StudentLogout(Resource):\n    @student_auth_api.doc('Log out a student', security='apiKey')\n    @student_auth_api.response(200, 'Logged out successfully')\n    def get(self):\n        ''' Logout a student '''\n        auth_token = request.headers.get('x-auth-token')\n        if not auth_token or auth_token is None:\n            response = {\n                'success': False,\n                'message': 'Please provide a token'\n            }\n            return response, 401\n        response, code = AuthService.logout_student(auth_token=auth_token)\n        return response, code\n\n\n@lecturer_auth_api.route('/signin')\nclass LecturerLogin(Resource):\n    @lecturer_auth_api.doc('Login a lecturer')\n    @lecturer_auth_api.response(200, 'Logged in successfully')\n    @lecturer_auth_api.expect(lecturer_login)\n    def post(self):\n        ''' Authenticate a lecturer '''\n        data = request.json\n        payload = lecturer_auth_api.payload or data\n        schema = LecturerLoginSchema()\n\n        try:\n            new_payload = schema.load(payload)._asdict()\n        except ValidationError as e:\n            response = {\n                'success': False,\n                'error': e.messages\n            }\n            return response, 400\n\n        response, code = AuthService.login_lecturer(data=new_payload)\n        return response, code\n\n\n@lecturer_auth_api.route('/signout')\nclass LecturerLogout(Resource):\n    @lecturer_auth_api.doc('Log out a lecturer', security='apiKey')\n    @lecturer_auth_api.response(200, 'Logged out successfully')\n    def get(self):\n        ''' Logout a lecturer '''\n        auth_token = request.headers.get('x-auth-token')\n        if not auth_token or auth_token is None:\n            response = {\n                'success': False,\n                'message': 'Please provide a token'\n            }\n            return response, 401\n        response, code = AuthService.logout_lecturer(auth_token=auth_token)\n        return response, code\n\n\n@hod_auth_api.route('/signin')\nclass HODLogin(Resource):\n    @hod_auth_api.doc('Login a HOD')\n    @hod_auth_api.response(200, 'Logged in successfully')\n    @hod_auth_api.expect(hod_login)\n    def post(self):\n        ''' Authenticate an HOD '''\n        data = request.json\n        payload = hod_auth_api.payload or data\n        schema = HODLoginSchema()\n\n        try:\n            new_payload = schema.load(payload)._asdict()\n        except ValidationError as e:\n            response = {\n                'success': False,\n                'error': e.messages\n            }\n            return response, 400\n\n        response, code = AuthService.login_hod(data=new_payload)\n        return response, code\n\n\n@hod_auth_api.route('/signout')\nclass HODLogout(Resource):\n    @hod_auth_api.doc('Log out an HOD', security='apiKey')\n    @hod_auth_api.response(200, 'Logged out successfully')\n    def get(self):\n        ''' Logout an HOD '''\n        auth_token = request.headers.get('x-auth-token')\n        if not auth_token or auth_token is None:\n            response = {\n                'success': False,\n                'message': 'Please provide a token'\n            }\n            return response, 401\n        response, code = AuthService.logout_hod(auth_token=auth_token)\n        return response, code\n\n@admin_auth_api.route('/signin')\nclass AdminLogin(Resource):\n    @admin_auth_api.doc('Login a admin')\n    @admin_auth_api.response(200, 'Logged in successfully')\n    @admin_auth_api.expect(admin_login)\n    def post(self):\n        ''' Authenticate an admin '''\n        data = request.json\n        payload = admin_auth_api.payload or data\n        schema = AdminLoginSchema()\n\n        try:\n            new_payload = schema.load(payload)._asdict()\n        except ValidationError as e:\n            response = {\n                'success': False,\n                'error': e.messages\n            }\n            return response, 400\n\n        response, code = AuthService.login_admin(data=new_payload)\n        return response, code\n\n\n@admin_auth_api.route('/signout')\nclass AdminLogout(Resource):\n    @admin_auth_api.doc('Log out an admin', security='apiKey')\n    @admin_auth_api.response(200, 'Logged out successfully')\n    def get(self):\n        ''' Logout an admin '''\n        auth_token = request.headers.get('x-auth-token')\n        if not auth_token or auth_token is None:\n            response = {\n                'success': False,\n                'message': 'Please provide a token'\n            }\n            return response, 401\n        response, code = AuthService.logout_admin(auth_token=auth_token)\n        return response, code\n\n@auth_verification_api.route('/verify')\nclass AuthTokenVerification(Resource):\n    @auth_verification_api.doc('Verify Auth Token', security='apiKey')\n    @auth_verification_api.response(200, 'Valid Token')\n    @auth_verification_api.response(401, 'Token Not Provided')\n    @auth_verification_api.response(401, 'Invalid Token')\n    @auth_verification_api.response(401, 'Expired Token')\n    @auth_verification_api.response(403, 'Revoked Token')\n    def get(self):\n        ''' Verify a token's validity '''\n        auth_token = request.headers.get('x-auth-token')\n        if not auth_token or auth_token is None:\n            response = {\n                'success': False,\n                'message': 'Please provide a token'\n            }\n            return response, 401\n\n        response, code = AuthService.verify(auth_token=auth_token)\n        return response, code\n", "courses_controller.py": "import os\n\nfrom flask_restplus import Resource, Namespace\n\nfrom api.service import CourseService\n\ncourse_api = Namespace(\n    'courses', description='API endpoints for managing courses resourse')\n\ncurrent_api = Namespace(\n    'current', description='API endpoints for getting current session and semester')\n\n\n@course_api.route('/all')\nclass CourseList(Resource):\n    @course_api.doc('Get All Courses')\n    def get(self):\n        ''' Get all courses '''\n        response, code = CourseService.get_all_courses()\n        return response, code\n\n\n@course_api.route('/<string:department>/<string:level>')\n@course_api.route('/<string:department>/<string:level>/<int:minimal>')\nclass Course(Resource):\n    @course_api.doc('Get Courses via Department & Level')\n    def get(self, department, level, minimal=0):\n        ''' Get a course by department and level '''\n        print(minimal)\n        response, code = CourseService.get_courses_by_dept_level(\n            department=department, level=level, minimal=minimal)\n        return response, code\n\n\n@current_api.route('/semester')\nclass CurrentSemester(Resource):\n    @current_api.doc('Get current semester')\n    def get(self):\n        ''' Get the current semester '''\n        response = {\n            'success': True,\n            'data': os.environ.get('CURRENT_SEMESTER') or 'unavailable'\n        }\n        return response, 200\n\n\n@current_api.route('/session')\nclass CurrentSession(Resource):\n    @current_api.doc('Get current session')\n    def get(self):\n        ''' Get the current session '''\n        response = {\n            'success': True,\n            'data': os.environ.get('CURRENT_SESSION') or 'unavailable'\n        }\n        return response, 200\n", "departments_controller.py": "from flask_restplus import Resource, Namespace\n\nfrom api.service import DepartmentService\n\ndept_api = Namespace('departments', description='API endpoints for managing departments resource')\n\n\n@dept_api.route('/all')\nclass DepartmentList(Resource):\n    @dept_api.doc('Get All Departments')\n    def get(self):\n        ''' Get all departments '''\n        response, code = DepartmentService.get_all()\n        return response, code\n", "hods_controller.py": "from flask import request\nfrom flask_restplus import Resource, Namespace, fields\nfrom marshmallow import ValidationError\n\nfrom api.service import HODService, hod_login_required\nfrom api.schema import NewHODSchema, EditHODSchema\n\nhod_api = Namespace(\n    'hods', description='API endpoints for managing HOD Resource')\n\nhod_reg = hod_api.model('HOD Registration', {\n    'name': fields.String(required=True, description='HOD\\'s name'),\n    'email': fields.String(required=True, description='HOD\\'s email'),\n    'department': fields.String(required=True, description='HOD\\'s department'),\n    'password': fields.String(required=True, description='HOD\\'s password'),\n})\n\nedit_me = hod_api.model('HOD Update', {\n    'name': fields.String(required=True, description='HOD\\'s name'),\n    'password': fields.String(required=True, description='HOD\\'s password'),\n})\n\nassign_course_object = hod_api.model('Assign Course Object', {\n    'email': fields.String(required=True, description='Lecturer\\'s email'),\n    'courses': fields.List(fields.String, required=True, description='List of courses to be assigned to lecturer')\n})\n\nassign_course_list = hod_api.model('Assign Courses List', {\n    'payload': fields.Nested(assign_course_object, required=True, description='List of course objects to be assigned to a lecturer', as_list=True)\n})\n\n\n@hod_api.route('/signup')\nclass HODSignup(Resource):\n    @hod_api.doc('Register a new hod')\n    @hod_api.response(201, 'New hod successfully registered')\n    @hod_api.expect(hod_reg)\n    def post(self):\n        ''' Signup a new HOD '''\n        data = request.json\n        payload = hod_api.payload or data\n        schema = NewHODSchema()\n\n        try:\n            new_payload = schema.load(payload)._asdict()\n        except ValidationError as e:\n            response = {\n                'success': False,\n                'error': e.messages\n            }\n            return response, 400\n        response, code = HODService.create_hod(data=new_payload)\n        return response, code\n\n@hod_api.route('/me')\nclass Me(Resource):\n    @hod_login_required\n    @hod_api.doc('View HOD details', security='apiKey')\n    def get(self, decoded_payload):\n        ''' Get details of logged in HOD '''\n        email = decoded_payload.get('email')\n        response, code = HODService.get_me(email=email)\n        return response, code\n\n@hod_api.route('/me/edit')\nclass EditMe(Resource):\n    @hod_login_required\n    @hod_api.doc('Update HOD details', security='apiKey')\n    @hod_api.expect(edit_me)\n    def post(self, decoded_payload):\n        ''' Edit details of logged in HOD '''\n        email = decoded_payload.get('email')\n        data = request.json\n        schema = EditHODSchema()\n        payload = hod_api.payload or data\n\n        try:\n            new_payload = schema.load(payload)._asdict()\n        except ValidationError as e:\n            response = {\n                'success': False,\n                'error': e.messages\n            }\n            return response, 400\n\n        response, code = HODService.edit_me(email=email, data=new_payload)\n        return response, code\n\n@hod_api.route('/lecturers')\nclass LecturerList(Resource):\n    @hod_login_required\n    @hod_api.doc('Get All Lecturers in HOD department', security='apiKey')\n    def get(self, decoded_payload):\n        ''' Get all lecturers in HOD's department '''\n        email = decoded_payload.get('email')\n        response, code = HODService.get_lecturers(email=email)\n        return response, code\n\n@hod_api.route('/courses/<string:semester>')\nclass CourseList(Resource):\n    @hod_login_required\n    @hod_api.doc('Get All Courses in HOD department per semester', security='apiKey')\n    def get(self, semester, decoded_payload):\n        ''' Get all courses in HOD's department filtered by provided semester '''\n        email = decoded_payload.get('email')\n        response, code = HODService.get_courses(email=email, semester=semester)\n        return response, code\n\n@hod_api.route('/assign/lecturers')\nclass AssignCourses(Resource):\n    @hod_login_required\n    @hod_api.doc('Assign Courses to Lecturers', security='apiKey')\n    @hod_api.expect(assign_course_list)\n    def post(self, decoded_payload):\n        ''' Assign courses to lecturers '''\n        email = decoded_payload.get('email')\n        data = request.json.get('payload')\n        payload = hod_api.payload.get('payload') or data\n        response, code = HODService.assign_courses(email=email, data=payload)\n        return response, code\n\n@hod_api.route('/assigned/<string:semester>')\nclass Assigned(Resource):\n    @hod_login_required\n    @hod_api.doc('Get All Courses Assigned per semester', security='apiKey')\n    def get(self, semester, decoded_payload):\n        ''' View courses and assigned lecturers '''\n        email = decoded_payload.get('email')\n        response, code = HODService.get_assigned(email=email, semester=semester)\n        return response, code\n", "lecturers_controller.py": "from flask import request\nfrom flask_restplus import Resource, Namespace, fields\nfrom marshmallow import ValidationError\n\nfrom api.service import LecturerService, lecturer_login_required\nfrom api.schema import NewLecturerSchema\n\nlecturer_api = Namespace(\n    'lecturers', description='API endpoints for managing Lecturer Resource')\n\nlecturer_reg = lecturer_api.model('Lecturer Registration', {\n    'name': fields.String(required=True, description='Lecturer\\'s name'),\n    'email': fields.String(required=True, description='Lecturer\\'s email'),\n    'department': fields.String(required=True, description='Lecturer\\'s department'),\n    'password': fields.String(required=True, description='Lecturer\\'s password'),\n})\n\n\n@lecturer_api.route('/signup')\nclass LecturerSignup(Resource):\n    @lecturer_api.doc('Register a new lecturer')\n    @lecturer_api.response(201, 'New lecturer successfully registered')\n    @lecturer_api.expect(lecturer_reg)\n    def post(self):\n        ''' Signup a new lecturer '''\n        data = request.json\n        payload = lecturer_api.payload or data\n        schema = NewLecturerSchema()\n\n        try:\n            new_payload = schema.load(payload)._asdict()\n        except ValidationError as e:\n            response = {\n                'success': False,\n                'error': e.messages\n            }\n            return response, 400\n        response, code = LecturerService.create_lecturer(data=new_payload)\n        return response, code\n\n@lecturer_api.route('/me')\nclass Me(Resource):\n    @lecturer_login_required\n    @lecturer_api.doc('View Lecturer details', security='apiKey')\n    def get(self, decoded_payload):\n        ''' Get lecturer details including assigned courses if any '''\n        email = decoded_payload.get('email')\n        response, code = LecturerService.get_me(email=email)\n        return response, code\n\n@lecturer_api.route('/lecture/attendance/<string:course>')\nclass MarkLecturerLectureAttendance(Resource):\n    @lecturer_login_required\n    @lecturer_api.doc('Mark attendance for lecturer for a lecture', security='apiKey')\n    def get(self, course, decoded_payload):\n        ''' 'Mark attendance for lecturer for a lecture '''\n        email = decoded_payload.get('email')\n        response, code = LecturerService.mark_lecture_attendance(email=email, course_code=course)\n        return response, code\n", "schools_controller.py": "from flask_restplus import Resource, Namespace\n\nfrom api.service import SchoolService\n\nschool_api = Namespace('schools', description='API endpoints for managing schools resource')\n\n\n@school_api.route('/all')\nclass SchoolList(Resource):\n    @school_api.doc('Get All Schools')\n    def get(self):\n        ''' Get all schools '''\n        response, code = SchoolService.get_all()\n        return response, code\n\n@school_api.route('/<string:school>/departments')\nclass DepartmentList(Resource):\n    @school_api.doc('Get All departments in a school')\n    def get(self, school):\n        ''' Get all departments in provided school '''\n        response, code = SchoolService.get_departments(school_code=school)\n        return response, code\n", "students_controller.py": "from flask import request\nfrom flask_restplus import Resource, Namespace, fields\nfrom marshmallow import ValidationError\n\nfrom api.service import StudentService, student_login_required\nfrom api.schema import NewStudentSchema, EditMeSchema\n\nstudent_api = Namespace(\n    'students', description='API endpoints for managin Student Resource')\n\nstudent_reg = student_api.model('Student Registration', {\n    'firstname': fields.String(required=True, description='Student\\'s firstname'),\n    'lastname': fields.String(required=True, description='Student\\'s lastname'),\n    'othername': fields.String(required=True, description='Student\\'s othername'),\n    'reg_no': fields.String(required=True, description='Student\\'s reg number'),\n    'email': fields.String(required=True, description='Student\\'s email'),\n    'password': fields.String(required=True, description='Student\\'s password'),\n})\n\nedit_me = student_api.model('Student Update', {\n    'level': fields.String(required=True, description='Student\\'s level'),\n    'department': fields.String(required=True, description='Student\\'s department'),\n})\n\ncourses_registration = student_api.model('Courses Registration', {\n    'courses': fields.List(fields.String, required=True, description='A Course')\n})\n\n\n@student_api.route('')\nclass StudentList(Resource):\n    @student_api.doc('Get all students')\n    def get(self):\n        ''' Get all students '''\n        response, code = StudentService.get_all_students()\n        return response, code\n\n\n@student_api.route('/signup')\nclass Signup(Resource):\n    @student_api.doc('Register a new student')\n    @student_api.response(201, 'New student successfully registered')\n    @student_api.expect(student_reg)\n    def post(self):\n        ''' Signup a new student '''\n        data = request.json\n        payload = student_api.payload or data\n        schema = NewStudentSchema()\n\n        try:\n            new_payload = schema.load(payload)._asdict()\n        except ValidationError as e:\n            response = {\n                'success': False,\n                'error': e.messages\n            }\n            return response, 400\n        response, code = StudentService.create_student(data=new_payload)\n        return response, code\n\n\n@student_api.route('/me')\nclass Me(Resource):\n    @student_login_required\n    @student_api.doc('View student details', security='apiKey')\n    def get(self, decoded_payload):\n        ''' Get details of logged in student '''\n        reg_no = decoded_payload.get('reg_no')\n        response, code = StudentService.get_me(reg_no=reg_no)\n        return response, code\n\n\n@student_api.route('/me/edit')\nclass EditMe(Resource):\n    @student_login_required\n    @student_api.expect(edit_me)\n    @student_api.doc('Edit/Update student details', security='apiKey')\n    def post(self, decoded_payload):\n        ''' Update details of logged in student '''\n        reg_no = decoded_payload.get('reg_no')\n        data = request.json\n        payload = student_api.payload or data\n        schema = EditMeSchema()\n\n        try:\n            new_payload = schema.load(payload)._asdict()\n        except ValidationError as e:\n            response = {\n                'success': False,\n                'error': e.messages\n            }\n            return response, 400\n        response, code = StudentService.edit_me(\n            reg_no=reg_no, data=new_payload)\n        return response, code\n\n\n@student_api.route('/me/courses/<string:semester>')\nclass StudentCourseList(Resource):\n    @student_login_required\n    @student_api.doc('View student courses per semester', security='apiKey')\n    def get(self, semester, decoded_payload):\n        ''' View student courses of specified semester '''\n        reg_no = decoded_payload.get('reg_no')\n        response, code = StudentService.get_me_courses(\n            reg_no=reg_no, semester=semester)\n        return response, code\n\n\n@student_api.route('/me/register/courses')\nclass RegisterCourses(Resource):\n    @student_login_required\n    @student_api.expect(courses_registration)\n    @student_api.doc('Register Student Courses', security='apiKey')\n    def post(self, decoded_payload):\n        ''' Register courses for logged in student '''\n        reg_no = decoded_payload.get('reg_no')\n        data = request.json\n        payload = student_api.payload or data\n        response, code = StudentService.register_courses(\n            reg_no=reg_no, data=payload)\n        return response, code\n\n\n@student_api.route('/me/registered/courses')\nclass RegisteredCourseList(Resource):\n    @student_login_required\n    @student_api.doc('View Student\\'s Registered Courses', security='apiKey')\n    def get(self, decoded_payload):\n        ''' View registered courses of logged in student '''\n        reg_no = decoded_payload.get('reg_no')\n        response, code = StudentService.get_registered_courses(reg_no=reg_no)\n        return response, code\n\n\n@student_api.route('/me/register/fingerprint')\nclass RegisterFingerprintTemplate(Resource):\n    @student_login_required\n    @student_api.doc('Register Student\\'s fingerprint', security='apiKey')\n    def post(self, decoded_payload):\n        ''' HW: Register fingerprint for registered student '''\n        reg_no = decoded_payload.get('reg_no')\n        data = request.json\n        payload = student_api.payload or data\n        response, code = StudentService.register_fingerprint(\n            reg_no=reg_no, data=payload)\n        return response, code\n\n\n@student_api.route('/<string:reg_no>/<string:course>')\nclass VerifyRegisteredCourse(Resource):\n    def get(self, reg_no, course):\n        ''' Verify if student has registered a course '''\n        response, code = StudentService.verify_registered_courses(\n            reg_no=reg_no, course_code=course)\n        return response, code\n\n@student_api.route('/registered/<string:course>/<string:department>')\nclass RegisteredCourseStudentList(Resource):\n    def get(self, course, department):\n        ''' HW: Get all the students from a department that have registered for a course '''\n        response, code = StudentService.get_registered_students(\n            course_code=course, department_code=department)\n        return response, code\n\n@student_api.route('/<string:reg_no>/exam/attendance/<string:course>')\nclass ExamAttendance(Resource):\n    def get(self, reg_no, course):\n        ''' Take course exam attendance for student with provided reg number '''\n        response, code = StudentService.take_exam_attendance(reg_no=reg_no, course_code=course)\n        return response, code\n\n@student_api.route('/<string:reg_no>/lecture/attendance/<string:course>/<string:lecturer>')\nclass LectureAttendance(Resource):\n    def get(self, reg_no, course, lecturer):\n        ''' Take course lecture attendance for student with provided reg number '''\n        response, code = StudentService.take_lecture_attendance(\n            reg_no=reg_no, course_code=course, lecturer_id=lecturer)\n        return response, code\n", "__init__.py": "", "model": {}, "admins_model.py": "from datetime import datetime\nfrom werkzeug.security import generate_password_hash, check_password_hash\n#TODO: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439\nfrom api import db\n\n#TODO: \u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0438\u043c\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u0442\u0438\u043b\u044c ORM\nclass Admin(db.Model):\n    __tablename__ = 'admins'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String(128))\n    email = db.Column(db.String(128))\n    password_hash = db.Column(db.String(128))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n    def __init__(self, name, email, password):\n        self.name = name.title()\n        self.email = email\n        self.password = password\n\n    @property\n    def password(self):\n        raise AttributeError('Sorry mate :|. Read only field')\n\n    @password.setter\n    def password(self, password):\n        self.password_hash = generate_password_hash(password)\n\n    def verify_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\n    def __repr__(self):\n        return f'Admin(name={self.name}, email={self.email})'\n\n    def save(self):\n        db.session.add(self)\n        db.session.commit()", "courses_model.py": "from api import db\nfrom api.model import Level, Department, Semester\n\n\nclass Course(db.Model):\n    __tablename__ = 'courses'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    title = db.Column(db.String(100))\n    code = db.Column(db.String(6))\n    level_id = db.Column(db.Integer, db.ForeignKey('levels.id'))\n    department_id = db.Column(db.Integer, db.ForeignKey('departments.id'))\n    semester_id = db.Column(db.Integer, db.ForeignKey('semesters.id'))\n    units = db.Column(db.Integer)\n\n    def __init__(self, title, code, level, department_code, semester, units):\n        self.title = title\n        self.code = code\n        self.level = Level.query.filter_by(level=level).first()\n        self.department = Department.query.filter_by(code=department_code).first()\n        self.semester = Semester.query.filter_by(semester=semester).first()\n        self.units = units\n\n    @staticmethod\n    def exists(course_code):\n        return Course.query.filter_by(code=course_code).count() > 0\n\n    @property\n    def to_dict(self):\n        json_course = {\n            'course_code': self.code,\n            'course_title': self.title,\n            'course_unit': self.units,\n            'level_oferred':  self.level.level,\n            'department': self.department.code,\n            'school': self.department.school.code,\n            'semester_offered': self.semester.semester\n        }\n        return json_course\n\n    def save(self):\n        db.session.add(self)\n        db.session.commit()", "departments_model.py": "from api import db\nfrom api.model import School\n\nclass Department(db.Model):\n    __tablename__ = 'departments'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String(50))\n    code = db.Column(db.String(3))\n    school_id = db.Column(db.Integer, db.ForeignKey('schools.id'))\n    students = db.relationship('Student', backref='department')\n    courses = db.relationship('Course', backref='department')\n    lecturers = db.relationship('Lecturer', backref='department')\n    hod = db.relationship('HOD', backref='department', uselist=False)\n\n    def __init__(self, name=None, code=None, school_code=None):\n        self.name = name\n        self.code = code\n        self.school = School.query.filter_by(code=school_code).first()\n\n    @staticmethod\n    def exists(department_code):\n        return Department.query.filter_by(code=department_code).count() > 0\n\n    @property\n    def to_dict(self):\n        json_department = {\n            'code': self.code,\n            'fullname': self.name,\n            'school_code': self.school.code,\n            'school_fullname': self.school.name\n        }\n        return json_department\n\n    def save(self):\n        db.session.add(self)\n        db.session.commit()\n", "hods_model.py": "from datetime import datetime\n\nimport arrow\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nfrom api import db\nfrom api.model import Department\n\n\nclass HOD(db.Model):\n    __tablename__ = 'hods'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String(100))\n    email = db.Column(db.String(128), index=True)\n    department_id = db.Column(db.Integer, db.ForeignKey('departments.id'))\n    password_hash = db.Column(db.String(128))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    has_assigned_courses = db.Column(db.Boolean, default=False)\n\n    def __init__(self, name, email, department_code, password):\n        self.name = name.title()\n        self.email = email\n        self.department = Department.query.filter_by(code=department_code).first()\n        self.password = password\n\n    @property\n    def to_dict(self):\n        json_hod = {\n            'name': self.name,\n            'email': self.email,\n            'department': self.department.code,\n            'school': self.department.school.code,\n            'registered_on': arrow.get(self.created_at).for_json(),\n            'registered_since': arrow.get(self.created_at).humanize(),\n            'has_assigned_courses': self.has_assigned_courses\n        }\n        return json_hod\n\n    @property\n    def password(self):\n        raise AttributeError('Sorry mate :|. Read only field')\n\n    @password.setter\n    def password(self, password):\n        self.password_hash = generate_password_hash(password)\n\n    def verify_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\n    def __repr__(self):\n        return f'Hod(name={self.name}, email={self.email})'\n\n    def save(self):\n        db.session.add(self)\n        db.session.commit()\n", "lecturers_model.py": "import os\nfrom datetime import datetime\n\nimport arrow\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nfrom api import db\nfrom api.model import Department\nfrom api import select_table_name\n\nsession = os.environ.get('CURRENT_ASSIGNED_COURSES_SESSION')\nsemester = os.environ.get('CURRENT_ASSIGNED_COURSES_SEMESTER')\nDB_NAME = os.environ.get('DB_NAME')\nassigned_courses_table_name = select_table_name(f'ASSIGNED_COURSES_{semester}_{session}')\nlecturer_lectures_table_name = select_table_name(f'LECTURER_LECTURES_{semester}_{session}')\nstudent_lectures_table_name = select_table_name(f'STUDENT_LECTURES_{semester}_{session}')\n\nassigned_courses = db.Table(assigned_courses_table_name,\n    db.Column('lecturer_id', db.Integer, db.ForeignKey('lecturers.id'), primary_key=True),\n    db.Column('course_id', db.Integer, db.ForeignKey('courses.id'), primary_key=True))\n\nlecture_attendance = db.Table(lecturer_lectures_table_name,\n    db.Column('lecturer_id', db.Integer, db.ForeignKey('lecturers.id'), primary_key=True),\n    db.Column('course_id', db.Integer, db.ForeignKey('courses.id'), primary_key=True),\n    db.Column('count', db.Integer, default=1))\n\n\nclass Lecturer(db.Model):\n    __tablename__ = 'lecturers'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String(100))\n    email = db.Column(db.String(128), index=True)\n    department_id = db.Column(db.Integer, db.ForeignKey('departments.id'))\n    password_hash = db.Column(db.String(128))\n    assigned_courses = db.relationship('Course', secondary=assigned_courses,\n        backref=db.backref('lecturers_assigned', lazy='dynamic'), lazy='dynamic')\n    lecture_attendance = db.relationship('Course', secondary=lecture_attendance,\n        backref=db.backref('lecturer_lecture_attended', lazy='dynamic'), lazy='dynamic')\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n    def __init__(self, name, email, department_code, password):\n        self.name = name.title()\n        self.email = email\n        self.department = Department.query.filter_by(\n            code=department_code).first()\n        self.password = password\n\n    @property\n    def to_dict(self):\n        json_lecturer = {\n            'id': self.id,\n            'name': self.name,\n            'email': self.email,\n            'department': self.department.code,\n            'school': self.department.school.code,\n            # 'registered_on': arrow.get(self.created_at).for_json(),\n            # 'registered_since': arrow.get(self.created_at).humanize(),\n        }\n        return json_lecturer\n\n    def assign_course(self, course):\n        if not self.is_assigned(course):\n            self.assigned_courses.append(course)\n\n    def is_assigned(self, course):\n        return self.assigned_courses.filter(assigned_courses.c.course_id == course.id).count() > 0\n\n    def attend_lecture(self, course):\n        #TODO: \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0447\u0430\u0441\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0438 \u0432 \u0441\u0435\u0440\u0432\u0438\u0441\n\n        if not self.is_lecture_attended(course):\n            self.lecture_attendance.append(course)\n            # Create lecture day1 column in students lecture table if column doesn't exist\n            #TODO: \u0443\u0431\u0440\u0430\u0442\u044c \u0447\u0438\u0441\u0442\u044b\u0439 SQL \u043f\u043e \u043a\u043e\u0434\u0443\n            sql = f'''\n                SHOW COLUMNS\n                FROM {student_lectures_table_name}\n                LIKE 'day1'\n            '''\n            result = db.session.execute(sql)\n            column_exists = result.fetchone()\n\n            if not column_exists:\n                sql = f'''\n                    ALTER TABLE {student_lectures_table_name}\n                    ADD day1 INT NOT NULL DEFAULT 0\n                '''\n                db.session.execute(sql)\n        else:\n            # Increment lecture attendance count for lecturer\n            sql = f'''\n                UPDATE {lecturer_lectures_table_name}\n                SET count = count + 1\n                WHERE lecturer_id = {self.id}\n                AND course_id = {course.id}\n            '''\n            db.session.execute(sql)\n            db.session.commit()\n\n            # Get current lecturer lecture count\n            sql = f'''\n                SELECT count\n                FROM {lecturer_lectures_table_name}\n                WHERE lecturer_id = {self.id}\n                AND course_id = {course.id}\n                LIMIT 1\n            '''\n            result = db.session.execute(sql)\n            lecture_count = result.fetchone()[0]\n            \n            # Create lecture day column in students lecture table with current count if column doesn't exist\n            sql = f'''\n                SHOW COLUMNS\n                FROM {student_lectures_table_name}\n                LIKE 'day{lecture_count}'\n            '''\n            result = db.session.execute(sql)\n            column_exists = result.fetchone()\n\n            if not column_exists:\n                sql = f'''\n                    ALTER TABLE {student_lectures_table_name}\n                    ADD day{lecture_count} INT NOT NULL DEFAULT 0\n                '''\n                db.session.execute(sql)\n\n\n    def is_lecture_attended(self, course):\n        return self.lecture_attendance.filter(lecture_attendance.c.course_id == course.id).count() > 0\n\n    @property\n    def password(self):\n        raise AttributeError('Sorry mate :|. Read only field')\n\n    @password.setter\n    def password(self, password):\n        self.password_hash = generate_password_hash(password)\n\n    def verify_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\n    def __repr__(self):\n        return f'Lecturer(name={self.name}, email={self.email})'\n\n    def save(self):\n        db.session.add(self)\n        db.session.commit()\n", "levels_model.py": "from api import db\n\nclass Level(db.Model):\n    __tablename__ = 'levels'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    level = db.Column(db.String(3))\n    students = db.relationship('Student', backref='level')\n    courses = db.relationship('Course', backref='level')\n\n    def __init__(self, level=None):\n        self.level = level\n\n    @staticmethod\n    def exists(level):\n        return Level.query.filter_by(level=level).count() > 0\n\n    def save(self):\n        db.session.add(self)\n        db.session.commit()\n", "revoked_token_model.py": "from datetime import datetime\n\nfrom api import db\n\nclass RevokedToken(db.Model):\n    __tablename__ = 'revoked_tokens'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    token = db.Column(db.String(300), unique=True, nullable=False)\n    revoked_on = db.Column(db.DateTime, default=datetime.utcnow)\n\n    def __init__(self, token):\n        self.token = token\n\n    @staticmethod\n    def check(token):\n        return RevokedToken.query.filter_by(token=str(token)).count() > 0\n\n    def save(self):\n        db.session.add(self)\n        db.session.commit()\n", "schools_model.py": "from api import db\n\nclass School(db.Model):\n    __tablename__ = 'schools'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    name = db.Column(db.String(50))\n    code = db.Column(db.String(4))\n    departments = db.relationship('Department', backref='school')\n\n    def __init__(self, name=None, code=None):\n        self.name = name\n        self.code = code\n\n    @staticmethod\n    def exists(code):\n        return School.query.filter_by(code=code).count() > 0\n\n    @property\n    def to_dict(self):\n        json_school = {\n            'code': self.code,\n            'fullname': self.name\n        }\n        return json_school\n\n    def save(self):\n        db.session.add(self)\n        db.session.commit()\n", "semesters_model.py": "from api import db\n\n\nclass Semester(db.Model):\n    __tablename__ = 'semesters'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    semester = db.Column(db.String(7))\n    courses = db.relationship('Course', backref='semester')\n\n    def __init__(self, semester):\n        self.semester = semester\n\n    @staticmethod\n    def exists(semester):\n        return Semester.query.filter_by(semester=semester).count() > 0\n\n    def save(self):\n        db.session.add(self)\n        db.session.commit()\n", "students_model.py": "import os\nfrom datetime import datetime\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nimport arrow\n\nfrom api import db, select_table_name\nfrom api.model import Level\n\n#TODO: \u043b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c BaseSettings\nsession = os.environ.get('CURRENT_REGISTERED_COURSES_SESSION')\nsemester = os.environ.get('CURRENT_REGISTERED_COURSES_SEMESTER')\nregistered_courses_table_name = select_table_name(f'REGISTERED_COURSES_{semester}_{session}')\nexam_table_name = select_table_name(f'STUDENTS_EXAM_{semester}_{session}')\nstudent_lectures_table_name = select_table_name(f'STUDENT_LECTURES_{semester}_{session}')\nlecturer_lectures_table_name = select_table_name(f'LECTURER_LECTURES_{semester}_{session}')\n#TODO: \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u043c\u043e\u0434\u0443\u043b\u044c tables\nregistered_courses = db.Table(registered_courses_table_name,\n    db.Column('student_id', db.Integer, db.ForeignKey('students.id'), primary_key=True),\n    db.Column('course_id', db.Integer, db.ForeignKey('courses.id'), primary_key=True))\n\nexam_attendance = db.Table(exam_table_name,\n    db.Column('student_id', db.Integer, db.ForeignKey('students.id'), primary_key=True),\n    db.Column('course_id', db.Integer, db.ForeignKey('courses.id'), primary_key=True))\n\nlecture_attendance = db.Table(student_lectures_table_name,\n    db.Column('student_id', db.Integer, db.ForeignKey('students.id'), primary_key=True),\n    db.Column('course_id', db.Integer, db.ForeignKey('courses.id'), primary_key=True),\n    db.Column('count', db.Integer, default=0))\n\n\nclass Student(db.Model):\n    __tablename__ = 'students'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    firstname = db.Column(db.String(50))\n    lastname = db.Column(db.String(50))\n    othername = db.Column(db.String(50))\n    reg_no = db.Column(db.String(11), unique=True, index=True)\n    email = db.Column(db.String(128), index=True)\n    level_id = db.Column(db.Integer, db.ForeignKey('levels.id'))\n    department_id = db.Column(db.Integer, db.ForeignKey('departments.id'))\n    password_hash = db.Column(db.String(128))\n    fingerprint_template = db.Column(db.String(1112), unique=True, default=None)\n    graduated = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    reg_complete = db.Column(db.Boolean, default=False)\n    registered_courses = db.relationship('Course', secondary=registered_courses, backref=db.backref(\n        'students_registered', lazy='dynamic'), lazy='dynamic')\n    exam_attendance = db.relationship('Course', secondary=exam_attendance, backref=db.backref(\n        'students_exam_attended', lazy='dynamic'), lazy='dynamic')\n    lecture_attendance = db.relationship('Course', secondary=lecture_attendance,\n        backref=db.backref('student_lecture_attended', lazy='dynamic'), lazy='dynamic')\n    has_registered_course = db.Column(db.Boolean, default=False)\n\n    def __init__(self, firstname=None, lastname=None, othername=None, reg_no=None, email=None, password=None):\n        self.firstname = firstname.title()\n        self.lastname = lastname.title()\n        self.othername = othername.title()\n        self.reg_no = reg_no\n        self.email = email\n        self.password = password\n\n    @property\n    def to_dict(self):\n        json_student = {\n            'firstname': self.firstname,\n            'lastname': self.lastname,\n            'othername': self.othername,\n            'reg_no': self.reg_no,\n            'email': self.email,\n            'level': self.get_level,\n            'department': self.get_department,\n            'school': self.get_school,\n            'fingerprint': True if self.fingerprint_template else False,\n            # 'graduated': self.graduated,\n            'reg_completed': self.reg_complete,\n            # 'registered_on': arrow.get(self.created_at).for_json(),\n            # 'registered_since': arrow.get(self.created_at).humanize(),\n            'has_registered_courses': self.has_registered_course\n        }\n        return json_student\n\n    def register_course(self, course):\n        if not self.is_registered(course):\n            self.registered_courses.append(course)\n\n    def is_registered(self, course):\n        return self.registered_courses.filter(registered_courses.c.course_id == course.id).count() > 0\n\n    def take_exam_attendance(self, course):\n        if not self.exam_attendance_taken(course):\n            self.exam_attendance.append(course)\n\n    def exam_attendance_taken(self, course):\n        return self.exam_attendance.filter(exam_attendance.c.course_id == course.id).count() > 0\n\n    def attend_lecture(self, course, lecturer):\n        # TODO: \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0447\u0430\u0441\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0438 \u0432 \u0441\u0435\u0440\u0432\u0438\u0441\n        if not self.is_lecture_attended(course):\n            self.lecture_attendance.append(course)\n            db.session.commit()\n        # TODO: \u0443\u0431\u0440\u0430\u0442\u044c \u0447\u0438\u0441\u0442\u044b\u0439 SQL \u043f\u043e \u043a\u043e\u0434\u0443\n        # Get current lecturer lecture count\n        sql = f'''\n            SELECT count\n            FROM {lecturer_lectures_table_name}\n            WHERE lecturer_id = {lecturer.id}\n            AND course_id = {course.id}\n            LIMIT 1\n        '''\n        result = db.session.execute(sql)\n        lecturer_lecture_count = result.fetchone()[0]\n        print(lecturer_lecture_count)\n\n        # Check if attendance has been taken by student\n        sql = f'''\n            SELECT day{lecturer_lecture_count}\n            FROM {student_lectures_table_name}\n            WHERE student_id = {self.id}\n            AND course_id = {course.id}\n            LIMIT 1\n        '''\n        result = db.session.execute(sql)\n        student_lecture_count_for_day = result.fetchone()[0]\n\n        if student_lecture_count_for_day == 0:\n            sql = f'''\n                UPDATE {student_lectures_table_name}\n                SET day{lecturer_lecture_count} = 1, count = count + 1\n                WHERE student_id = {self.id}\n                AND course_id = {course.id}\n            '''\n            result = db.session.execute(sql)\n\n    def is_lecture_attended(self, course):\n        return self.lecture_attendance.filter(lecture_attendance.c.course_id == course.id).count() > 0\n\n    @property\n    def get_level(self):\n        level = None\n        if self.level is not None:\n            level = self.level.level\n        return level\n\n    @property\n    def get_department(self):\n        department = None\n        if self.department is not None:\n            department = self.department.code\n        return department\n\n    @property\n    def get_school(self):\n        school = None\n        if self.department is not None:\n            school = self.department.school.code\n        return school\n\n    @property\n    def password(self):\n        raise AttributeError('Sorry mate :|. Read only field')\n\n    @password.setter\n    def password(self, password):\n        self.password_hash = generate_password_hash(password)\n\n    def verify_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\n    def __repr__(self):\n        return f'Student <name:{self.firstname}> <reg_no:{self.reg_no}>'\n\n    def save(self):\n        db.session.add(self)\n        db.session.commit()\n", "schema": {}, "admins_schema.py": "from collections import namedtuple\nimport re\n\nfrom marshmallow import Schema, fields, ValidationError, validates, post_load\n\nfrom api.model import Admin\n\ndef is_school_email(email):\n    return True if re.match(r'[^@]+@futo.edu.ng', email) else False\n\nNewAdmin = namedtuple('NewAdmin', [\n    'name',\n    'email',\n    'password'\n])\n\n\nclass NewAdminSchema(Schema):\n    name = fields.String(required=True, error_messages={'required': 'Name is required'})\n    email = fields.String(required=True, error_messages={'required': 'Email is required'})\n    password = fields.String(required=True, error_messages={'required': 'Password is required'})\n\n    @post_load\n    def new_admin(self, data, **kwargs):\n        return NewAdmin(**data)\n\n    @validates('name')\n    def validate_name(self, value):\n        max_len = 128\n        if not value:\n            raise ValidationError('Name cannot be empty')\n        if len(value) > 128:\n            raise ValidationError(f'Name cannot exceed {max_len} characters')\n\n    @validates('email')\n    def validate_email(self, value):\n        max_len = 128\n        admin = Admin.query.filter_by(email=value).first()\n        if not value:\n            raise ValidationError('Email cannot be empty')\n        if len(value) > 128:\n            raise ValidationError(f'Email cannot exceed {max_len} characters')\n        if not is_school_email(value):\n            raise ValidationError('Invalid email')\n        if admin:\n            raise ValidationError('Admin with this email already exists')\n\n    @validates('password')\n    def validate_password(self, value):\n        max_len = 128\n        if not value:\n            raise ValidationError('Password cannot be empty')\n        if len(value) > 128:\n            raise ValidationError(f'Password cannot exceed {max_len} characters')", "auth_schema.py": "from collections import namedtuple\n\nfrom marshmallow import Schema, fields, post_load, validates, ValidationError\n#TODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c namedtuple \u043d\u0430 dataclass \u0438 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u043e\u0434\u0443\u043b\u044c\nStudentLogin = namedtuple('StudentLogin', [\n    'reg_no',\n    'password'\n])\n\nLecturerLogin = namedtuple('LecturerLogin', [\n    'email',\n    'password'\n])\n\nHODLogin = namedtuple('HODLogin', [\n    'email',\n    'password'\n])\n\nAdminLogin = namedtuple('AdminLogin', [\n    'email',\n    'password'\n])\n\n\nclass StudentLoginSchema(Schema):\n    reg_no = fields.String(required=True, error_messages={'required': 'reg number is required'})\n    password = fields.String(required=True, error_messages={'required': 'password is required'})\n\n    @post_load\n    def new_student(self, data, **kwargs):\n        return StudentLogin(**data)\n\n    @validates('reg_no')\n    def validate_reg_no(self, value):\n        if not value:\n            raise ValidationError('reg number cannot be empty')\n\n    @validates('password')\n    def validate_password(self, value):\n        if not value:\n            raise ValidationError('password cannot be empty')\n\n\nclass LecturerLoginSchema(Schema):\n    email = fields.String(required=True, error_messages={'required': 'email is required'})\n    password = fields.String(required=True, error_messages={'required': 'password is required'})\n\n    @post_load\n    def new_lecturer(self, data, **kwargs):\n        return LecturerLogin(**data)\n\n    @validates('email')\n    def validate_email(self, value):\n        if not value:\n            raise ValidationError('email cannot be empty')\n\n    @validates('password')\n    def validate_password(self, value):\n        if not value:\n            raise ValidationError('password cannot be empty')\n\n\nclass HODLoginSchema(Schema):\n    email = fields.String(required=True, error_messages={'required': 'email is required'})\n    password = fields.String(required=True, error_messages={'required': 'password is required'})\n\n    @post_load\n    def new_hod(self, data, **kwargs):\n        return HODLogin(**data)\n\n    @validates('email')\n    def validate_email(self, value):\n        if not value:\n            raise ValidationError('email cannot be empty')\n\n    @validates('password')\n    def validate_password(self, value):\n        if not value:\n            raise ValidationError('password cannot be empty')\n\nclass AdminLoginSchema(Schema):\n    email = fields.String(required=True, error_messages={'required': 'email is required'})\n    password = fields.String(required=True, error_messages={'required': 'password is required'})\n\n    @post_load\n    def new_admin(self, data, **kwargs):\n        return AdminLogin(**data)\n\n    @validates('email')\n    def validate_email(self, value):\n        if not value:\n            raise ValidationError('email cannot be empty')\n\n    @validates('password')\n    def validate_password(self, value):\n        if not value:\n            raise ValidationError('password cannot be empty')\n", "hods_schema.py": "from collections import namedtuple\nimport re\n\nfrom marshmallow import Schema, ValidationError, fields, post_load, validates\n\nfrom api.model import HOD, Department\n\ndef is_school_email(email):\n    return True if re.match(r'[^@]+@futo.edu.ng', email) else False\n\nNewHOD = namedtuple('NewHOD', [\n    'name',\n    'email',\n    'department',\n    'password'\n])\n\nEditHOD = namedtuple('EditHOD', [\n    'name',\n    'password',\n])\n\nclass EditHODSchema(Schema):\n    name = fields.String(required=True, error_messages={'required': 'Name is required'})\n    password = fields.String(required=True, error_messages={'required': 'Password is required'})\n\n    @post_load\n    def edit_me(self, data, **kwargs):\n        return EditHOD(**data)\n\n    @validates('name')\n    def validate_name(self, value):\n        max_len = 100\n        if not value:\n            raise ValidationError('Name cannot be empty')\n        if len(value) > max_len:\n            raise ValidationError(f'Name cannot exceed {max_len} characters')\n\n\nclass NewHODSchema(Schema):\n    name = fields.String(required=True, error_messages={'required': 'Name is required'})\n    email = fields.Email(required=True, error_messages={'required': 'Email is required'})\n    department = fields.String(required=True, error_messages={'required': 'Department is required'})\n    password = fields.String(required=True, error_messages={'required': 'Password is required'})\n\n    @post_load\n    def new_hod(self, data, **kwargs):\n        return NewHOD(**data)\n\n    @validates('name')\n    def validate_name(self, value):\n        max_len = 100\n        if not value:\n            raise ValidationError('Name cannot be empty')\n        if len(value) > max_len:\n            raise ValidationError(f'Name cannot exceed {max_len} characters')\n\n    @validates('email')\n    def Validate_email(self, value):\n        max_len = 128\n        hod = HOD.query.filter_by(email=value).first()\n        if not value:\n            raise ValidationError('Email cannot be empty')\n        if len(value) > max_len:\n            raise ValidationError(f'Email cannot exceed {max_len} characters')\n        if not is_school_email(value):\n            raise ValidationError('Invalid email')\n        if hod:\n            raise ValidationError('HODs with this email already exists')\n\n    @validates('department')\n    def validate_department(self, value):\n        dept = Department.query.filter_by(code=value).first()\n        if not value:\n            raise ValidationError('department cannot be empty')\n        if not dept:\n            raise ValidationError('Sorry, HODs from this department cannot use the system currently')\n\n    @validates('password')\n    def validate_password(self, value):\n        if not value:\n            raise ValidationError('Password cannot be empty')\n", "lecturers_schema.py": "from collections import namedtuple\nimport re\n\nfrom marshmallow import Schema, ValidationError, fields, post_load, validates\n\nfrom api.model import Lecturer, Department\n\ndef is_school_email(email):\n    return True if re.match(r'[^@]+@futo.edu.ng', email) else False\n\nNewLecturer = namedtuple('NewLecturer', [\n    'name',\n    'email',\n    'department',\n    'password'\n])\n\nclass NewLecturerSchema(Schema):\n    name = fields.String(required=True, error_messages={'required': 'Name is required'})\n    email = fields.Email(required=True, error_messages={'required': 'Email is required'})\n    department = fields.String(required=True, error_messages={'required': 'Department is required'})\n    password = fields.String(required=True, error_messages={'required': 'Password is required'})\n\n    @post_load\n    def new_lecturer(self, data, **kwargs):\n        return NewLecturer(**data)\n\n    @validates('name')\n    def validate_name(self, value):\n        max_len = 100\n        if not value:\n            raise ValidationError('Name cannot be empty')\n        if len(value) > max_len:\n            raise ValidationError(f'Name cannot exceed {max_len} characters')\n\n    @validates('email')\n    def Validate_email(self, value):\n        max_len = 128\n        lecturer = Lecturer.query.filter_by(email=value).first()\n        if not value:\n            raise ValidationError('Email cannot be empty')\n        if len(value) > max_len:\n            raise ValidationError(f'Email cannot excedd {max_len} characters')\n        if not is_school_email(value):\n            raise ValidationError('Invalid email')\n        if lecturer:\n            raise ValidationError('Lecturer with this email already exists')\n\n    @validates('department')\n    def validate_department(self, value):\n        dept = Department.query.filter_by(code=value).first()\n        if not value:\n            raise ValidationError('department cannot be empty')\n        if not dept:\n            raise ValidationError('Sorry, Lecturers from this department cannot use the system currently')\n\n    @validates('password')\n    def validate_password(self, value):\n        if not value:\n            raise ValidationError('Password cannot be empty')\n", "students_schema.py": "from collections import namedtuple\nimport re\n\nfrom marshmallow import Schema, fields, post_load, validates, ValidationError\n\nfrom api.model import Student, Department\n\ndef is_email(email):\n    return True if re.match(r'[^@]+@[^@]+\\.[^@]+', email) else False\n\nNewStudent = namedtuple('NewStudent', [\n    'firstname',\n    'lastname',\n    'othername',\n    'reg_no',\n    'email',\n    'password'\n])\n\nEditMe = namedtuple('EditMe', [\n    'level',\n    'department',\n])\n\nclass EditMeSchema(Schema):\n    level = fields.String(required=True, error_messages={'required': 'level is required'})\n    department = fields.String(required=True, error_messages={'required': 'department is required'})\n\n    @post_load\n    def edit_me(self, data, **kwargs):\n        return EditMe(**data)\n\n    @validates('level')\n    def validate_level(self, value):\n        levels = ['100', '200', '300', '400', '500']\n        if not value:\n            raise ValidationError('Level cannot be empty')\n        if value not in levels:\n            raise ValidationError(f'Invalid level. Must be in {levels}')\n\n    @validates('department')\n    def validate_department(self, value):\n        if not value:\n            raise ValidationError('Department cannot be empty')\n        try:\n            dept = Department.query.filter_by(code=value.upper()).first()\n        except Exception:\n            raise ValidationError('Internal Server Error')\n        if not dept:\n            raise ValidationError('This department does not exist currently')\n\n\nclass NewStudentSchema(Schema):\n    firstname = fields.String(required=True, error_messages={'required': 'firstname is required'})\n    lastname = fields.String(required=True, error_messages={'required': 'lastname is required'})\n    othername = fields.String(required=True, error_messages={'required': 'othername is required'})\n    reg_no = fields.String(required=True, error_messages={'required': 'reg_no is required'})\n    email = fields.Email(required=True, error_messages={'required': 'email is required'})\n    password = fields.String(required=True, error_messages={'required': 'password is required'})\n\n    @post_load\n    def new_student(self, data, **kwargs):\n        return NewStudent(**data)\n\n    @validates('firstname')\n    def validate_firstname(self, value):\n        max_len = 50\n        if not value:\n            raise ValidationError('First name cannot be empty')\n        if len(value) > max_len:\n            raise ValidationError(f'First Name cannot exceed {max_len} characters')\n\n    @validates('lastname')\n    def validate_lastname(self, value):\n        max_len = 50\n        if not value:\n            raise ValidationError('Last name cannot be empty')\n        if len(value) > max_len:\n            raise ValidationError(f'Last name cannot exceed {max_len} characters')\n\n    @validates('othername')\n    def validate_othername(self, value):\n        max_len = 50\n        if not value:\n            raise ValidationError('Other name cannot be empty')\n        if len(value) > max_len:\n            raise ValidationError(f'Other name cannot exceed {max_len} characters')\n\n    @validates('reg_no')\n    def validate_reg_no(self, value):\n        max_len = 11\n        student = Student.query.filter_by(reg_no=value).first()\n        if not value:\n            raise ValidationError('Reg number cannot be empty')\n        if len(value) > max_len or len(value) < max_len:\n            raise ValidationError(f'Reg number must be exactly {max_len} characters')\n        if student:\n            raise ValidationError('Student with this reg number already exists')\n\n    @validates('email')\n    def validate_email(self, value):\n        max_len = 128\n        student = Student.query.filter_by(email=value).first()\n        if not value:\n            raise ValidationError('Email cannot be empty')\n        if len(value) > max_len:\n            raise ValidationError(f'Email cannot exceed {max_len} characters')\n        if not is_email(value):\n            raise ValidationError('Invalid email')\n        if student:\n            raise ValidationError('Student with this email already exists')\n\n    @validates('password')\n    def validate_password(self, value):\n        if not value:\n            raise ValidationError('Password cannot be empty')\n", "service": {}, "admins_service.py": "import os\n\nfrom collections import namedtuple\n#TODO: \u0411\u0414 \u043f\u0440\u043e\u043a\u0438\u0434\u044b\u0432\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 DI\nfrom api import db, AppException, select_table_name\nfrom api.model import Course, Department, Admin, Level, Student\n\n\nclass AdminsService():\n    #TODO: \u0432\u0435\u0437\u0434\u0435 \u043f\u043e \u043a\u043e\u0434\u0443 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432\n    @staticmethod\n    def create(data):\n        response = {}\n        try:\n            admin = Admin(**data)\n            admin.save()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'New admin registered successfully'\n        return response, 201\n\n    @staticmethod\n    def get_exam_oar(session, semester, course_code, department_code, email):\n        response = {}\n\n        try:\n            admin = Admin.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not admin:\n            response['success'] = False\n            response['message'] = 'Admin Not Found'\n            return response, 404\n\n        # Find course and department\n        try:\n            course = Course.query.filter_by(code=course_code).first()\n            department = Department.query.filter_by(code=department_code).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not course or not department:\n            response['success'] = False\n            response['message'] = 'Invalid department or course'\n            return response, 404\n\n        # Perform formatting to check if table with provided session and semester exists\n        formatted_session = session.lstrip('20')[0] + session.lstrip('20')[1]\n        table_to_search = f'STUDENTS_EXAM_{semester.upper()}_{formatted_session}'\n        table_name = select_table_name(table_to_search)\n\n        if table_name is None:\n            response['success'] = False\n            response['message'] = 'Invalid session or semester selected'\n            return response, 404\n\n        # TODO: \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a \u0431\u0434 \u0438\u0437 \u0441\u0435\u0440\u0432\u0438\u0441\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c sqlalchemy core\n        # Perform query and fetch students\n        try:\n            sql = f'''\n                SELECT firstname, lastname, othername, reg_no\n                FROM students\n                INNER JOIN {table_name} ON {table_name}.student_id = students.id\n                WHERE students.department_id = {department.id}\n                AND {table_name}.course_id = {course.id}\n            '''\n            result = db.session.execute(sql)\n            Student = namedtuple('Student', result.keys())\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        response['data'] = []\n        for record in result.fetchall():\n            student = Student(*record)\n            data = {}\n            data['firstname'] = student.firstname\n            data['lastname'] = student.lastname\n            data['othername'] = student.othername\n            data['reg_no'] = student.reg_no\n            response['data'].append(data)\n\n        response['success'] = True\n        return response, 200\n\n    @staticmethod\n    def get_lecture_oar(session, semester, course_code, department_code, email):\n        response = {}\n\n        try:\n            admin = Admin.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not admin:\n            response['success'] = False\n            response['message'] = 'Admin Not Found'\n            return response, 404\n\n        # Find course and department\n        try:\n            course = Course.query.filter_by(code=course_code).first()\n            department = Department.query.filter_by(code=department_code).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not course or not department:\n            response['success'] = False\n            response['message'] = 'Invalid department or course'\n            return response, 404\n\n        # Perform formatting to check if table with provided session and semester exists\n        formatted_session = session.lstrip('20')[0] + session.lstrip('20')[1]\n        table_to_search = f'STUDENT_LECTURES_{semester.upper()}_{formatted_session}'\n        table_name = select_table_name(table_to_search)\n\n        if table_name is None:\n            response['success'] = False\n            response['message'] = 'Invalid session or semester selected'\n            return response, 404\n\n        # Perform query and fetch students\n        try:\n            # Get lecturer total lecture count for course\n            lecturer_table_to_search = f'LECTURER_LECTURES_{semester.upper()}_{formatted_session}'\n            lecturer_lectures_table_name = select_table_name(lecturer_table_to_search)\n            sql = f'''\n                SELECT count\n                FROM {lecturer_lectures_table_name}\n                WHERE course_id = {course.id}\n                LIMIT 1\n            '''\n            result = db.session.execute(sql)\n            record = result.fetchone()\n            # print(result.fetchone())\n            if not record:\n                response['success'] = False\n                response['message'] = 'No lecture has been taken for this class this session/semester'\n                return response, 403\n\n            lecturer_lecture_count = record[0]\n            sql_count = ' '\n            for day_count in range(lecturer_lecture_count):\n                sql_count += f'day{day_count + 1}, '\n            # print(lecturer_lecture_count)\n            # print(sql_count)\n\n            # Get student details\n            sql = f'''\n                SELECT firstname, lastname, othername, reg_no, {sql_count} count\n                FROM students\n                INNER JOIN {table_name} ON {table_name}.student_id = students.id\n                WHERE students.department_id = {department.id}\n                AND {table_name}.course_id = {course.id}\n            '''\n            result = db.session.execute(sql)\n            Student = namedtuple('Student', result.keys())\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        response['data'] = {'students': [], 'lecturer_count': lecturer_lecture_count}\n        for record in result.fetchall():\n            # print(record)\n            student = Student(*record)\n            # print(student)\n            data = {}\n            data['firstname'] = student.firstname\n            data['lastname'] = student.lastname\n            data['othername'] = student.othername\n            data['reg_no'] = student.reg_no\n            for day_count in range(lecturer_lecture_count):\n                data[f'day{day_count + 1}'] = record[day_count + 4]\n            data['count'] = student.count\n            response['data']['students'].append(data)\n\n        response['success'] = True\n        return response, 200\n\n    @staticmethod\n    def get_mastersheet(session, semester, level, department_code, email):\n        response = {}\n\n        try:\n            admin = Admin.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not admin:\n            response['success'] = False\n            response['message'] = 'Admin Not Found'\n            return response, 404\n\n        # Find level and department\n        try:\n            department = Department.query.filter_by(code=department_code).first()\n            level = Level.query.filter_by(level=level).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not level or not department:\n            response['success'] = False\n            response['message'] = 'Invalid department or level'\n            return response, 404\n\n        try:\n            students = Student.query.filter_by(department=department, level=level).all()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not students:\n            response['success'] = False\n            response['message'] = 'Student Not Found'\n            return response, 404\n\n        # Perform formatting to check if table with provided session and semester exists\n        formatted_session = session.lstrip('20')[0] + session.lstrip('20')[1]\n        table_to_search = f'STUDENT_LECTURES_{semester.upper()}_{formatted_session}'\n        table_name = select_table_name(table_to_search)\n\n        if table_name is None:\n            response['success'] = False\n            response['message'] = 'Invalid session or semester selected'\n            return response, 404\n\n        # Get json serialized data object\n        students_data = [student.to_dict for student in students]\n        try:\n            for index, student in enumerate(students):\n                # add registered column attribute\n                students_data[index]['registered_courses'] = []\n\n                # Append json serialized registered courses and count to each student data object\n                for registered_course in student.registered_courses.all():\n                    sql = f'''\n                        SELECT count\n                        FROM {table_name}\n                        WHERE {table_name}.student_id = {student.id}\n                        AND {table_name}.course_id = {registered_course.id}\n                        LIMIT 1\n                    '''\n                    result = db.session.execute(sql)\n                    record = result.fetchone()\n                    count = record[0] if record is not None else 0\n                    students_data[index]['registered_courses'].append({f'{registered_course.code}': count})\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['data'] = students_data\n        return response, 200\n", "auth_service.py": "from functools import wraps\nfrom datetime import datetime, timedelta\n\nimport jwt\nfrom flask import request\n\nfrom api import db, AppException\nfrom api.model import Student, RevokedToken, Lecturer, HOD, Admin\nfrom config import jwt_key\n\nclass AuthService():\n    @staticmethod\n    def login_student(data):\n        response = {}\n        reg_no = data['reg_no']\n        password = data['password']\n        #TODO: \u0432\u0435\u0437\u0434\u0435: \u043a\u043e\u0434\u044b \u043e\u0448\u0438\u0431\u043e\u043a \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\u0445,\n        # \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u0432 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b\n        try:\n            student = Student.query.filter_by(reg_no=reg_no).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not student:\n            response['success'] = False\n            response['message'] = 'Invalid reg number or password'\n            return response, 401\n\n        if not student.verify_password(password):\n            response['success'] = False\n            response['message'] = 'Invalid reg number or password'\n            return response, 401\n\n        encode_data = {\n            'reg_no': student.reg_no,\n            'student': True,\n            'entity': 'student'\n        }\n        token = encode_auth_token(data=encode_data, expiry=datetime.utcnow() + timedelta(days=1))\n\n        if not isinstance(token, bytes):\n            response['success'] = False\n            response['message'] = token\n            return response, 500\n\n        response['success'] = True\n        response['message'] = 'Logged in successfully'\n        response['x-auth-token'] = token.decode()\n        return response, 200\n\n    @staticmethod\n    def logout_student(auth_token):\n        response = {}\n        decoded_payload = decode_auth_token(auth_token=auth_token)\n\n        # Error decoding error\n        if isinstance(decoded_payload, str):\n            response['success'] = False\n            response['message'] = decoded_payload\n            return response, 401\n\n        # Ensure this method logs out only students\n        if decoded_payload.get('reg_no') is None:\n            response['success'] = True\n            response['message'] = 'Unathorized to perform action'\n            return response, 403\n\n        # Check revoked token\n        try:\n            if RevokedToken.check(token=auth_token):\n                response['success'] = False\n                response['message'] = 'Revoked token. Please log in again'\n                return response, 403\n        except Exception:\n            raise AppException('Internal Server Error. Revoke check Error', 500)\n\n        # Mark token as revoked and logout student\n        try:\n            RevokedToken(token=auth_token).save()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Logged out successfully'\n        return response, 200\n\n    @staticmethod\n    def login_lecturer(data):\n        response = {}\n        email = data['email']\n        password = data['password']\n\n        try:\n            lecturer = Lecturer.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not lecturer:\n            response['success'] = False\n            response['message'] = 'Invalid email or password'\n            return response, 401\n\n        if not lecturer.verify_password(password):\n            response['success'] = False\n            response['message'] = 'Invalid email or password'\n            return response, 401\n\n        encode_data = {\n            'email': lecturer.email,\n            'lecturer': True,\n            'entity': 'lecturer'\n        }\n        token = encode_auth_token(data=encode_data, expiry=datetime.utcnow() + timedelta(days=1))\n\n        if not isinstance(token, bytes):\n            response['success'] = False\n            response['message'] = token\n            return response, 500\n\n        response['success'] = True\n        response['message'] = 'Logged in successfully'\n        response['x-auth-token'] = token.decode()\n        return response, 200\n\n    @staticmethod\n    def logout_lecturer(auth_token):\n        response = {}\n        decoded_payload = decode_auth_token(auth_token=auth_token)\n\n        # Error decoding error\n        if isinstance(decoded_payload, str):\n            response['success'] = False\n            response['message'] = decoded_payload\n            return response, 401\n\n        # Ensure this method logs out only lecturers\n        if decoded_payload.get('lecturer') is None:\n            response['success'] = True\n            response['message'] = 'Unathorized to perform action'\n            return response, 403\n\n        # Check revoked token\n        try:\n            if RevokedToken.check(token=auth_token):\n                response['success'] = False\n                response['message'] = 'Revoked token. Please log in again'\n                return response, 403\n        except Exception:\n            raise AppException('Internal Server Error. Revoke check Error', 500)\n\n        # Mark token as revoked and logout student\n        try:\n            RevokedToken(token=auth_token).save()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Logged out successfully'\n        return response, 200\n\n    @staticmethod\n    def login_hod(data):\n        response = {}\n        email = data['email']\n        password = data['password']\n\n        try:\n            hod = HOD.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not hod:\n            response['success'] = False\n            response['message'] = 'Invalid email or password'\n            return response, 401\n\n        if not hod.verify_password(password):\n            response['success'] = False\n            response['message'] = 'Invalid email or password'\n            return response, 401\n\n        encode_data = {\n            'email': hod.email,\n            'hod': True,\n            'entity': 'hod'\n        }\n        token = encode_auth_token(data=encode_data, expiry=datetime.utcnow() + timedelta(days=1))\n\n        if not isinstance(token, bytes):\n            response['success'] = False\n            response['message'] = token\n            return response, 500\n\n        response['success'] = True\n        response['message'] = 'Logged in successfully'\n        response['x-auth-token'] = token.decode()\n        return response, 200\n\n    @staticmethod\n    def logout_hod(auth_token):\n        response = {}\n        decoded_payload = decode_auth_token(auth_token=auth_token)\n\n        # Error decoding error\n        if isinstance(decoded_payload, str):\n            response['success'] = False\n            response['message'] = decoded_payload\n            return response, 401\n\n        # Ensure this method logs out only hods\n        if decoded_payload.get('hod') is None:\n            response['success'] = True\n            response['message'] = 'Unathorized to perform action'\n            return response, 403\n\n        # Check revoked token\n        try:\n            if RevokedToken.check(token=auth_token):\n                response['success'] = False\n                response['message'] = 'Revoked token. Please log in again'\n                return response, 403\n        except Exception:\n            raise AppException('Internal Server Error. Revoke Check Error', 500)\n\n        # Mark token as revoked and logout student\n        try:\n            RevokedToken(token=auth_token).save()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Logged out successfully'\n        return response, 200\n\n    @staticmethod\n    def login_admin(data):\n        response = {}\n        email = data['email']\n        password = data['password']\n\n        try:\n            admin = Admin.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not admin:\n            response['success'] = False\n            response['message'] = 'Invalid email or password'\n            return response, 401\n\n        if not admin.verify_password(password):\n            response['success'] = False\n            response['message'] = 'Invalid email or password'\n            return response, 401\n\n        encode_data = {\n            'email': admin.email,\n            'admin': True,\n            'entity': 'admin'\n        }\n        token = encode_auth_token(data=encode_data, expiry=datetime.utcnow() + timedelta(days=1))\n\n        if not isinstance(token, bytes):\n            response['success'] = False\n            response['message'] = token\n            return response, 500\n\n        response['success'] = True\n        response['message'] = 'Logged in successfully'\n        response['x-auth-token'] = token.decode()\n        return response, 200\n\n    @staticmethod\n    def logout_admin(auth_token):\n        response = {}\n        decoded_payload = decode_auth_token(auth_token=auth_token)\n\n        # Error decoding error\n        if isinstance(decoded_payload, str):\n            response['success'] = False\n            response['message'] = decoded_payload\n            return response, 401\n\n        # Ensure this method logs out only admins\n        if decoded_payload.get('admin') is None:\n            response['success'] = True\n            response['message'] = 'Unathorized to perform action'\n            return response, 403\n\n        # Check revoked token\n        try:\n            if RevokedToken.check(token=auth_token):\n                response['success'] = False\n                response['message'] = 'Revoked token. Please log in again'\n                return response, 403\n        except Exception:\n            raise AppException('Internal Server Error. Revoke check Error', 500)\n\n        # Mark token as revoked and logout student\n        try:\n            RevokedToken(token=auth_token).save()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Logged out successfully'\n        return response, 200\n\n    @staticmethod\n    def verify(auth_token):\n        response = {}\n        decoded_payload = decode_auth_token(auth_token=auth_token)\n\n        if isinstance(decoded_payload, str):\n            response['success'] = False\n            response['message'] = decoded_payload\n            return response, 401\n\n        try:\n            if RevokedToken.check(token=auth_token):\n                response['success'] = False\n                response['message'] = 'Token revoked'\n                return response, 403\n        except Exception:\n            raise AppException('Internal Server Error. Revoke Check Error', 500)\n\n        response['success'] = True\n        response['entity'] = decoded_payload['entity']\n        return response, 200\n\n\n#####################################################################################\n############### Helper methods for encoding and decoding auth tokens ################\n#####################################################################################\n\ndef encode_auth_token(data=None, expiry=datetime.utcnow() + timedelta(days=1)):\n    if data is None:\n        return 'Invalid \"sub\"[subscriber] passed'\n    try:\n        payload = {\n            'sub': data,\n            'exp': expiry,\n            'iat': datetime.utcnow()\n        }\n        return jwt.encode(payload, jwt_key, algorithm='HS256')\n    except Exception as e:\n        return repr(e)\n\ndef decode_auth_token(auth_token=None):\n    try:\n        payload = jwt.decode(auth_token, jwt_key)\n        return payload['sub']\n    except jwt.ExpiredSignatureError:\n        return 'Expired token. Please log in again'\n    except jwt.InvalidTokenError:\n        return 'Invalid token. Please log in again'\n\n#####################################################################################\n#####################################################################################\n\n\n########################################################\n############ Decorators for Authentication #############\n########################################################\n\ndef student_login_required(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        response = {}\n        auth_token = request.headers.get('x-auth-token')\n        if not auth_token or auth_token is None:\n            response = {\n                'success': False,\n                'message': 'Please provide a token'\n            }\n            return response, 401\n\n        decoded_payload = decode_auth_token(auth_token=auth_token)\n\n        # Error decoding token\n        if isinstance(decoded_payload, str):\n            response['success'] = False\n            response['message'] = decoded_payload\n            return response, 401\n\n        # Check revoked token\n        try:\n            if RevokedToken.check(token=auth_token):\n                response['success'] = False\n                response['message'] = 'Revoked token. Please log in again'\n                return response, 403\n        except Exception:\n            raise AppException('Internal Server Error. Revoke Check Error', 500)\n\n        return func(*args, **kwargs, decoded_payload=decoded_payload)\n    return wrapper\n\ndef lecturer_login_required(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        response = {}\n        auth_token = request.headers.get('x-auth-token')\n        if not auth_token or auth_token is None:\n            response = {\n                'success': False,\n                'message': 'Please provide a token'\n            }\n            return response, 401\n\n        decoded_payload = decode_auth_token(auth_token=auth_token)\n\n        # Error decoding token\n        if isinstance(decoded_payload, str):\n            response['success'] = False\n            response['message'] = decoded_payload\n            return response, 401\n\n        # Check revoked token\n        try:\n            if RevokedToken.check(token=auth_token):\n                response['success'] = False\n                response['message'] = 'Revoked token. Please log in again'\n                return response, 403\n        except Exception:\n            raise AppException('Internal Server Error. Revoke Check Error', 500)\n\n        return func(*args, **kwargs, decoded_payload=decoded_payload)\n    return wrapper\n\ndef hod_login_required(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        response = {}\n        auth_token = request.headers.get('x-auth-token')\n        if not auth_token or auth_token is None:\n            response = {\n                'success': False,\n                'message': 'Please provide a token'\n            }\n            return response, 401\n\n        decoded_payload = decode_auth_token(auth_token=auth_token)\n\n        # Error decoding token\n        if isinstance(decoded_payload, str):\n            response['success'] = False\n            response['message'] = decoded_payload\n            return response, 401\n\n        # Check revoked token\n        try:\n            if RevokedToken.check(token=auth_token):\n                response['success'] = False\n                response['message'] = 'Revoked token. Please log in again'\n                return response, 403\n        except Exception:\n            raise AppException('Internal Server Error. Revoke Check Error', 500)\n\n        return func(*args, **kwargs, decoded_payload=decoded_payload)\n    return wrapper\n\ndef admin_login_required(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        response = {}\n        auth_token = request.headers.get('x-auth-token')\n        if not auth_token or auth_token is None:\n            response = {\n                'success': False,\n                'message': 'Please provide a token'\n            }\n            return response, 401\n\n        decoded_payload = decode_auth_token(auth_token=auth_token)\n\n        # Error decoding token\n        if isinstance(decoded_payload, str):\n            response['success'] = False\n            response['message'] = decoded_payload\n            return response, 401\n\n        # Check revoked token\n        try:\n            if RevokedToken.check(token=auth_token):\n                response['success'] = False\n                response['message'] = 'Revoked token. Please log in again'\n                return response, 403\n        except Exception:\n            raise AppException('Internal Server Error. Revoke Check Error', 500)\n\n        return func(*args, **kwargs, decoded_payload=decoded_payload)\n    return wrapper\n\n########################################################\n########################################################\n", "courses_service.py": "from api import AppException\nfrom api.model import Course, Department, Level\n\nclass CourseService:\n    @staticmethod\n    def get_all_courses():\n        response = {}\n        try:\n            courses = Course.query.all()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not courses:\n            response['success'] = False\n            response['message'] = 'No courses found'\n            return response, 404\n        \n        response['success'] = True\n        response['data'] = [course.to_dict for course in courses]\n        return response, 200\n\n    @staticmethod\n    def get_courses_by_dept_level(department, level, minimal):\n        response = {}\n        try:\n            department_ = Department.query.filter_by(code=department).first()\n            level_ = Level.query.filter_by(level=level).first()\n            courses = Course.query.filter_by(department=department_, level=level_).all()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not courses:\n            response['success'] = False\n            response['message'] = f'No courses found for \"{department}\" department in \"{level}\" level'\n            return response, 404\n\n        response['success'] = True\n        if minimal:\n            response['data'] = [course.code for course in courses]\n        else:\n            response['data'] = [course.to_dict for course in courses]\n        return response, 200\n", "departments_service.py": "from api import AppException\nfrom api.model import Department\n\nclass DepartmentService:\n    @staticmethod\n    def get_all():\n        response = {}\n        try:\n            departments = Department.query.order_by(Department.code).all()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not departments:\n            response['success'] = False\n            response['message'] = 'Departments Not Found'\n            return response, 404\n\n        response['success'] = True\n        response['data'] = [department.to_dict for department in departments]\n        return response, 200\n", "hods_service.py": "from api import db, AppException\nfrom api.model import HOD, Lecturer, Course, Department\n\nclass HODService:\n    @staticmethod\n    def create_hod(data):\n        response = {}\n        name = data['name']\n        email = data['email']\n        department_code = data['department']\n        password = data['password']\n\n        try:\n            dept = Department.query.filter_by(code=department_code).first()\n            if dept and HOD.query.filter_by(department=dept).count() > 0:\n                response['success'] = False\n                response['message'] = f'HOD for {dept.name} has already been signed up'\n                return response, 423\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        try:\n            hod = HOD(\n                name=name,\n                email=email,\n                department_code=department_code,\n                password=password\n            )\n            hod.save()\n            db.session.refresh(hod)\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'New HOD registered successsfully'\n        return response, 201\n\n    @staticmethod\n    def get_me(email):\n        response = {}\n        try:\n            hod = HOD.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not hod:\n            response['success'] = False\n            response['message'] = 'HOD Not Found'\n            return response, 404\n\n        response['success'] = True\n        response['data'] = hod.to_dict\n        return response, 200\n\n    @staticmethod\n    def edit_me(email, data):\n        response = {}\n        try:\n            hod = HOD.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not hod:\n            response['success'] = False\n            response['message'] = 'HOD not found'\n            return response, 404\n\n        try:\n            hod.name = data['name']\n            if data['password'] != '':\n                hod.password = data['password']\n            hod.save()\n            db.session.refresh(hod)\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Details updated successfully'\n        return response, 200\n\n    @staticmethod\n    def get_lecturers(email):\n        response = {}\n        try:\n            hod = HOD.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not hod:\n            response['success'] = False\n            response['message'] = 'HOD not found'\n            return response, 404\n\n        response['success'] = True\n        response['data'] = [lecturer.to_dict for lecturer in hod.department.lecturers]\n        return response, 200\n\n    @staticmethod\n    def get_courses(email, semester):\n        response = {}\n        try:\n            hod = HOD.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not hod:\n            response['success'] = False\n            response['message'] = 'HOD not found'\n            return response, 404\n\n        # Filter courses in department by semester\n        courses = list(filter(lambda c: c.semester.semester == semester, hod.department.courses))\n\n        response['success'] = True\n        response['data'] = [course.to_dict for course in courses]\n        return response, 200\n\n    @staticmethod\n    def assign_courses(email, data):\n        response = {}\n        try:\n            hod = HOD.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not hod:\n            response['success'] = False\n            response['message'] = 'HOD not found'\n            return response, 404\n\n        # if hod.has_assigned_courses:\n        #     response['success'] = False\n        #     response['message'] = 'Unable to assign courses more than once. Contact Admin'\n        #     return response, 423\n\n        try:\n            for datum in data:\n                lecturer_email = datum['email']\n                course_codes = datum['courses']\n                lecturer = Lecturer.query.filter_by(email=lecturer_email).first()\n                for course_code in course_codes:\n                    course = Course.query.filter_by(code=course_code).first()\n                    lecturer.assign_course(course)\n                db.session.commit()\n                db.session.refresh(lecturer)\n                # hod.has_assigned_courses = True\n                # hod.save()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Courses assigned successfully'\n        return response, 200\n\n    @staticmethod\n    def get_assigned(email, semester):\n        response = {}\n        try:\n            hod = HOD.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not hod:\n            response['success'] = False\n            response['message'] = 'HOD not found'\n            return response, 404\n\n        # Filter courses in department by semester\n        courses = list(filter(lambda c: c.semester.semester == semester, hod.department.courses))\n        assigned_courses = [{\n            'course': course.to_dict,\n            'lecturers': [lecturer.to_dict for lecturer in course.lecturers_assigned.all()]\n        } for course in courses]\n\n        response['success'] = False\n        response['data'] = assigned_courses\n        return response, 200\n", "lecturers_service.py": "from api import db, AppException\nfrom api.model import Lecturer, Course\n\nclass LecturerService:\n    # TODO: \u0432\u043e \u0432\u0441\u0435\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u0445 \u0432\u043d\u0435\u0434\u0440\u0438\u0442\u044c \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435\u043c (\u0411\u0414)\n    @staticmethod\n    def create_lecturer(data):\n        response = {}\n        name = data['name']\n        email = data['email']\n        department_code = data['department']\n        password = data['password']\n\n        try:\n            lecturer = Lecturer(\n                name=name,\n                email=email,\n                department_code=department_code,\n                password=password\n            )\n            lecturer.save()\n            db.session.refresh(lecturer)\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'New Lecturer registered successsfully'\n        return response, 201\n\n    @staticmethod\n    def get_me(email):\n        response = {}\n        try:\n            #TODO: \u0432\u0441\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0411\u0414 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438\n            lecturer = Lecturer.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not lecturer:\n            response['success'] = False\n            response['message'] = 'Lecturer Not Found'\n            return response, 404\n\n        data = {\n            **lecturer.to_dict,\n            'assigned_courses': [course.to_dict for course in lecturer.assigned_courses.all()]\n        }\n        response['success'] = True\n        response['data'] = data\n        return response, 200\n\n    @staticmethod\n    def mark_lecture_attendance(email, course_code):\n        response = {}\n        try:\n            lecturer = Lecturer.query.filter_by(email=email).first()\n            course = Course.query.filter_by(code=course_code).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not lecturer:\n            response['success'] = False\n            response['message'] = 'Lecturer Not Found'\n            return response, 404\n\n        if not course:\n            response['success'] = False\n            response['message'] = 'Course Not Found'\n            return response, 404\n\n        if not lecturer.is_assigned(course):\n            response['success'] = False\n            response['message'] = 'Lecturer is not assigned to this course'\n            return response, 403\n\n        try:\n            lecturer.attend_lecture(course)\n            db.session.commit()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Attendance taken for lecturer'\n        return response, 200\n", "schools_service.py": "from api import AppException\nfrom api.model import School\n\nclass SchoolService:\n    @staticmethod\n    def get_all():\n        response = {}\n        try:\n            schools = School.query.order_by(School.code).all()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not schools:\n            response['success'] = False\n            response['message'] = 'Schools Not Found'\n            return response, 404\n\n        response['success'] = True\n        response['data'] = [school.code for school in schools]\n        return response, 200\n\n    @staticmethod\n    def get_departments(school_code):\n        response = {}\n        try:\n            school = School.query.filter_by(code=school_code).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not school:\n            response['success'] = False\n            response['message'] = 'School Not Found'\n            return response, 404\n\n        departments = school.departments\n        if not departments:\n            response['success'] = False\n            response['message'] = f'No Departments Not Found for this {school_code}'\n            return response, 404\n\n        response['success'] = True\n        response['data'] = [dept.code for dept in departments]\n        return response, 200\n", "students_service.py": "from api import db, AppException\nfrom api.model import Student, Department, Level, Course, Lecturer\n\n\nclass StudentService():\n    @staticmethod\n    def get_all_students():\n        response = {}\n        try:\n            students = Student.query.all()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not students:\n            response['success'] = False\n            response['message'] = 'Students Not Found'\n            return response, 404\n\n        response['success'] = True\n        response['data'] = [student.to_dict for student in students]\n        return response, 200\n\n    @staticmethod\n    def create_student(data=None):\n        response = {}\n        try:\n            student = Student(**data)\n            student.save()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'New student successfully registered'\n        return response, 201\n\n    @staticmethod\n    def get_me(reg_no):\n        response = {}\n        try:\n            student = Student.query.filter_by(reg_no=reg_no).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not student:\n            response['success'] = False\n            response['message'] = 'Student Not Found'\n            return response, 404\n\n        response['success'] = True\n        response['data'] = student.to_dict\n        return response, 200\n\n    @staticmethod\n    def edit_me(reg_no, data):\n        response = {}\n        level = data['level']\n        department = data['department']\n        try:\n            student = Student.query.filter_by(reg_no=reg_no).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not student:\n            response['success'] = False\n            response['message'] = 'Student Not Found'\n            return response, 404\n\n        if student.reg_complete:\n            response['success'] = False\n            response['message'] = \"You cannot update your details anymore. Contact Admin\"\n            return response, 423\n\n        try:\n            student.level = Level.query.filter_by(level=level).first()\n            student.department = Department.query.filter_by(code=department).first()\n            student.reg_complete = True\n            student.save()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Details updated successfully'\n        return response, 200\n\n    @staticmethod\n    def get_me_courses(reg_no, semester):\n        response = {}\n        try:\n            student = Student.query.filter_by(reg_no=reg_no).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not student:\n            response['success'] = False\n            response['message'] = 'Student Not Found'\n            return response, 404\n\n        # Select courses based on student's level and current semester\n        # If and only if student has completed registration\n        if not student.reg_complete or not student.fingerprint_template:\n            response['success'] = False\n            response['message'] = 'Student registration is incomplete and thus can not access courses'\n            return response, 423\n\n        try:\n            courses = list(filter(\n                lambda c: c.semester.semester == semester and c.level.level == student.level.level,\n                student.department.courses))\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n\n        response['success'] = True\n        response['data'] = [course.to_dict for course in courses]\n        return response, 200\n\n    @staticmethod\n    def register_courses(reg_no, data):\n        response = {}\n        try:\n            student = Student.query.filter_by(reg_no=reg_no).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not student:\n            response['success'] = False\n            response['message'] = 'Student Not Found'\n            return response, 404\n\n        if not student.reg_complete or not student.fingerprint_template:\n            response['success'] = False\n            response['message'] = 'You must complete your registration and thumbprint before registering your courses'\n            return response, 423\n\n        if student.has_registered_course:\n            response['success'] = False\n            response['message'] = 'Registration can only be done once. Contact Admin'\n            return response, 423\n\n        try:\n            course_codes = data['courses']\n            for course_code in course_codes:\n                course = Course.query.filter_by(code=course_code).first()\n                student.register_course(course)\n            db.session.commit()\n            student.has_registered_course = True\n            student.save()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Courses registered successfully'\n        return response, 200\n\n    @staticmethod\n    def get_registered_courses(reg_no):\n        response = {}\n        try:\n            student = Student.query.filter_by(reg_no=reg_no).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not student:\n            response['success'] = False\n            response['message'] = 'Student Not Found'\n            return response, 404\n\n        response['success'] = True\n        response['data'] = [course.to_dict for course in student.registered_courses.all()]\n        return response, 200\n\n    @staticmethod\n    def register_fingerprint(reg_no, data):\n        response = {}\n        try:\n            student = Student.query.filter_by(reg_no=reg_no).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not student:\n            response['success'] = False\n            response['message'] = 'Student Not Found'\n            return response, 404\n\n        if student.fingerprint_template:\n            response['success'] = False\n            response['message'] = 'Fingerprint registration can only be done once. Contact Admin'\n            return response, 423\n\n        try:\n            student.fingerprint_template = data['template']\n            student.save()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Fingerprint registered successfully'\n        return response, 200\n\n    @staticmethod\n    def verify_registered_courses(reg_no, course_code):\n        response = {}\n        try:\n            student = Student.query.filter_by(reg_no=reg_no).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not student:\n            response['success'] = False\n            response['message'] = 'Student Not Found'\n            return response, 404\n\n        try:\n            registered_course = student.registered_courses.filter_by(code=course_code).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not registered_course:\n            response['success'] = False\n            response['message'] = 'Student has not registered for this course'\n            return response, 200\n\n        response['success'] = True\n        response['message'] = 'Student has registered for this course'\n        return response, 200\n\n    @staticmethod\n    def get_registered_students(course_code, department_code):\n        response = {}\n        try:\n            registered_students = Course.query.filter_by(code=course_code).first().students_registered\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not registered_students:\n            response['success'] = False\n            response['message'] = f'No student is registered for {course_code}'\n            return response, 404\n\n        try:\n            department = Department.query.filter_by(code=department_code).first()\n            students_by_dept = registered_students.filter_by(department=department).all()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not students_by_dept:\n            response['success'] = False\n            response['message'] = f'No student from {department_code.upper()} is registered for {course_code}'\n            return response, 404\n\n        response['success'] = True\n        response['message'] = 'Students fetched successfully'\n        response['data'] = [{\n            'id': id + 1,\n            'reg_no': student.reg_no,\n            'name': f'{student.firstname} {student.lastname}',\n            'template': student.fingerprint_template\n        } for id, student in enumerate(students_by_dept)]\n        return response, 200\n\n    @staticmethod\n    def take_exam_attendance(reg_no, course_code):\n        response = {}\n        try:\n            student = Student.query.filter_by(reg_no=reg_no).first()\n            course = Course.query.filter_by(code=course_code).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not student:\n            response['success'] = False\n            response['message'] = 'Student not found'\n            return response, 404\n\n        if not course:\n            response['success'] = False\n            response['message'] = 'Course not found'\n            return response, 404\n\n        if not student.is_registered(course):\n            response['success'] = False\n            response['message'] = 'Student is not registered for this course'\n            return response, 403\n\n        if student.exam_attendance_taken(course):\n            response['success'] = False\n            response['message'] = 'Student has already taken exam attendance for this course'\n            return response, 403\n\n        try:\n            student.take_exam_attendance(course)\n            db.session.commit()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Attendance taken'\n        return response, 200\n\n    @staticmethod\n    def take_lecture_attendance(reg_no, course_code, lecturer_id):\n        response = {}\n        try:\n            student = Student.query.filter_by(reg_no=reg_no).first()\n            course = Course.query.filter_by(code=course_code).first()\n            lecturer = Lecturer.query.filter_by(id=lecturer_id).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not student:\n            response['success'] = False\n            response['message'] = 'Student not found'\n            return response, 404\n\n        if not course:\n            response['success'] = False\n            response['message'] = 'Course not found'\n            return response, 404\n\n        if not lecturer:\n            response['success'] = False\n            response['message'] = 'Lecturer not found'\n            return response, 404\n\n        if not student.is_registered(course):\n            response['success'] = False\n            response['message'] = 'Student is not registered for this course'\n            return response, 403\n\n        try:\n            student.attend_lecture(course, lecturer)\n            db.session.commit()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Attendance taken'\n        return response, 200\n", "config.py": "import unittest\nimport os\n\nfrom flask import Flask\nfrom flask_testing import TestCase\nfrom config import config_by_env, basedir\n\nfrom api import db\n\napp = Flask(__name__)\n\n\nclass TestConfigTestCase(TestCase):\n    def create_app(self):\n        app.config.from_object(config_by_env['test'])\n        return app\n\n    def test_test_config(self):\n        self.assertEqual(app.config['SQLALCHEMY_DATABASE_URI'], f'sqlite3://{os.path.join(basedir, \"test.db\")}')\n        self.assertTrue(app.config['TESTING'])\n        self.assertTrue(app.config['FLASK_DEBUG'])\n\n\nclass DevelopmentConfigTestCase(TestCase):\n    def create_app(self):\n        app.config.from_object(config_by_env['dev'])\n        app.config['DB_USER'] = os.environ.get('DB_USER')\n        app.config['DB_PASS'] = os.environ.get('DB_PASS')\n        app.config['DB_NAME'] = os.environ.get('DB_NAME')\n        return app\n\n    def test_development_config(self):\n        db_user = app.config['DB_USER']\n        db_pass = app.config['DB_PASS']\n        db_name = app.config['DB_NAME']\n        self.assertEqual(app.config['SQLALCHEMY_DATABASE_URI'], f'mysql+pymysql://{db_user}:{db_pass}@localhost:3306/{db_name}')\n        self.assertTrue(app.config['FLASK_DEBUG'])\n\n\nclass ProductiontConfigTestCase(TestCase):\n    def create_app(self):\n        app.config.from_object(config_by_env['prod'])\n        return app\n\n    def test_production_config(self):\n        self.assertFalse(app.config['FLASK_DEBUG'])\n\nif __name__ == \"__main__\":\n    unittest.main()\n", "deployments": {}, "nginx": {}, "fyproject.dev": "server {\n    listen 80;\n    server_name _;\n\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_redirect off;\n    }\n\n}\n", "fyproject.prod": "server {\n    listen 80;\n    server_name _; \n    location / {\n        # redirect any requests to the same URL but on https\n        return 301 https://$host$request_uri;\n    }\n}\nserver {\n    listen 443 ssl;\n    server_name _;\n\n    ssl_certificate \n    ssl_certificate_key \n\n    access_log /var/log/fyproject_access.log;\n    error_log /var/log/fyproject_error.log;\n\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n\n    location / {\n        proxy_pass http://localhost:8000;\n        proxy_redirect off;\n    }\n\n}\n", "supervisor": {}, "fyproject.conf": "[program:fyproject-api]\ncommand=/home/{$USER}/.local/share/virtualenvs/{VENV_PATH}/bin/gunicorn -b localhost:8000 -w 3 run_api:app\ndirectory=/home/{$USER}/fyproject-api\n\nuser={$USER}\n\nautostart=true\nautorestart=true\nstopasgroup=true\nkillasgroup=true\n\nstdout_logfile=/home/{$USER}/fyproject-api/logs/supervisor.log\nstderr_logfile=/home/{$USER}/fyproject-api/logs/supervisor.err.log\n", "logger.py": "import os\nimport logging\nfrom logging.handlers import RotatingFileHandler\n\n# Disable flask's default logger\nwerkzeug_logger = logging.getLogger('werkzeug')\nwerkzeug_logger.disabled = True\n\n\n# Setup application logging\nif not os.path.exists('logs'):\n    os.mkdir('logs')\n\n\n# Replace default logger\nstream_logger = logging.getLogger('stream')\nstream_logger.setLevel(logging.DEBUG)\nstream_handler = logging.StreamHandler()\nstream_handler.setFormatter(logging.Formatter(\n    '[%(asctime)s] - %(message)s'))\nstream_logger.addHandler(stream_handler)\n\n\n# To log application errors and exceptions\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.ERROR)\nfile_handler = RotatingFileHandler(\n    'logs/api.log', maxBytes=1048576, backupCount=10)\nfile_handler.setFormatter(logging.Formatter(\n    '[%(asctime)s] %(levelname)s: %(message)s - [%(pathname)s:%(lineno)s]'))\nlogger.addHandler(file_handler)\n\n\n# To log request only after every request\nrequest_logger = logging.getLogger('request_logger')\nrequest_logger.setLevel(logging.INFO)\nrequest_handler = RotatingFileHandler(\n    'logs/request.log', maxBytes=1048576, backupCount=5)\nrequest_handler.setFormatter(logging.Formatter('[%(asctime)s] - %(message)s'))\nrequest_logger.addHandler(request_handler)\n", "migrations": {}, "alembic.ini": "# A generic, single database configuration.\n\n[alembic]\n# template used to generate migration files\n# file_template = %%(rev)s_%%(slug)s\n\n# set to 'true' to run the environment during\n# the 'revision' command, regardless of autogenerate\n# revision_environment = false\n\n\n# Logging configuration\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARN\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel = WARN\nhandlers =\nqualname = sqlalchemy.engine\n\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n", "env.py": "from __future__ import with_statement\n\nimport logging\nfrom logging.config import fileConfig\n\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\n\nfrom alembic import context\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\n\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nfrom flask import current_app\nconfig.set_main_option(\n    'sqlalchemy.url', current_app.config.get(\n        'SQLALCHEMY_DATABASE_URI').replace('%', '%%'))\ntarget_metadata = current_app.extensions['migrate'].db.metadata\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\n\n\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url, target_metadata=target_metadata, literal_binds=True\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):\n            script = directives[0]\n            if script.upgrade_ops.is_empty():\n                directives[:] = []\n                logger.info('No changes in schema detected.')\n\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix='sqlalchemy.',\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection,\n            target_metadata=target_metadata,\n            process_revision_directives=process_revision_directives,\n            **current_app.extensions['migrate'].configure_args\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n", "README": "Generic single-database configuration.", "script.py.mako": "\"\"\"${message}\n\nRevision ID: ${up_revision}\nRevises: ${down_revision | comma,n}\nCreate Date: ${create_date}\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n${imports if imports else \"\"}\n\n# revision identifiers, used by Alembic.\nrevision = ${repr(up_revision)}\ndown_revision = ${repr(down_revision)}\nbranch_labels = ${repr(branch_labels)}\ndepends_on = ${repr(depends_on)}\n\n\ndef upgrade():\n    ${upgrades if upgrades else \"pass\"}\n\n\ndef downgrade():\n    ${downgrades if downgrades else \"pass\"}\n", "versions": {}, "0205bd762564_increase_fingerprint_template_size_in_db.py": "\"\"\"Increase fingerprint template size in db\n\nRevision ID: 0205bd762564\nRevises: 7a44a937f5b7\nCreate Date: 2019-09-19 20:18:12.984658\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\nfrom sqlalchemy.dialects import mysql\n\n# revision identifiers, used by Alembic.\nrevision = '0205bd762564'\ndown_revision = '7a44a937f5b7'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('students', sa.Column('fingerprint', sa.String(length=1112), nullable=True))\n    op.drop_index('ix_students_fingerprint_template', table_name='students')\n    op.create_unique_constraint(None, 'students', ['fingerprint'])\n    op.drop_column('students', 'fingerprint_template')\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('students', sa.Column('fingerprint_template', mysql.VARCHAR(length=1112), nullable=True))\n    op.drop_constraint(None, 'students', type_='unique')\n    op.create_index('ix_students_fingerprint_template', 'students', ['fingerprint_template'], unique=True)\n    op.drop_column('students', 'fingerprint')\n    # ### end Alembic commands ###\n", "0836860af27d_add_reg_complete_column_to_student_model.py": "\"\"\"Add reg_complete column to Student model\n\nRevision ID: 0836860af27d\nRevises: c4b290814f08\nCreate Date: 2019-08-08 12:07:50.558633\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = '0836860af27d'\ndown_revision = 'c4b290814f08'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('students', sa.Column('reg_complete', sa.Boolean(), nullable=True))\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('students', 'reg_complete')\n    # ### end Alembic commands ###\n", "085dfd884e1d_update_cloumn_has_registered_courses_to_.py": "\"\"\"update cloumn has_registered_courses to has_registered_course\n\nRevision ID: 085dfd884e1d\nRevises: b0c9317da81a\nCreate Date: 2019-08-23 16:28:34.379298\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\nfrom sqlalchemy.dialects import mysql\n\n# revision identifiers, used by Alembic.\nrevision = '085dfd884e1d'\ndown_revision = 'b0c9317da81a'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('students', sa.Column('has_registered_course', sa.Boolean(), nullable=True))\n    op.drop_column('students', 'has_registered_courses')\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('students', sa.Column('has_registered_courses', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True))\n    op.drop_column('students', 'has_registered_course')\n    # ### end Alembic commands ###\n", "1ec6f953b614_create_assigned_courses_table_for_.py": "\"\"\"Create assigned courses table for second_18\n\nRevision ID: 1ec6f953b614\nRevises: cf0b68ddc7de\nCreate Date: 2019-08-21 17:18:46.932155\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = '1ec6f953b614'\ndown_revision = 'cf0b68ddc7de'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('assgined_courses_second_2018_2018',\n    sa.Column('lecturer_id', sa.Integer(), nullable=False),\n    sa.Column('course_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),\n    sa.ForeignKeyConstraint(['lecturer_id'], ['lecturers.id'], ),\n    sa.PrimaryKeyConstraint('lecturer_id', 'course_id')\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('assgined_courses_second_2018_2018')\n    # ### end Alembic commands ###\n", "29d7fb08e3ed_create_lecturer_model.py": "\"\"\"Create Lecturer model\n\nRevision ID: 29d7fb08e3ed\nRevises: 41398963f346\nCreate Date: 2019-08-09 10:49:19.003553\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = '29d7fb08e3ed'\ndown_revision = '41398963f346'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('lecturers',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('name', sa.String(length=100), nullable=True),\n    sa.Column('email', sa.String(length=128), nullable=True),\n    sa.Column('department_id', sa.Integer(), nullable=True),\n    sa.Column('password_hash', sa.String(length=128), nullable=True),\n    sa.Column('created_at', sa.DateTime(), nullable=True),\n    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_lecturers_email'), 'lecturers', ['email'], unique=False)\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_lecturers_email'), table_name='lecturers')\n    op.drop_table('lecturers')\n    # ### end Alembic commands ###\n", "3e4649d3af3d_add_has_assigned_courses_to_hod_table.py": "\"\"\"Add has_assigned_courses to hod table\n\nRevision ID: 3e4649d3af3d\nRevises: 085dfd884e1d\nCreate Date: 2019-08-24 12:46:19.631062\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = '3e4649d3af3d'\ndown_revision = '085dfd884e1d'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('hods', sa.Column('has_assigned_courses', sa.Boolean(), nullable=True))\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('hods', 'has_assigned_courses')\n    # ### end Alembic commands ###\n", "41398963f346_create_semester_and_courses_table.py": "\"\"\"Create semester and courses table\n\nRevision ID: 41398963f346\nRevises: 0836860af27d\nCreate Date: 2019-08-08 14:23:08.419666\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = '41398963f346'\ndown_revision = '0836860af27d'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('semesters',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('semester', sa.String(length=7), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('courses',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('title', sa.String(length=100), nullable=True),\n    sa.Column('code', sa.String(length=6), nullable=True),\n    sa.Column('level_id', sa.Integer(), nullable=True),\n    sa.Column('department_id', sa.Integer(), nullable=True),\n    sa.Column('semester_id', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ),\n    sa.ForeignKeyConstraint(['level_id'], ['levels.id'], ),\n    sa.ForeignKeyConstraint(['semester_id'], ['semesters.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('courses')\n    op.drop_table('semesters')\n    # ### end Alembic commands ###\n", "52ef2c763c9d_create_assign_courses_table_second_18.py": "\"\"\"Create assign courses table second_18\n\nRevision ID: 52ef2c763c9d\nRevises: 1ec6f953b614\nCreate Date: 2019-08-22 02:07:28.870448\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\nfrom sqlalchemy.dialects import mysql\n\n# revision identifiers, used by Alembic.\nrevision = '52ef2c763c9d'\ndown_revision = '1ec6f953b614'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('assgined_courses_second_2018_2019',\n    sa.Column('lecturer_id', sa.Integer(), nullable=False),\n    sa.Column('course_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),\n    sa.ForeignKeyConstraint(['lecturer_id'], ['lecturers.id'], ),\n    sa.PrimaryKeyConstraint('lecturer_id', 'course_id')\n    )\n    op.drop_table('assgined_courses_second_2018_2018')\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('assgined_courses_second_2018_2018',\n    sa.Column('lecturer_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),\n    sa.Column('course_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),\n    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], name='assgined_courses_second_2018_2018_ibfk_1'),\n    sa.ForeignKeyConstraint(['lecturer_id'], ['lecturers.id'], name='assgined_courses_second_2018_2018_ibfk_2'),\n    sa.PrimaryKeyConstraint('lecturer_id', 'course_id'),\n    mysql_default_charset='latin1',\n    mysql_engine='InnoDB'\n    )\n    op.drop_table('assgined_courses_second_2018_2019')\n    # ### end Alembic commands ###\n", "5d948e7cfff4_change_fingerprint_table_name.py": "\"\"\"Change fingerprint table name\n\nRevision ID: 5d948e7cfff4\nRevises: 0205bd762564\nCreate Date: 2019-09-19 20:19:13.426355\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\nfrom sqlalchemy.dialects import mysql\n\n# revision identifiers, used by Alembic.\nrevision = '5d948e7cfff4'\ndown_revision = '0205bd762564'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('students', sa.Column('fingerprint_template', sa.String(length=1112), nullable=True))\n    op.drop_index('fingerprint', table_name='students')\n    op.create_unique_constraint(None, 'students', ['fingerprint_template'])\n    op.drop_column('students', 'fingerprint')\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('students', sa.Column('fingerprint', mysql.VARCHAR(length=1112), nullable=True))\n    op.drop_constraint(None, 'students', type_='unique')\n    op.create_index('fingerprint', 'students', ['fingerprint'], unique=True)\n    op.drop_column('students', 'fingerprint_template')\n    # ### end Alembic commands ###\n", "618da61d803b_.py": "\"\"\"empty message\n\nRevision ID: 618da61d803b\nRevises: 922f6d22518b\nCreate Date: 2019-11-07 21:00:10.938615\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = '618da61d803b'\ndown_revision = '922f6d22518b'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('admins',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('name', sa.String(length=128), nullable=True),\n    sa.Column('email', sa.String(length=128), nullable=True),\n    sa.Column('password_hash', sa.String(length=128), nullable=True),\n    sa.Column('created_at', sa.DateTime(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('admins')\n    # ### end Alembic commands ###\n", "7a44a937f5b7_add_units_to_course_model.py": "\"\"\"Add units to course model\n\nRevision ID: 7a44a937f5b7\nRevises: 3e4649d3af3d\nCreate Date: 2019-09-09 14:14:18.670495\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = '7a44a937f5b7'\ndown_revision = '3e4649d3af3d'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('courses', sa.Column('units', sa.Integer(), nullable=True))\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('courses', 'units')\n    # ### end Alembic commands ###\n", "922f6d22518b_.py": "\"\"\"empty message\n\nRevision ID: 922f6d22518b\nRevises: 5d948e7cfff4\nCreate Date: 2019-11-05 23:23:36.616108\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\nfrom sqlalchemy.dialects import mysql\n\n# revision identifiers, used by Alembic.\nrevision = '922f6d22518b'\ndown_revision = '5d948e7cfff4'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('assigned_courses_second_2018_2019',\n    sa.Column('lecturer_id', sa.Integer(), nullable=False),\n    sa.Column('course_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),\n    sa.ForeignKeyConstraint(['lecturer_id'], ['lecturers.id'], ),\n    sa.PrimaryKeyConstraint('lecturer_id', 'course_id')\n    )\n    op.create_table('students_exam_second_2018_2019',\n    sa.Column('student_id', sa.Integer(), nullable=False),\n    sa.Column('course_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),\n    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),\n    sa.PrimaryKeyConstraint('student_id', 'course_id')\n    )\n    op.drop_table('assgined_courses_second_2018_2019')\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('assgined_courses_second_2018_2019',\n    sa.Column('lecturer_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),\n    sa.Column('course_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),\n    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], name='assgined_courses_second_2018_2019_ibfk_1'),\n    sa.ForeignKeyConstraint(['lecturer_id'], ['lecturers.id'], name='assgined_courses_second_2018_2019_ibfk_2'),\n    sa.PrimaryKeyConstraint('lecturer_id', 'course_id'),\n    mysql_default_charset='latin1',\n    mysql_engine='InnoDB'\n    )\n    op.drop_table('students_exam_second_2018_2019')\n    op.drop_table('assigned_courses_second_2018_2019')\n    # ### end Alembic commands ###\n", "b0c9317da81a_create_registered_courses_second_18.py": "\"\"\"create registered courses second 18\n\nRevision ID: b0c9317da81a\nRevises: 52ef2c763c9d\nCreate Date: 2019-08-23 15:20:59.747925\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = 'b0c9317da81a'\ndown_revision = '52ef2c763c9d'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('registered_courses_second_2018_2019',\n    sa.Column('student_id', sa.Integer(), nullable=False),\n    sa.Column('course_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),\n    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),\n    sa.PrimaryKeyConstraint('student_id', 'course_id')\n    )\n    op.add_column('students', sa.Column('has_registered_courses', sa.Boolean(), nullable=True))\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('students', 'has_registered_courses')\n    op.drop_table('registered_courses_second_2018_2019')\n    # ### end Alembic commands ###\n", "b70eec04a993_create_student_level_department_school.py": "\"\"\"Create Student Level Department School\n\nRevision ID: b70eec04a993\nRevises: \nCreate Date: 2019-08-03 01:23:56.251027\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = 'b70eec04a993'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('levels',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('level', sa.String(length=3), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('schools',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('name', sa.String(length=50), nullable=True),\n    sa.Column('code', sa.String(length=4), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('departments',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('name', sa.String(length=50), nullable=True),\n    sa.Column('code', sa.String(length=3), nullable=True),\n    sa.Column('school_id', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['school_id'], ['schools.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('students',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('firstname', sa.String(length=50), nullable=True),\n    sa.Column('lastname', sa.String(length=50), nullable=True),\n    sa.Column('othername', sa.String(length=50), nullable=True),\n    sa.Column('reg_no', sa.String(length=11), nullable=True),\n    sa.Column('email', sa.String(length=128), nullable=True),\n    sa.Column('level_id', sa.Integer(), nullable=True),\n    sa.Column('department_id', sa.Integer(), nullable=True),\n    sa.Column('password_hash', sa.String(length=128), nullable=True),\n    sa.Column('fingerprint_template', sa.String(length=256), nullable=True),\n    sa.Column('graduated', sa.Boolean(), nullable=True),\n    sa.Column('created_at', sa.DateTime(), nullable=True),\n    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ),\n    sa.ForeignKeyConstraint(['level_id'], ['levels.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_students_email'), 'students', ['email'], unique=False)\n    op.create_index(op.f('ix_students_fingerprint_template'), 'students', ['fingerprint_template'], unique=True)\n    op.create_index(op.f('ix_students_reg_no'), 'students', ['reg_no'], unique=True)\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_students_reg_no'), table_name='students')\n    op.drop_index(op.f('ix_students_fingerprint_template'), table_name='students')\n    op.drop_index(op.f('ix_students_email'), table_name='students')\n    op.drop_table('students')\n    op.drop_table('departments')\n    op.drop_table('schools')\n    op.drop_table('levels')\n    # ### end Alembic commands ###\n", "b9906b720ce7_.py": "\"\"\"empty message\n\nRevision ID: b9906b720ce7\nRevises: 618da61d803b\nCreate Date: 2019-11-09 17:51:07.487844\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = 'b9906b720ce7'\ndown_revision = '618da61d803b'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('lecturers_lectures_second_2018_2019',\n    sa.Column('lecturer_id', sa.Integer(), nullable=False),\n    sa.Column('course_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),\n    sa.ForeignKeyConstraint(['lecturer_id'], ['lecturers.id'], ),\n    sa.PrimaryKeyConstraint('lecturer_id', 'course_id')\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('lecturers_lectures_second_2018_2019')\n    # ### end Alembic commands ###\n", "c4b290814f08_create_revoked_tokens_table.py": "\"\"\"Create revoked tokens table\n\nRevision ID: c4b290814f08\nRevises: b70eec04a993\nCreate Date: 2019-08-06 10:27:48.015814\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = 'c4b290814f08'\ndown_revision = 'b70eec04a993'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('revoked_tokens',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('token', sa.String(length=300), nullable=False),\n    sa.Column('revoked_on', sa.DateTime(), nullable=True),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('token')\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('revoked_tokens')\n    # ### end Alembic commands ###\n", "cf0b68ddc7de_create_hod_table.py": "\"\"\"Create Hod table\n\nRevision ID: cf0b68ddc7de\nRevises: 29d7fb08e3ed\nCreate Date: 2019-08-16 13:58:22.190595\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = 'cf0b68ddc7de'\ndown_revision = '29d7fb08e3ed'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('hods',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('name', sa.String(length=100), nullable=True),\n    sa.Column('email', sa.String(length=128), nullable=True),\n    sa.Column('department_id', sa.Integer(), nullable=True),\n    sa.Column('password_hash', sa.String(length=128), nullable=True),\n    sa.Column('created_at', sa.DateTime(), nullable=True),\n    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_hods_email'), 'hods', ['email'], unique=False)\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_hods_email'), table_name='hods')\n    op.drop_table('hods')\n    # ### end Alembic commands ###\n", "e3335baa0147_create_students_lectures_table.py": "\"\"\"create students lectures table\n\nRevision ID: e3335baa0147\nRevises: eee31a5bf1a6\nCreate Date: 2019-11-10 12:54:02.823133\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = 'e3335baa0147'\ndown_revision = 'eee31a5bf1a6'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('students_lectures_second_2018_2019',\n    sa.Column('student_id', sa.Integer(), nullable=False),\n    sa.Column('course_id', sa.Integer(), nullable=False),\n    sa.Column('count', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),\n    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),\n    sa.PrimaryKeyConstraint('student_id', 'course_id')\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('students_lectures_second_2018_2019')\n    # ### end Alembic commands ###\n", "eee31a5bf1a6_.py": "\"\"\"empty message\n\nRevision ID: eee31a5bf1a6\nRevises: b9906b720ce7\nCreate Date: 2019-11-09 17:54:02.008390\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = 'eee31a5bf1a6'\ndown_revision = 'b9906b720ce7'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('lecturers_lectures_second_2018_2019', sa.Column('count', sa.Integer(), nullable=True))\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('lecturers_lectures_second_2018_2019', 'count')\n    # ### end Alembic commands ###\n", "Pipfile": "[[source]]\nname = \"pypi\"\nurl = \"https://pypi.org/simple\"\nverify_ssl = true\n\n[dev-packages]\npylint = \"*\"\nautopep8 = \"*\"\n\n[packages]\nflask = \"*\"\nflask-sqlalchemy = \"*\"\nflask-restplus = \"*\"\nflask-migrate = \"*\"\nflask-testing = \"*\"\npython-dotenv = \"*\"\npyjwt = \"*\"\nmarshmallow = \"*\"\narrow = \"*\"\npymysql = \"*\"\ngunicorn = \"*\"\nflask-mail = \"*\"\n\n[requires]\npython_version = \"3.6\"\n", "Pipfile.lock": "{\n    \"_meta\": {\n        \"hash\": {\n            \"sha256\": \"ac2b334d2717a47dcea2db8ed2d264790d7d61b2893eb603f2df3b14c55b0663\"\n        },\n        \"pipfile-spec\": 6,\n        \"requires\": {\n            \"python_version\": \"3.6\"\n        },\n        \"sources\": [\n            {\n                \"name\": \"pypi\",\n                \"url\": \"https://pypi.org/simple\",\n                \"verify_ssl\": true\n            }\n        ]\n    },\n    \"default\": {\n        \"alembic\": {\n            \"hashes\": [\n                \"sha256:cdb7d98bd5cbf65acd38d70b1c05573c432e6473a82f955cdea541b5c153b0cc\"\n            ],\n            \"version\": \"==1.0.11\"\n        },\n        \"aniso8601\": {\n            \"hashes\": [\n                \"sha256:513d2b6637b7853806ae79ffaca6f3e8754bdd547048f5ccc1420aec4b714f1e\",\n                \"sha256:d10a4bf949f619f719b227ef5386e31f49a2b6d453004b21f02661ccc8670c7b\"\n            ],\n            \"version\": \"==7.0.0\"\n        },\n        \"arrow\": {\n            \"hashes\": [\n                \"sha256:0186026cfd94ca4fb773f30cc5398289a3027480d335e0e5c0d2772643763137\",\n                \"sha256:a12de0124d812d15061ed36c7eb4a421fa1b95026a502a0b2062e9ea00fc4446\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.14.5\"\n        },\n        \"attrs\": {\n            \"hashes\": [\n                \"sha256:69c0dbf2ed392de1cb5ec704444b08a5ef81680a61cb899dc08127123af36a79\",\n                \"sha256:f0b870f674851ecbfbbbd364d6b5cbdff9dcedbc7f3f5e18a6891057f21fe399\"\n            ],\n            \"version\": \"==19.1.0\"\n        },\n        \"blinker\": {\n            \"hashes\": [\n                \"sha256:471aee25f3992bd325afa3772f1063dbdbbca947a041b8b89466dc00d606f8b6\"\n            ],\n            \"version\": \"==1.4\"\n        },\n        \"click\": {\n            \"hashes\": [\n                \"sha256:2335065e6395b9e67ca716de5f7526736bfa6ceead690adf616d925bdc622b13\",\n                \"sha256:5b94b49521f6456670fdb30cd82a4eca9412788a93fa6dd6df72c94d5a8ff2d7\"\n            ],\n            \"version\": \"==7.0\"\n        },\n        \"flask\": {\n            \"hashes\": [\n                \"sha256:13f9f196f330c7c2c5d7a5cf91af894110ca0215ac051b5844701f2bfd934d52\",\n                \"sha256:45eb5a6fd193d6cf7e0cf5d8a5b31f83d5faae0293695626f539a823e93b13f6\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.1.1\"\n        },\n        \"flask-mail\": {\n            \"hashes\": [\n                \"sha256:22e5eb9a940bf407bcf30410ecc3708f3c56cc44b29c34e1726fe85006935f41\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.9.1\"\n        },\n        \"flask-migrate\": {\n            \"hashes\": [\n                \"sha256:6fb038be63d4c60727d5dfa5f581a6189af5b4e2925bc378697b4f0a40cfb4e1\",\n                \"sha256:a96ff1875a49a40bd3e8ac04fce73fdb0870b9211e6168608cbafa4eb839d502\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.5.2\"\n        },\n        \"flask-restplus\": {\n            \"hashes\": [\n                \"sha256:a15d251923a8feb09a5d805c2f4d188555910a42c64d58f7dd281b8cac095f1b\",\n                \"sha256:a66e442d0bca08f389fc3d07b4d808fc89961285d12fb8013f7cf15516fa9f5c\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.13.0\"\n        },\n        \"flask-sqlalchemy\": {\n            \"hashes\": [\n                \"sha256:0c9609b0d72871c540a7945ea559c8fdf5455192d2db67219509aed680a3d45a\",\n                \"sha256:8631bbea987bc3eb0f72b1f691d47bd37ceb795e73b59ab48586d76d75a7c605\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.4.0\"\n        },\n        \"flask-testing\": {\n            \"hashes\": [\n                \"sha256:dc076623d7d850653a018cb64f500948334c8aeb6b10a5a842bf1bcfb98122bc\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.7.1\"\n        },\n        \"gunicorn\": {\n            \"hashes\": [\n                \"sha256:aa8e0b40b4157b36a5df5e599f45c9c76d6af43845ba3b3b0efe2c70473c2471\",\n                \"sha256:fa2662097c66f920f53f70621c6c58ca4a3c4d3434205e608e121b5b3b71f4f3\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==19.9.0\"\n        },\n        \"itsdangerous\": {\n            \"hashes\": [\n                \"sha256:321b033d07f2a4136d3ec762eac9f16a10ccd60f53c0c91af90217ace7ba1f19\",\n                \"sha256:b12271b2047cb23eeb98c8b5622e2e5c5e9abd9784a153e9d8ef9cb4dd09d749\"\n            ],\n            \"version\": \"==1.1.0\"\n        },\n        \"jinja2\": {\n            \"hashes\": [\n                \"sha256:065c4f02ebe7f7cf559e49ee5a95fb800a9e4528727aec6f24402a5374c65013\",\n                \"sha256:14dd6caf1527abb21f08f86c784eac40853ba93edb79552aa1e4b8aef1b61c7b\"\n            ],\n            \"version\": \"==2.10.1\"\n        },\n        \"jsonschema\": {\n            \"hashes\": [\n                \"sha256:5f9c0a719ca2ce14c5de2fd350a64fd2d13e8539db29836a86adc990bb1a068f\",\n                \"sha256:8d4a2b7b6c2237e0199c8ea1a6d3e05bf118e289ae2b9d7ba444182a2959560d\"\n            ],\n            \"version\": \"==3.0.2\"\n        },\n        \"mako\": {\n            \"hashes\": [\n                \"sha256:a36919599a9b7dc5d86a7a8988f23a9a3a3d083070023bab23d64f7f1d1e0a4b\"\n            ],\n            \"version\": \"==1.1.0\"\n        },\n        \"markupsafe\": {\n            \"hashes\": [\n                \"sha256:00bc623926325b26bb9605ae9eae8a215691f33cae5df11ca5424f06f2d1f473\",\n                \"sha256:09027a7803a62ca78792ad89403b1b7a73a01c8cb65909cd876f7fcebd79b161\",\n                \"sha256:09c4b7f37d6c648cb13f9230d847adf22f8171b1ccc4d5682398e77f40309235\",\n                \"sha256:1027c282dad077d0bae18be6794e6b6b8c91d58ed8a8d89a89d59693b9131db5\",\n                \"sha256:24982cc2533820871eba85ba648cd53d8623687ff11cbb805be4ff7b4c971aff\",\n                \"sha256:29872e92839765e546828bb7754a68c418d927cd064fd4708fab9fe9c8bb116b\",\n                \"sha256:43a55c2930bbc139570ac2452adf3d70cdbb3cfe5912c71cdce1c2c6bbd9c5d1\",\n                \"sha256:46c99d2de99945ec5cb54f23c8cd5689f6d7177305ebff350a58ce5f8de1669e\",\n                \"sha256:500d4957e52ddc3351cabf489e79c91c17f6e0899158447047588650b5e69183\",\n                \"sha256:535f6fc4d397c1563d08b88e485c3496cf5784e927af890fb3c3aac7f933ec66\",\n                \"sha256:62fe6c95e3ec8a7fad637b7f3d372c15ec1caa01ab47926cfdf7a75b40e0eac1\",\n                \"sha256:6dd73240d2af64df90aa7c4e7481e23825ea70af4b4922f8ede5b9e35f78a3b1\",\n                \"sha256:717ba8fe3ae9cc0006d7c451f0bb265ee07739daf76355d06366154ee68d221e\",\n                \"sha256:79855e1c5b8da654cf486b830bd42c06e8780cea587384cf6545b7d9ac013a0b\",\n                \"sha256:7c1699dfe0cf8ff607dbdcc1e9b9af1755371f92a68f706051cc8c37d447c905\",\n                \"sha256:88e5fcfb52ee7b911e8bb6d6aa2fd21fbecc674eadd44118a9cc3863f938e735\",\n                \"sha256:8defac2f2ccd6805ebf65f5eeb132adcf2ab57aa11fdf4c0dd5169a004710e7d\",\n                \"sha256:98c7086708b163d425c67c7a91bad6e466bb99d797aa64f965e9d25c12111a5e\",\n                \"sha256:9add70b36c5666a2ed02b43b335fe19002ee5235efd4b8a89bfcf9005bebac0d\",\n                \"sha256:9bf40443012702a1d2070043cb6291650a0841ece432556f784f004937f0f32c\",\n                \"sha256:ade5e387d2ad0d7ebf59146cc00c8044acbd863725f887353a10df825fc8ae21\",\n                \"sha256:b00c1de48212e4cc9603895652c5c410df699856a2853135b3967591e4beebc2\",\n                \"sha256:b1282f8c00509d99fef04d8ba936b156d419be841854fe901d8ae224c59f0be5\",\n                \"sha256:b2051432115498d3562c084a49bba65d97cf251f5a331c64a12ee7e04dacc51b\",\n                \"sha256:ba59edeaa2fc6114428f1637ffff42da1e311e29382d81b339c1817d37ec93c6\",\n                \"sha256:c8716a48d94b06bb3b2524c2b77e055fb313aeb4ea620c8dd03a105574ba704f\",\n                \"sha256:cd5df75523866410809ca100dc9681e301e3c27567cf498077e8551b6d20e42f\",\n                \"sha256:e249096428b3ae81b08327a63a485ad0878de3fb939049038579ac0ef61e17e7\"\n            ],\n            \"version\": \"==1.1.1\"\n        },\n        \"marshmallow\": {\n            \"hashes\": [\n                \"sha256:23f684b54b1955ebd5bdfbdda4062e438ef86218f14f1a356f570cdf0c016ab3\",\n                \"sha256:fcfc9ffd75a883da06f30f604a4e81dd0b56eb9438f4d0a8de6bbaa163ce9ec3\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==3.0.1\"\n        },\n        \"pyjwt\": {\n            \"hashes\": [\n                \"sha256:5c6eca3c2940464d106b99ba83b00c6add741c9becaec087fb7ccdefea71350e\",\n                \"sha256:8d59a976fb773f3e6a39c85636357c4f0e242707394cadadd9814f5cbaa20e96\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.7.1\"\n        },\n        \"pymysql\": {\n            \"hashes\": [\n                \"sha256:3943fbbbc1e902f41daf7f9165519f140c4451c179380677e6a848587042561a\",\n                \"sha256:d8c059dcd81dedb85a9f034d5e22dcb4442c0b201908bede99e306d65ea7c8e7\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.9.3\"\n        },\n        \"pyrsistent\": {\n            \"hashes\": [\n                \"sha256:34b47fa169d6006b32e99d4b3c4031f155e6e68ebcc107d6454852e8e0ee6533\"\n            ],\n            \"version\": \"==0.15.4\"\n        },\n        \"python-dateutil\": {\n            \"hashes\": [\n                \"sha256:7e6584c74aeed623791615e26efd690f29817a27c73085b78e4bad02493df2fb\",\n                \"sha256:c89805f6f4d64db21ed966fda138f8a5ed7a4fdbc1a8ee329ce1b74e3c74da9e\"\n            ],\n            \"version\": \"==2.8.0\"\n        },\n        \"python-dotenv\": {\n            \"hashes\": [\n                \"sha256:debd928b49dbc2bf68040566f55cdb3252458036464806f4094487244e2a4093\",\n                \"sha256:f157d71d5fec9d4bd5f51c82746b6344dffa680ee85217c123f4a0c8117c4544\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.10.3\"\n        },\n        \"python-editor\": {\n            \"hashes\": [\n                \"sha256:1bf6e860a8ad52a14c3ee1252d5dc25b2030618ed80c022598f00176adc8367d\",\n                \"sha256:51fda6bcc5ddbbb7063b2af7509e43bd84bfc32a4ff71349ec7847713882327b\",\n                \"sha256:5f98b069316ea1c2ed3f67e7f5df6c0d8f10b689964a4a811ff64f0106819ec8\"\n            ],\n            \"version\": \"==1.0.4\"\n        },\n        \"pytz\": {\n            \"hashes\": [\n                \"sha256:26c0b32e437e54a18161324a2fca3c4b9846b74a8dccddd843113109e1116b32\",\n                \"sha256:c894d57500a4cd2d5c71114aaab77dbab5eabd9022308ce5ac9bb93a60a6f0c7\"\n            ],\n            \"version\": \"==2019.2\"\n        },\n        \"six\": {\n            \"hashes\": [\n                \"sha256:3350809f0555b11f552448330d0b52d5f24c91a322ea4a15ef22629740f3761c\",\n                \"sha256:d16a0141ec1a18405cd4ce8b4613101da75da0e9a7aec5bdd4fa804d0e0eba73\"\n            ],\n            \"version\": \"==1.12.0\"\n        },\n        \"sqlalchemy\": {\n            \"hashes\": [\n                \"sha256:0459bf0ea6478f3e904de074d65769a11d74cdc34438ab3159250c96d089aef0\"\n            ],\n            \"version\": \"==1.3.7\"\n        },\n        \"werkzeug\": {\n            \"hashes\": [\n                \"sha256:87ae4e5b5366da2347eb3116c0e6c681a0e939a33b2805e2c0cbd282664932c4\",\n                \"sha256:a13b74dd3c45f758d4ebdb224be8f1ab8ef58b3c0ffc1783a8c7d9f4f50227e6\"\n            ],\n            \"version\": \"==0.15.5\"\n        }\n    },\n    \"develop\": {\n        \"astroid\": {\n            \"hashes\": [\n                \"sha256:6560e1e1749f68c64a4b5dee4e091fce798d2f0d84ebe638cf0e0585a343acf4\",\n                \"sha256:b65db1bbaac9f9f4d190199bb8680af6f6f84fd3769a5ea883df8a91fe68b4c4\"\n            ],\n            \"version\": \"==2.2.5\"\n        },\n        \"autopep8\": {\n            \"hashes\": [\n                \"sha256:4d8eec30cc81bc5617dbf1218201d770dc35629363547f17577c61683ccfb3ee\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.4.4\"\n        },\n        \"isort\": {\n            \"hashes\": [\n                \"sha256:54da7e92468955c4fceacd0c86bd0ec997b0e1ee80d97f67c35a78b719dccab1\",\n                \"sha256:6e811fcb295968434526407adb8796944f1988c5b65e8139058f2014cbe100fd\"\n            ],\n            \"version\": \"==4.3.21\"\n        },\n        \"lazy-object-proxy\": {\n            \"hashes\": [\n                \"sha256:02b260c8deb80db09325b99edf62ae344ce9bc64d68b7a634410b8e9a568edbf\",\n                \"sha256:18f9c401083a4ba6e162355873f906315332ea7035803d0fd8166051e3d402e3\",\n                \"sha256:1f2c6209a8917c525c1e2b55a716135ca4658a3042b5122d4e3413a4030c26ce\",\n                \"sha256:2f06d97f0ca0f414f6b707c974aaf8829c2292c1c497642f63824119d770226f\",\n                \"sha256:616c94f8176808f4018b39f9638080ed86f96b55370b5a9463b2ee5c926f6c5f\",\n                \"sha256:63b91e30ef47ef68a30f0c3c278fbfe9822319c15f34b7538a829515b84ca2a0\",\n                \"sha256:77b454f03860b844f758c5d5c6e5f18d27de899a3db367f4af06bec2e6013a8e\",\n                \"sha256:83fe27ba321e4cfac466178606147d3c0aa18e8087507caec78ed5a966a64905\",\n                \"sha256:84742532d39f72df959d237912344d8a1764c2d03fe58beba96a87bfa11a76d8\",\n                \"sha256:874ebf3caaf55a020aeb08acead813baf5a305927a71ce88c9377970fe7ad3c2\",\n                \"sha256:9f5caf2c7436d44f3cec97c2fa7791f8a675170badbfa86e1992ca1b84c37009\",\n                \"sha256:a0c8758d01fcdfe7ae8e4b4017b13552efa7f1197dd7358dc9da0576f9d0328a\",\n                \"sha256:a4def978d9d28cda2d960c279318d46b327632686d82b4917516c36d4c274512\",\n                \"sha256:ad4f4be843dace866af5fc142509e9b9817ca0c59342fdb176ab6ad552c927f5\",\n                \"sha256:ae33dd198f772f714420c5ab698ff05ff900150486c648d29951e9c70694338e\",\n                \"sha256:b4a2b782b8a8c5522ad35c93e04d60e2ba7f7dcb9271ec8e8c3e08239be6c7b4\",\n                \"sha256:c462eb33f6abca3b34cdedbe84d761f31a60b814e173b98ede3c81bb48967c4f\",\n                \"sha256:fd135b8d35dfdcdb984828c84d695937e58cc5f49e1c854eb311c4d6aa03f4f1\"\n            ],\n            \"version\": \"==1.4.2\"\n        },\n        \"mccabe\": {\n            \"hashes\": [\n                \"sha256:ab8a6258860da4b6677da4bd2fe5dc2c659cff31b3ee4f7f5d64e79735b80d42\",\n                \"sha256:dd8d182285a0fe56bace7f45b5e7d1a6ebcbf524e8f3bd87eb0f125271b8831f\"\n            ],\n            \"version\": \"==0.6.1\"\n        },\n        \"pycodestyle\": {\n            \"hashes\": [\n                \"sha256:95a2219d12372f05704562a14ec30bc76b05a5b297b21a5dfe3f6fac3491ae56\",\n                \"sha256:e40a936c9a450ad81df37f549d676d127b1b66000a6c500caa2b085bc0ca976c\"\n            ],\n            \"version\": \"==2.5.0\"\n        },\n        \"pylint\": {\n            \"hashes\": [\n                \"sha256:5d77031694a5fb97ea95e828c8d10fc770a1df6eb3906067aaed42201a8a6a09\",\n                \"sha256:723e3db49555abaf9bf79dc474c6b9e2935ad82230b10c1138a71ea41ac0fff1\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.3.1\"\n        },\n        \"six\": {\n            \"hashes\": [\n                \"sha256:3350809f0555b11f552448330d0b52d5f24c91a322ea4a15ef22629740f3761c\",\n                \"sha256:d16a0141ec1a18405cd4ce8b4613101da75da0e9a7aec5bdd4fa804d0e0eba73\"\n            ],\n            \"version\": \"==1.12.0\"\n        },\n        \"typed-ast\": {\n            \"hashes\": [\n                \"sha256:18511a0b3e7922276346bcb47e2ef9f38fb90fd31cb9223eed42c85d1312344e\",\n                \"sha256:262c247a82d005e43b5b7f69aff746370538e176131c32dda9cb0f324d27141e\",\n                \"sha256:2b907eb046d049bcd9892e3076c7a6456c93a25bebfe554e931620c90e6a25b0\",\n                \"sha256:354c16e5babd09f5cb0ee000d54cfa38401d8b8891eefa878ac772f827181a3c\",\n                \"sha256:4e0b70c6fc4d010f8107726af5fd37921b666f5b31d9331f0bd24ad9a088e631\",\n                \"sha256:630968c5cdee51a11c05a30453f8cd65e0cc1d2ad0d9192819df9978984529f4\",\n                \"sha256:66480f95b8167c9c5c5c87f32cf437d585937970f3fc24386f313a4c97b44e34\",\n                \"sha256:71211d26ffd12d63a83e079ff258ac9d56a1376a25bc80b1cdcdf601b855b90b\",\n                \"sha256:95bd11af7eafc16e829af2d3df510cecfd4387f6453355188342c3e79a2ec87a\",\n                \"sha256:bc6c7d3fa1325a0c6613512a093bc2a2a15aeec350451cbdf9e1d4bffe3e3233\",\n                \"sha256:cc34a6f5b426748a507dd5d1de4c1978f2eb5626d51326e43280941206c209e1\",\n                \"sha256:d755f03c1e4a51e9b24d899561fec4ccaf51f210d52abdf8c07ee2849b212a36\",\n                \"sha256:d7c45933b1bdfaf9f36c579671fec15d25b06c8398f113dab64c18ed1adda01d\",\n                \"sha256:d896919306dd0aa22d0132f62a1b78d11aaf4c9fc5b3410d3c666b818191630a\",\n                \"sha256:ffde2fbfad571af120fcbfbbc61c72469e72f550d676c3342492a9dfdefb8f12\"\n            ],\n            \"markers\": \"implementation_name == 'cpython'\",\n            \"version\": \"==1.4.0\"\n        },\n        \"wrapt\": {\n            \"hashes\": [\n                \"sha256:565a021fd19419476b9362b05eeaa094178de64f8361e44468f9e9d7843901e1\"\n            ],\n            \"version\": \"==1.11.2\"\n        }\n    }\n}\n", "README.md": "# Final Year Project Backend Api\n\n## Required Software\n* Python-3.x\n* pip\n* pipenv\n* mysql (or any database software, DB connection URI must match though)\n\n## How do I get set up\n* `git clone https://github.com/toritsejuFO/final-year-project-backend-api.git`\n* `cd final-year-project-backend-api`\n* `git checkout dev` or `git checkout -b {new-branch}`\n* `pipenv shell && pipenv install`\n* `cp .env.sample .env` (edit appropriately)\n* `flask run`\n\n## Initial DB setup\nCreate a database that matches the one in your .env file.\nRun the commands below that in order to create and populate DB\n* `flask db init`\n* `flask db upgrade`\n* `flask semester`\n* `flask level`\n* `flask schools`\n* `flask departments`\n* `flask courses`\n\n## Running Unit Tests\n* `flask test`\n\n## Testing with postman\n* `./utils/create_postman_collections.sh`\n\nThis will create a ***postman_collection*** file that you can now import to postman app to test the API\n\n## Link to project progress tracker\n[View project on pivotal tracker](https://www.pivotaltracker.com/n/projects/2380261)", "requirements.txt": "-i https://pypi.org/simple\nalembic==1.0.11\naniso8601==7.0.0\narrow==0.14.5\nattrs==19.1.0\nblinker==1.4\nclick==7.0\nflask-mail==0.9.1\nflask-migrate==2.5.2\nflask-restplus==0.13.0\nflask-sqlalchemy==2.4.0\nflask-testing==0.7.1\nflask==1.1.1\ngunicorn==19.9.0\nitsdangerous==1.1.0\njinja2==2.10.1\njsonschema==3.0.2\nmako==1.1.0\nmarkupsafe==1.1.1\nmarshmallow==3.0.1\npyjwt==1.7.1\npymysql==0.9.3\npyrsistent==0.15.4\npython-dateutil==2.8.0\npython-dotenv==0.10.3\npython-editor==1.0.4\npytz==2019.2\nsix==1.12.0\nsqlalchemy==1.3.7\nwerkzeug==0.15.5\n", "REVIEW.md": "# \u041f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043a \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430\u043c \ncomponents\n backend\n    app\n      adapters\n        db\n          repositories.py\n        api \n          controllers\n          app.py\n          settings.py\n      application\n        services.py\n        interfaces.py\n      composites\n        api.py\n    tests\n\n# \u0412\u0435\u0437\u0434\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044e (\u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432)\n\n# Namedtuple \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 dataclass\n\n# \u0423\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u044c \u0441\u043b\u043e\u0435\u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432\u043d\u0435\u0434\u0440\u0438\u0442\u044c DI\n\n# \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439. \n\u0421\u0432\u044f\u0437\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 DI\n\n# \u0412 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430\u0445 \u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0440\u0430\u0437\u043d\u044b\u0435 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0442\u0435\u0440\u043c\u0438\u043d\u043e\u043b\u043e\u0433\u0438\u044f\n\u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0437\u0434\u0435\u0441\u044c model - \u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430\u0445 entity, \n\u0437\u0434\u0435\u0441\u044c schema - \u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430\u0445 model.\n\n# \u0422\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u0442\u0438\u043b\u044c ORM \u0447\u0442\u043e \n\u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0440\u0430\u0432\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \n\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043e\u0432 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0438\u043c\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439)\n\n# \u0412 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c pydantic, \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 marshmallow, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e,\n\u043e\u0431\u0443\u0441\u043b\u043e\u0432\u043b\u0435\u043d\u043e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c.\n", "run_api.py": "#TODO: \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439\nimport os\nimport sys\nimport unittest\n\nimport arrow\nfrom flask import request\nfrom dotenv import load_dotenv\nfrom flask_migrate import Migrate\n\nload_dotenv()\n\nfrom api import create_app, db\nfrom api.model import Student, Level, School, Department, Course, Semester, HOD, RevokedToken, Lecturer\nfrom logger import request_logger, stream_logger\n\nif os.environ.get('FLASK_ENV') is None:\n    print('FLASK_ENV not provided')\n    sys.exit()\n#TODO: \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c BaseSettings\napp = create_app(os.environ.get('FLASK_ENV'))\n# app.app_context().push()\n\nmigrate = Migrate(app, db)\n\n@app.shell_context_processor\ndef make_shell_context():\n    return {\n        'app': app,\n        'db': db,\n        'Student': Student,\n        'Level': Level,\n        'School': School, \n        'Department': Department, \n        'Course': Course,\n        'Semester': Semester,\n        'HOD': HOD,\n        'RevokedToken': RevokedToken, \n        'Lecturer': Lecturer\n    }\n#TODO: \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u0430\u0434\u0430\u043f\u0442\u0435\u0440 cli\n@app.cli.command()\ndef run():\n    app.run(host='0.0.0.0')\n\n@app.cli.command()\ndef test():\n    tests = unittest.TestLoader().discover('test', pattern='test*.py')\n    result = unittest.TextTestRunner(verbosity=2).run(tests)\n    return result.wasSuccessful()\n#TODO: \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u0430\u0434\u0430\u043f\u0442\u0435\u0440 logger\n@app.after_request\ndef log_info(response):\n    date = arrow.now('Africa/Lagos')\n    if os.environ.get('FLASK_ENV') is 'prod':\n        ip = request.headers.get(app.config['REAL_IP'])\n    else:\n        ip = request.remote_addr\n    log_details = {\n        'date': date.format(),\n        'ip': ip,\n        'browser': request.user_agent.browser,\n        'device': request.user_agent.platform,\n        'status_code': response.status_code,\n        'path': request.path,\n        'method': request.method,\n    }\n    response.headers.add('Access-Control-Allow-Origin', '*')\n    response.headers.add('Access-Control-Allow-Headers', 'Content-Type, x-auth-token')\n    stream_logger.debug(log_details)\n    if not app.debug:\n        request_logger.info(log_details)\n    return response\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port='8080')\n\nfrom utils import cli_utils\n", "test": {}, "base.py": "from flask_testing import TestCase\n\nfrom api import db\nfrom run_api import app\nfrom config import config_by_env\n\nfrom utils.populate_departments_table import populate_departments_table\nfrom utils.populate_levels_table import populate_levels_table\nfrom utils.populate_schools_table import populate_schools_table\n\n\nclass BaseTestCase(TestCase):\n    def create_app(self):\n        app.config.from_object(config_by_env['test'])\n        db.init_app(app)\n        return app\n\n    def setUp(self):\n        db.create_all()\n        populate_levels_table()\n        populate_schools_table()\n        populate_departments_table()\n        db.session.commit()\n\n    def tearDown(self):\n        db.session.remove()\n        db.drop_all()\n", "test_config.py": "import unittest\nimport os\n\nfrom flask import Flask\nfrom flask_testing import TestCase\nfrom config import config_by_env, basedir\n\nfrom api import db\n\napp = Flask(__name__)\n\n\nclass TestConfigTestCase(TestCase):\n    def create_app(self):\n        app.config.from_object(config_by_env['test'])\n        return app\n\n    def test_test_config(self):\n        self.assertEqual(app.config['SQLALCHEMY_DATABASE_URI'], f'sqlite3://{os.path.join(basedir, \"test.db\")}')\n        self.assertTrue(app.config['TESTING'])\n        self.assertTrue(app.config['FLASK_DEBUG'])\n\n\nclass DevelopmentConfigTestCase(TestCase):\n    def create_app(self):\n        app.config.from_object(config_by_env['dev'])\n        app.config['DB_USER'] = os.environ.get('DB_USER')\n        app.config['DB_PASS'] = os.environ.get('DB_PASS')\n        app.config['DB_NAME'] = os.environ.get('DB_NAME')\n        return app\n\n    def test_development_config(self):\n        db_user = app.config['DB_USER']\n        db_pass = app.config['DB_PASS']\n        db_name = app.config['DB_NAME']\n        self.assertEqual(app.config['SQLALCHEMY_DATABASE_URI'], f'mysql+pymysql://{db_user}:{db_pass}@localhost:3306/{db_name}')\n        self.assertTrue(app.config['FLASK_DEBUG'])\n\n\nclass ProductiontConfigTestCase(TestCase):\n    def create_app(self):\n        app.config.from_object(config_by_env['prod'])\n        return app\n\n    def test_production_config(self):\n        self.assertFalse(app.config['FLASK_DEBUG'])\n\nif __name__ == \"__main__\":\n    unittest.main()\n", "utils": {}, "cli_utils.py": "from run_api import app\nfrom utils.populate_departments_table import populate_departments_table\nfrom utils.populate_levels_table import populate_levels_table\nfrom utils.populate_schools_table import populate_schools_table\nfrom utils.populate_semesters_table import populate_semesters_table\nfrom utils.populate_courses_table import populate_courses_table\n\n\n@app.cli.command()\ndef levels():\n    populate_levels_table()\n\n@app.cli.command()\ndef departments():\n    populate_departments_table()\n\n@app.cli.command()\ndef schools():\n    populate_schools_table()\n\n@app.cli.command()\ndef semesters():\n    populate_semesters_table()\n\n@app.cli.command()\ndef courses():\n    populate_courses_table()\n", "create_postman_collection.sh": "#!/bin/sh\n\npython3 postman.py > postman_collection\n", "populate_courses_table.py": "#!/usr/bin/python3\n\nfrom api.model import Course\n\ncourses = [\n    {\n        'title': 'Computer Applications',\n        'code': 'CSC201',\n        'level': '200',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '4'\n    },\n    {\n        'title': 'Computer Applications 2',\n        'code': 'CSC202',\n        'level': '200',\n        'department_code': 'CSC',\n        'semester': 'second',\n        'units': '3'\n    },\n    {\n        'title': 'Computer Systems',\n        'code': 'CSC301',\n        'level': '300',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '3'\n    },\n    {\n        'title': 'Computer Organization',\n        'code': 'CSC303',\n        'level': '300',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '3'\n    },\n    {\n        'title': 'Data Structures and Algorithms',\n        'code': 'CSC305',\n        'level': '300',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '3'\n    },\n    {\n        'title': 'Operating Systems',\n        'code': 'CSC307',\n        'level': '300',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '3'\n    },\n    {\n        'title': 'Computer Architecture',\n        'code': 'CSC302',\n        'level': '300',\n        'department_code': 'CSC',\n        'semester': 'second',\n        'units': '3'\n    },\n    {\n        'title': 'File Systems',\n        'code': 'CSC304',\n        'level': '300',\n        'department_code': 'CSC',\n        'semester': 'second',\n        'units': '3'\n    },\n    {\n        'title': 'Survey of Programming Languages',\n        'code': 'CSC306',\n        'level': '300',\n        'department_code': 'CSC',\n        'semester': 'second',\n        'units': '3'\n    },\n    {\n        'title': 'System Design and Analysis',\n        'code': 'CSC308',\n        'level': '300',\n        'department_code': 'CSC',\n        'semester': 'second',\n        'units': '3'\n    },\n    {\n        'title': 'Compiler Construction',\n        'code': 'CSC312',\n        'level': '300',\n        'department_code': 'CSC',\n        'semester': 'second',\n        'units': '3'\n    },\n    {\n        'title': 'Computer Profession',\n        'code': 'CSC401',\n        'level': '400',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '1'\n    },\n    {\n        'title': 'Database Management Systems',\n        'code': 'CSC403',\n        'level': '400',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '3'\n    },\n    {\n        'title': 'Computer Hardware',\n        'code': 'CSC405',\n        'level': '400',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '3'\n    },\n    {\n        'title': 'Algorithms',\n        'code': 'CSC407',\n        'level': '400',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '3'\n    },\n    {\n        'title': 'Operating Systems 2',\n        'code': 'CSC409',\n        'level': '400',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '3'\n    },\n    {\n        'title': 'Software Engineering',\n        'code': 'CSC501',\n        'level': '500',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '3'\n    },\n    {\n        'title': 'Management Information System',\n        'code': 'CSC503',\n        'level': '500',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '3'\n    },\n    {\n        'title': 'Data Processing',\n        'code': 'CSC505',\n        'level': '500',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '3'\n    },\n    {\n        'title': 'Data Communication',\n        'code': 'CSC507',\n        'level': '500',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '3'\n    },\n    {\n        'title': 'Web Design',\n        'code': 'CSC509',\n        'level': '500',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '3'\n    },\n    {\n        'title': 'Artificial Intelligence',\n        'code': 'CSC513',\n        'level': '500',\n        'department_code': 'CSC',\n        'semester': 'first',\n        'units': '3'\n    },\n    {\n        'title': 'Automata Compatibility and Formal Languages',\n        'code': 'CSC502',\n        'level': '500',\n        'department_code': 'CSC',\n        'semester': 'second',\n        'units': '3'\n    },\n    {\n        'title': 'Interactive Computer Gaphics',\n        'code': 'CSC504',\n        'level': '500',\n        'department_code': 'CSC',\n        'semester': 'second',\n        'units': '3'\n    },\n    {\n        'title': 'Computer Networks',\n        'code': 'CSC506',\n        'level': '500',\n        'department_code': 'CSC',\n        'semester': 'second',\n        'units': '3'\n    },\n    {\n        'title': 'Systems Performance Evaluation',\n        'code': 'CSC508',\n        'level': '500',\n        'department_code': 'CSC',\n        'semester': 'second',\n        'units': '3'\n    },\n    {\n        'title': 'Modelling Simulation and Forcasting',\n        'code': 'CSC510',\n        'level': '500',\n        'department_code': 'CSC',\n        'semester': 'second',\n        'units': '3'\n    },\n\n    # SCHOOL COURSES\n\n    {\n        'title': 'Entrepreneural Studies I',\n        'code': 'ENS301',\n        'level': '300',\n        'department_code': 'DGS',\n        'semester': 'first',\n        'units': '2'\n    },\n    {\n        'title': 'Entrepreneural Studies II',\n        'code': 'ENS302',\n        'level': '300',\n        'department_code': 'DGS',\n        'semester': 'second',\n        'units': '2'\n    },\n    {\n        'title': 'General Studies',\n        'code': 'GST101',\n        'level': '100',\n        'department_code': 'DGS',\n        'semester': 'first',\n        'units': '2'\n    },\n    {\n        'title': 'General Studies',\n        'code': 'GST103',\n        'level': '100',\n        'department_code': 'DGS',\n        'semester': 'first',\n        'units': '1'\n    },\n    {\n        'title': 'General Studies',\n        'code': 'GST108',\n        'level': '100',\n        'department_code': 'DGS',\n        'semester': 'second',\n        'units': '1'\n    },\n    {\n        'title': 'General Studies',\n        'code': 'GST110',\n        'level': '100',\n        'department_code': 'DGS',\n        'semester': 'second',\n        'units': '1'\n    },\n    {\n        'title': 'General Studies',\n        'code': 'GST102',\n        'level': '100',\n        'department_code': 'DGS',\n        'semester': 'second',\n        'units': '1'\n    },\n    {\n        'title': 'General Studies',\n        'code': 'GST201',\n        'level': '200',\n        'department_code': 'DGS',\n        'semester': 'second',\n        'units': '2'\n    },\n]\n\n\ndef populate_courses_table():\n    try:\n        for course in courses:\n            title = course['title']\n            code = course['code']\n            level = course['level']\n            department_code = course['department_code']\n            semester = course['semester']\n            units = course['units']\n            if not Course.exists(course_code=code):\n                Course(title=title, code=code, level=level, units=units,\n                    department_code=department_code, semester=semester).save()\n        print('courses table populated successfully')\n    except Exception as e:\n        print(f'Something failed {e}')\n\n\nif __name__ == '__main__':\n    populate_courses_table()\n", "populate_departments_table.py": "#!/usr/bin/python3\n\nfrom api.model import Department\n\ndepartments = [\n    {\n        'name': 'Agricultural Economics',\n        'code': 'AEC',\n        'school_code': 'SAAT'\n    },\n    {\n        'name': 'Agricultural Extension',\n        'code': 'AEX',\n        'school_code': 'SAAT'\n    },\n    {\n        'name': 'Anatomy',\n        'code': 'ANA',\n        'school_code': 'SBMS'\n    },\n    {\n        'name': 'Physiology',\n        'code': 'PSY',\n        'school_code': 'SBMS'\n    },\n    {\n        'name': 'Computer Science',\n        'code': 'CSC',\n        'school_code': 'SCIT'\n    },\n    {\n        'name': 'Information Technology',\n        'code': 'IFT',\n        'school_code': 'SCIT'\n    },\n    {\n        'name': 'Biology',\n        'code': 'BIO',\n        'school_code': 'SOBS'\n    },\n    {\n        'name': 'Biochemistry',\n        'code': 'BCH',\n        'school_code': 'SOBS'\n    },\n    {\n        'name': 'Petroleum Engineering',\n        'code': 'PET',\n        'school_code': 'SEET'\n    },\n    {\n        'name': 'Chemical Engineering',\n        'code': 'CHE',\n        'school_code': 'SEET'\n    },\n    {\n        'name': 'Architecture',\n        'code': 'ARC',\n        'school_code': 'SOET'\n    },\n    {\n        'name': 'Surveying & Geoinformatics',\n        'code': 'SVG',\n        'school_code': 'SOET'\n    },\n    {\n        'name': 'Optometry',\n        'code': 'OPT',\n        'school_code': 'SOHT'\n    },\n    {\n        'name': 'Public Health',\n        'code': 'PUH',\n        'school_code': 'SOHT'\n    },\n    {\n        'name': 'Maritime Management Technology',\n        'code': 'MMT',\n        'school_code': 'SMAT'\n    },\n    {\n        'name': 'Project Management Technology',\n        'code': 'PMT',\n        'school_code': 'SMAT'\n    },\n    {\n        'name': 'Mathematics',\n        'code': 'MTH',\n        'school_code': 'SOPS'\n    },\n    {\n        'name': 'Physics',\n        'code': 'PHY',\n        'school_code': 'SOPS'\n    },\n    {\n        'name': 'General Studies',\n        'code': 'DGS',\n        'school_code': 'DGS'\n    },\n]\n\n\ndef populate_departments_table():\n    try:\n        for department in departments:\n            name = department['name']\n            code = department['code']\n            school_code = department['school_code']\n            if not Department.exists(department_code=code):\n                Department(name=name, code=code, school_code=school_code).save()\n        print('departments table populated successfully')\n    except Exception as e:\n        print(f'Something failed: {e}')\n\n\nif __name__ == '__main__':\n    populate_departments_table()\n", "populate_levels_table.py": "#!/usr/bin/python3\n\nfrom api.model import Level\n\nlevels = [\n    '100',\n    '200',\n    '300',\n    '400',\n    '500'\n]\n\n\ndef populate_levels_table():\n    try:\n        for level in levels:\n            if not Level.exists(level=level):\n                Level(level=level).save()\n        print('levels table populated succefully')\n    except Exception as e:\n        print(f'Something failed {e}')\n\n\nif __name__ == '__main__':\n    populate_levels_table()\n", "populate_schools_table.py": "#!/usr/bin/python3\n\nfrom api.model import School\n\nschools = [\n    {\n        'name': 'School of Agriculture & Agricultural Technology',\n        'code': 'SAAT'\n    },\n    {\n        'name': 'School of Basic Medical Sciences',\n        'code': 'SBMS'\n    },\n    {\n        'name': 'School of Computing & Information Technology',\n        'code': 'SCIT'\n    },\n    {\n        'name': 'School of Biological Sciences',\n        'code': 'SOBS'\n    },\n    {\n        'name': 'School of Engineering & Engineering Technology',\n        'code': 'SEET'\n    },\n    {\n        'name': 'School of Environmental Technology',\n        'code': 'SOET'\n    },\n    {\n        'name': 'School of Health Technology',\n        'code': 'SOHT'\n    },\n    {\n        'name': 'School of Management Technology',\n        'code': 'SMAT'\n    },\n    {\n        'name': 'School of Physical Sciences',\n        'code': 'SOPS'\n    },\n    {\n        'name': 'School of General Studies',\n        'code': 'DGS'\n    },\n]\n\n\ndef populate_schools_table():\n    try:\n        for school in schools:\n            if not School.exists(code=school['code']):\n                School(name=school['name'], code=school['code']).save()\n        print('schools table populated succefully')\n    except Exception as e:\n        print(f'Something failed {e}')\n\n\nif __name__ == '__main__':\n    populate_schools_table()\n", "populate_semesters_table.py": "#!/usr/bin/python3\nfrom api.model import Semester\n\nsemesters = [\n    'first',\n    'second'\n]\n\ndef populate_semesters_table():\n    try:\n        for semester in semesters:\n            if not Semester.exists(semester=semester):\n                Semester(semester=semester).save()\n        print('Semesters table populated successfully')\n    except Exception as e:\n        print(f'Something failed {e}')\n\nif __name__ == \"__main__\":\n    populate_semesters_table()\n", "postman.py": "from flask import json\n\nfrom api import api\nfrom run_api import app\n\napp.config['SERVER_NAME'] = 'localhost:5000'\napp.app_context().push()\n\nurlvars = False\nswagger = True\n\ndata = api.as_postman(urlvars=urlvars, swagger=swagger)\nprint(json.dumps(data))\n", "postman_collection": "{\"description\": \"Backend API for managing resources on the Biometric Attendance and Exam Vieirfication System\", \"folders\": [], \"id\": \"cd194985-919f-5887-8660-1b5a6dc2b181\", \"name\": \"Biometric Attendance and Exam Vieirfication System 1.0\", \"order\": [\"760581cb-711b-56a0-9861-291d296ca522\"], \"requests\": [{\"collectionId\": \"cd194985-919f-5887-8660-1b5a6dc2b181\", \"description\": \"The API Swagger specifications as JSON\", \"headers\": \"\", \"id\": \"760581cb-711b-56a0-9861-291d296ca522\", \"method\": \"GET\", \"name\": \"Swagger specifications\", \"time\": 1564755997, \"url\": \"http://localhost:5000/swagger.json\"}], \"timestamp\": 1564755997}\n"}