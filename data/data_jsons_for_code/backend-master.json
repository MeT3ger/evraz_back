{"backend-master": {}, ".pylintrc": "[MASTER]\ndisable=missing-docstring,\n        too-few-public-methods,\n        no-self-use,\n        import-error,\n        invalid-name\n", "provisioners.mk": ".include <${REGGAE_PATH}/mk/ansible.mk>\n", "pytest.ini": "[pytest]\nasyncio_mode=auto\n", "LICENSE": "BSD 2-Clause License\n\nCopyright (c) 2021, Goran Meki\u0107\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n", "alembic.ini": "# A generic, single database configuration.\n\n[alembic]\n# path to migration scripts\nscript_location = alembic\n\n# template used to generate migration files\n# file_template = %%(rev)s_%%(slug)s\n\n# sys.path path, will be prepended to sys.path if present.\n# defaults to the current working directory.\nprepend_sys_path = .\n\n# timezone to use when rendering the date\n# within the migration file as well as the filename.\n# string value is passed to dateutil.tz.gettz()\n# leave blank for localtime\n# timezone =\n\n# max length of characters to apply to the\n# \"slug\" field\n# truncate_slug_length = 40\n\n# set to 'true' to run the environment during\n# the 'revision' command, regardless of autogenerate\n# revision_environment = false\n\n# set to 'true' to allow .pyc and .pyo files without\n# a source .py file to be detected as revisions in the\n# versions/ directory\n# sourceless = false\n\n# version location specification; this defaults\n# to alembic/versions.  When using multiple version\n# directories, initial revisions must be specified with --version-path\n# version_locations = %(here)s/bar %(here)s/bat alembic/versions\n\n# the output encoding used when revision files\n# are written from script.py.mako\n# output_encoding = utf-8\n\nsqlalchemy.url = sqlite:///db.sqlite\n\n\n[post_write_hooks]\n# post_write_hooks defines scripts or Python functions that are run\n# on newly generated revision scripts.  See the documentation for further\n# detail and examples\n\n# format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint\nhooks = black\nblack.type = console_scripts\nblack.entrypoint = black\nblack.options = -l 79 REVISION_SCRIPT_FILENAME\n\n# Logging configuration\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARN\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel = WARN\nhandlers =\nqualname = sqlalchemy.engine\n\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n", "Makefile": ".include <name.py>\n\nUSE_FREENIT = YES\nSERVICE != echo ${app_name}\nREGGAE_PATH := /usr/local/share/reggae\n\n.include <${REGGAE_PATH}/mk/service.mk>\n", "pyproject.toml": "[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"freenit\"\ndynamic = [\"version\"]\ndescription = \"REST API framework based on FastAPI\"\nreadme = \"README.md\"\nlicense = {file = \"LICENSE\"}\nrequires-python = \">=3.8\"\ndependencies = [\n  \"fastapi\",\n  \"passlib\",\n  \"pydantic[email]\",\n  \"pyjwt\",\n]\nauthors = [\n  {name = \"Goran Meki\u0107\", email = \"meka@tilda.center\"},\n]\nclassifiers = [\n  \"Development Status :: 4 - Beta\",\n  \"Intended Audience :: Developers\",\n  \"Topic :: Internet :: WWW/HTTP\",\n  \"Environment :: Web Environment\",\n  \"Programming Language :: Python\"\n]\n\n[project.optional-dependencies]\n  beanie = [\"beanie\"]\n  dev = [\n    \"aiosqlite\",\n    \"black\",\n    \"isort\",\n    \"uvicorn\",\n  ]\n  ldap = [\"bonsai\"]\n  ormar = [\n    \"alembic\",\n    \"ormar\",\n  ]\n  test = [\n    \"aiosqlite\",\n    \"bandit\",\n    \"black\",\n    \"httpx\",\n    \"isort\",\n    \"pytest-asyncio\",\n    \"pytest-factoryboy\",\n    \"requests\",\n  ]\n  all = [\n    \"beanie\",\n    \"aiosqlite\",\n    \"black\",\n    \"isort\",\n    \"uvicorn\",\n    \"bonsai\",\n    \"alembic\",\n    \"ormar\",\n    \"aiosqlite\",\n    \"bandit\",\n    \"black\",\n    \"httpx\",\n    \"isort\",\n    \"pytest-asyncio\",\n    \"pytest-factoryboy\",\n    \"requests\",\n  ]\n\n[project.urls]\nHomepage = \"https://freenit.org\" \nRepository = \"https://github.com/freenit-framework/backend\"\n\n[project.scripts]\nfreenit = \"freenit.cli:main\"\n\n[tool.hatch.version]\npath = \"freenit/__init__.py\"\n\n[tool.hatch.build.targets.wheel]\nonly-include = [\"freenit\", \"bin\"]\n\n[tool.hatch.build.targets.wheel.sources]\n\"src\" = \"\"\n\"bin\" = \"freenit/bin\"\n", "MANIFEST.in": "include README.md\ninclude LICENSE\ninclude alembic.ini\ninclude name.py\ninclude pytest.ini\ngraft alembic\ngraft tests\ngraft freenit/project\n", "README.md": "# Freenit Backend\n![freenit badge](https://github.com/freenit-framework/backend/actions/workflows/pythonapp.yml/badge.svg)\n\n[Documentation](https://freenit.org/backend/quickstart)\n\n[Source](https://github.com/freenit-framework/backend)\n\nFreenit is based on\n\n* [FastAPI](https://fastapi.tiangolo.com/)\n* [Ormar](https://github.com/collerek/ormar)\n* [Svelte](https://svelte.dev)\n", "setup.py": "#!/usr/bin/env python\n\nimport pathlib\n\nfrom setuptools import find_packages, setup\n\nfrom freenit import __version__\n\nPROJECT_ROOT = pathlib.Path(__file__).parent\nREADME = (PROJECT_ROOT / \"README.md\").read_text()\n\nextras_require = {\n    \"beanie\": [\n        \"beanie\",\n    ],\n    \"build\": [\n        \"twine\",\n    ],\n    \"dev\": [\n        \"aiosqlite\",\n        \"black\",\n        \"isort\",\n        \"uvicorn\",\n    ],\n    \"ldap\": [\n        \"bonsai\",\n    ],\n    \"ormar\": [\n        \"alembic\",\n        \"ormar\",\n    ],\n    \"test\": [\n        \"aiosqlite\",\n        \"bandit\",\n        \"black\",\n        \"httpx\",\n        \"isort\",\n        \"pytest-asyncio\",\n        \"pytest-factoryboy\",\n        \"requests\",\n    ],\n}\n\nextras_require[\"all\"] = (\n    extras_require[\"beanie\"] + extras_require[\"ldap\"] + extras_require[\"ormar\"]\n)\n\nsetup(\n    name=\"freenit\",\n    version=__version__,\n    description=\"REST API framework based on FastAPI\",\n    long_description=README,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/freenit-framework/backend\",\n    author=\"Goran Meki\u0107\",\n    author_email=\"meka@tilda.center\",\n    license=\"BSD\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Environment :: Web Environment\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n    ],\n    keywords=[\n        \"REST\",\n        \"openapi\",\n        \"swagger\",\n        \"fastapi\",\n    ],\n    packages=find_packages(exclude=[\"tests*\"]),\n    python_requires=\">=3.8\",\n    install_requires=[\n        \"fastapi\",\n        \"passlib\",\n        \"pydantic[email]\",\n        \"pyjwt\",\n    ],\n    extras_require=extras_require,\n    include_package_data=True,\n    package_data={\n        \"\": [\n            \"project/*\",\n            \"project/ansible/group_vars/*\",\n            \"project/ansible/inventory/*\",\n            \"project/ansible/roles/devel/*\",\n            \"project/ansible/roles/devel/tasks/*\",\n            \"project/ansible/roles/devel/vars/*\",\n            \"project/bin/*\",\n            \"project/project/*\",\n            \"project/project/api/*\",\n            \"project/project/models/*\",\n            \"project/templates/*\",\n        ]\n    },\n    scripts=[\"bin/freenit.sh\"],\n)\n", ".gitignore": ".coverage\n.pytest_cache\n__pycache__\n*.py[c,o]\n\nansible/group_vars/all\nansible/inventory/inventory\nansible/roles/*\nansible/site.yml\n!ansible/roles/.keep\n!ansible/roles/devel\n\nbuild\ncbsd.conf\ncoverage.xml\nfstab\njunit.xml\nlocal_config.py\nproject.mk\nsite.retry\nvars.mk\n\ndist/\n*.egg-info/\n*.sqlite\n", "requirements.yml": "- onelove-roles.freebsd-common\n- onelove-roles.freebsd_freenit\n- onelove-roles.freebsd_freenit_sql\n- onelove-roles.freebsd_freenit_ldap\n", "setup.cfg": "[flake8]\nmax-line-length = 100\n\n[isort]\nprofile = black\n", "main.py": "from freenit.config import getConfig\n\nconfig = getConfig()\nprint()\nprint(f\"    http://{config.hostname}:{config.port}/api/v1/docs\")\nprint(f\"    http://{config.hostname}:{config.port}/api/v1/redoc\")\nprint()\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(\n        \"freenit.app:app\",\n        host=\"0.0.0.0\",\n        port=config.port,\n        log_level=\"info\",\n        reload=True,\n    )\n", "name.py": "app_name=\"freenit\"\n", "bin": {}, "common.sh": "#!/bin/sh\n\n\nexport BIN_DIR=`dirname $0`\nexport PROJECT_ROOT=\"${BIN_DIR}/..\"\n. \"${PROJECT_ROOT}/name.py\"\nexport VIRTUALENV=${VIRTUALENV:=\"${app_name}\"}\nexport FREENIT_ENV=${FREENIT_ENV:=\"prod\"}\nexport SYSPKG=${SYSPKG:=\"no\"}\nexport SYSPKG=`echo ${SYSPKG} | tr '[:lower:]' '[:upper:]'`\nexport DB_TYPE=${DB_TYPE:=\"ormar\"}\nexport PIP_INSTALL=\"pip install -U --upgrade-strategy eager\"\nexport OFFLINE=${OFFLINE:=\"no\"}\n\n\nsetup() {\n  cd ${PROJECT_ROOT}\n  if [ \"${SYSPKG}\" != \"YES\" ]; then\n    if [ ! -d ${HOME}/.virtualenvs/${VIRTUALENV} ]; then\n        python${PY_VERSION} -m venv \"${HOME}/.virtualenvs/${VIRTUALENV}\"\n    fi\n    . ${HOME}/.virtualenvs/${VIRTUALENV}/bin/activate\n\n    if [ \"${1}\" != \"no\" -a \"${OFFLINE}\" != \"yes\" ]; then\n      ${PIP_INSTALL} pip wheel\n      ${PIP_INSTALL} -e \".[${DB_TYPE},${FREENIT_ENV}]\"\n    fi\n  fi\n\n  if [ \"${DB_TYPE}\" = \"ormar\" ]; then\n    if [ ! -e \"alembic/versions\" ]; then\n      mkdir alembic/versions\n      alembic revision --autogenerate -m initial\n    fi\n    alembic upgrade head\n  fi\n}\n", "init.sh": "#!/bin/sh\n\nexport OFFLINE=${OFFLINE:=\"no\"}\nBIN_DIR=`dirname $0`\n. ${BIN_DIR}/common.sh\n\n\nsetup\n", "devel.sh": "#!/bin/sh\n\nBIN_DIR=`dirname $0`\nexport FREENIT_ENV=\"all\"\nexport OFFLINE=${OFFLINE:=\"no\"}\n\n\n. ${BIN_DIR}/common.sh\nsetup\n\nexport FREENIT_ENV=\"dev\"\n\nif [ ! -e \"alembic/versions\" ]; then\n  mkdir -p alembic/versions\n  alembic revision --autogenerate -m initial\nfi\nalembic upgrade head\n\necho \"Backend\"\necho \"===============\"\npython main.py\n", "publish.sh": "#!/bin/sh\n\n\nset -e\n\nexport BIN_DIR=`dirname $0`\nexport PROJECT_ROOT=\"${BIN_DIR}/..\"\nexport FREENIT_ENV=\"build\"\n. ${BIN_DIR}/common.sh\nsetup no\n\n\ntwine upload dist/freenit-* --verbose\n", "build.sh": "#!/bin/sh\n\nBIN_DIR=`dirname $0`\nPROJECT_DIR=\"${BIN_DIR}\"\nexport FREENIT_ENV=\"build\"\n. ${BIN_DIR}/common.sh\n\n\nsetup\npip install hatchling\n\n\nrm -rf *.egg-info build dist\nfind . -name '*.pyc' -exec rm -rf {} \\;\nhatchling build\n", "freenit.sh": "#!/bin/sh\n\nset -e\n\n\nhelp() {\n  echo \"Usage: $0 <type> <name>\"\n  echo \"  type: project, backend, frontend\"\n  echo \"  name: name used everywhere in the project\"\n\n}\n\n\nif [ \"${1}\" = \"--version\" ]; then\n  python${PY_VERSION} -c 'from freenit import __version__; print(__version__)'\n  exit 0\nfi\n\n\nTYPE=\"${1}\"\nif [ -z \"${TYPE}\" ]; then\n  help >&2\n  exit 1\nfi\n\ncase \"${TYPE}\" in\n  project|backend|frontend)\n    ;;\n  *)\n    help >&2\n    exit 1\n    ;;\nesac\nshift\n\nNAME=\"${1}\"\nif [ -z \"${NAME}\" ]; then\n  help >&2\n  exit 1\nfi\nshift\n\nexport SED_CMD=\"sed -i\"\n\nbackend() {\n  PROJECT_ROOT=`python${PY_VERSION} -c 'import os; import freenit; print(os.path.dirname(os.path.abspath(freenit.__file__)))'`\n\n  mkdir \"${NAME}\"\n  cd \"${NAME}\"\n  cp -r ${PROJECT_ROOT}/project/* .\n  case `uname` in\n    *BSD)\n      ${SED_CMD} '' -e \"s/NAME/${NAME}/g\" main.py\n      ${SED_CMD} '' -e \"s/NAME/${NAME}/g\" pyproject.toml\n      ;;\n    *)\n      ${SED_CMD} -e \"s/NAME/${NAME}/g\" main.py\n      ${SED_CMD} -e \"s/NAME/${NAME}/g\" pyproject.toml\n      ;;\n  esac\n  mv project ${NAME}\n  echo \"app_name=\\\"${NAME}\\\"  # noqa: E225\" >name.py\n  echo \"DEVEL_MODE = YES\" >vars.mk\n  echo \"# ${NAME}\" >README.md\n\n\n  cat >Makefile<< EOF\n.include <name.py>\n\nSYSPKG = YES\nUSE_FREENIT = YES\nSERVICE != echo \\${app_name}\nREGGAE_PATH := /usr/local/share/reggae\n\n.include <\\${REGGAE_PATH}/mk/service.mk>\nEOF\n\n  mkdir -p templates ansible\n  cd ansible\n  mkdir -p group_vars inventory roles\n  touch group_vars/.keep inventory/.keep roles/.keep\n  cd ..\n  echo \".include <\\${REGGAE_PATH}/mk/ansible.mk>\" >provisioners.mk\n\n  cat >requirements.yml<<EOF\n- onelove-roles.freebsd-common\n- onelove-roles.freebsd_freenit\nEOF\n\n  cat >templates/site.yml.tpl<<EOF\n# -*- mode: ansible -*-\n# vi: set ft=ansible :\n\n---\n- name: SERVICE provisioning\n  hosts: SERVICE\n  roles:\n    - onelove-roles.freebsd-common\n    - onelove-roles.freebsd_freenit\nEOF\n\n  cat >alembic/env.py<<EOF\nimport os\nimport sys\n\nimport ${NAME}.app\nfrom ${NAME}.config import getConfig\nfrom alembic import context\nfrom freenit.migration import run_migrations_offline, run_migrations_online\n\n\nsys.path.append(os.getcwd())\nconfig = getConfig()\n\n\nif context.is_offline_mode():\n    run_migrations_offline(config)\nelse:\n    run_migrations_online(config)\nEOF\n\n  cat >.gitignore<<EOF\n.coverage\n.pytest_cache\n__pycache__\n*.py[c,o]\n\nansible/group_vars/all\nansible/inventory/inventory\nansible/roles/*\nansible/site.yml\n!ansible/roles/.keep\n!ansible/roles/devel\n\nalembic/versions/*\nbuild\ncbsd.conf\ncoverage.xml\nfstab\njunit.xml\nlocal_config.py\nproject.mk\nsite.retry\nvars.mk\n\ndist/\n*.egg-info/\n*.sqlite\nEOF\n\n  echo \"Success! Please edit setup.py!\"\n  cd ..\n}\n\n\nfrontend_common() {\n  echo \"# ${NAME}\" >README.md\n  npm install --save-dev chota\n\n  mkdir bin\n  cd bin\n  cat >common.sh<<EOF\n#!/bin/sh\n\n\nexport BIN_DIR=\\`dirname \\$0\\`\nexport PROJECT_ROOT=\"\\${BIN_DIR}/..\"\nexport OFFLINE=\\${OFFLINE:=no}\n\n\nsetup() {\n  cd \\${PROJECT_ROOT}\n  update=\\${1}\n  if [ \"\\${OFFLINE}\" != \"yes\" -a \"\\${update}\" != \"no\" ]; then\n    npm install\n  fi\n}\nEOF\n\n  cat >init.sh<<EOF\n#!/bin/sh\n\n\nexport OFFLINE=\\${OFFLINE:=no}\nBIN_DIR=\\`dirname \\$0\\`\n. \\${BIN_DIR}/common.sh\n\nsetup\nEOF\n  chmod +x init.sh\n\n  cat >test.sh<<EOF\n#!/bin/sh\n\n\nBIN_DIR=\\`dirname \\$0\\`\n. \"\\${BIN_DIR}/common.sh\"\nsetup\n\nenv CI=true npm run test\nEOF\n  chmod +x test.sh\n\n  cat >collect.sh<<EOF\n#!/bin/sh\n\n\nBIN_DIR=\\`dirname \\$0\\`\n. \"\\${BIN_DIR}/common.sh\"\nsetup\n\n\necho \"Frontend\"\necho \"========\"\ncd \"\\${PROJECT_ROOT}\"\nrm -rf build\nnpm run build\ntouch build/.keep\nEOF\n  chmod +x collect.sh\n\n  cd ..\n\n  echo \"app_name=\\\"${NAME}\\\"\" >name.ini\n  cat >Makefile<<EOF\n.include <name.ini>\n\nSYSPKG = YES\nUSE_FREENIT = YES\nSERVICE != echo \\${app_name}front\nREGGAE_PATH := /usr/local/share/reggae\nDEVEL_MODE = YES\n\n.include <\\${REGGAE_PATH}/mk/service.mk>\nEOF\n\n  mkdir -p templates ansible\n  cd ansible\n  mkdir -p group_vars inventory roles\n  touch group_vars/.keep inventory/.keep roles/.keep\n  cd ..\n  echo \".include <\\${REGGAE_PATH}/mk/ansible.mk>\" >provisioners.mk\n\n  cat >requirements.yml<<EOF\n- onelove-roles.freebsd-common\n- onelove-roles.freebsd_node\n- onelove-roles.freebsd_pm2\nEOF\n\n  cat >templates/site.yml.tpl<<EOF\n# -*- mode: ansible -*-\n# vi: set ft=ansible :\n\n---\n- name: SERVICE provisioning\n  hosts: SERVICE\n  roles:\n    - onelove-roles.freebsd-common\n    - onelove-roles.freebsd_node\n    - onelove-roles.freebsd_pm2\nEOF\n\n  cat >.gitignore<<EOF\nnode_modules\n\n# Output\n.output\n.vercel\n/.svelte-kit\n/build\n/dist\n\n# OS\n.DS_Store\nThumbs.db\n\n# Env\n.env\n.env.*\n!.env.example\n!.env.test\n\n# Vite\nvite.config.js.timestamp-*\nvite.config.ts.timestamp-*\n\n# Reggae\n.provisioned\nansible/group_vars/all\nansible/inventory/inventory\nansible/roles/*\nansible/site.yml\n!ansible/roles/.keep\n!ansible/roles/freenit\nbuild/\ncbsd.conf\nsite.retry\nproject.mk\nvars.mk\nEOF\n}\n\nfrontend() {\n  npm create svelte \"${NAME}\"\n  cd \"${NAME}\"\n  case `uname` in\n    *BSD)\n      ${SED_CMD} '' -e \"s/export default defineConfig/const config = defineConfig/\" vite.config.ts\n      ${SED_CMD} '' -e \"s/^}//\" package.json\n      ${SED_CMD} '' -e 's/\"type\": \"module\"/\"type\": \"module\",/' package.json\n      ${SED_CMD} '' -e \"s/adapter-auto/adapter-node/\" svelte.config.js\n      ;;\n    *)\n      ${SED_CMD} -e \"s/export default defineConfig/const config = defineConfig/\" vite.config.ts\n      ${SED_CMD} -e \"s/^}//\" package.json\n      ${SED_CMD} -e 's/\"type\": \"module\"/\"type\": \"module\",/' package.json\n      ${SED_CMD} -e \"s/adapter-auto/adapter-node/\" svelte.config.js\n      ;;\n  esac\n  cat >>vite.config.ts<<EOF\nif (process.env.BACKEND_URL) {\n  config.server = {\n    proxy: {\n      '/api': {\n        target: process.env.BACKEND_URL,\n        changeOrigin: true,\n      }\n    }\n  }\n}\n\nexport default config\nEOF\n\n  cat >>package.json<<EOF\n  \"overrides\": {\n    \"rollup\": \"npm:@rollup/wasm-node\"\n  }\n}\nEOF\n  cat >.prettierrc<<EOF\n{\n  \"useTabs\": false,\n  \"singleQuote\": true,\n  \"trailingComma\": \"all\",\n  \"printWidth\": 80,\n  \"semi\": false,\n}\nEOF\n  npm install\n  frontend_common\n  npm install --save-dev @zerodevx/svelte-toast @freenit-framework/svelte-base @sveltejs/adapter-node @mdi/js\n\n  rm -rf src/lib\n  rm -rf src/routes/about src/routes/sverdle src/routes/*.svelte\n\n  cat >src/routes/styles.css<<EOF\n:root {\n  font-family: Arial, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,\n    Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\n\nbody {\n  min-height: 100vh;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --bg-color: #ffffff;\n  --bg-secondary-color: #f3f3f6;\n  --color-primary: #14854F;\n  --color-lightGrey: #d2d6dd;\n  --color-grey: #747681;\n  --color-darkGrey: #3f4144;\n  --color-error: #d43939;\n  --color-success: #28bd14;\n  --grid-maxWidth: 120rem;\n  --grid-gutter: 2rem;\n  --font-size: 1.6rem;\n  --font-color: #333333;\n  --font-family-sans: sans-serif;\n  --font-family-mono: monaco, \"Consolas\", \"Lucida Console\", monospace;\n}\nEOF\n\n  cat >src/routes/+layout.svelte<<EOF\n<script>\n  import './styles.css'\n  import 'chota'\n  import { store } from '@freenit-framework/svelte-base'\n  import { SvelteToast } from '@zerodevx/svelte-toast'\n\n  const options = {}\n\n  // First invocation of this function creates store, next invocations return\n  // existing one, so only first invocation takes \"prefix\" argument into account\n  store('/api/v1')\n</script>\n\n<svelte:head>\n  <title>Freenit App</title>\n  <meta name=\"Freenit\" content=\"Freenit for Svelte\" />\n</svelte:head>\n\n<SvelteToast {options} />\n<div class=\"main\">\n  <slot />\n</div>\n\n<style>\n  .main {\n    height: 100vh;\n    width: 100vw;\n  }\n</style>\nEOF\n\n  echo '<div class=\"root\">Landing Page in src/routes/+page.svelte</div>' >src/routes/+page.svelte\n\n  mkdir src/routes/login\n  cat >src/routes/login/+page.svelte <<EOF\n<script lang=\"ts\">\n  import { Login } from '@freenit-framework/svelte-base'\n</script>\n\n<Login />\nEOF\n\n  mkdir src/routes/register\n  cat >src/routes/register/+page.svelte <<EOF\n<script lang=\"ts\">\n  import { Register } from '@freenit-framework/svelte-base'\n</script>\n\n<Register />\nEOF\n\n  mkdir -p 'src/routes/verify/[token]'\n  cat >'src/routes/verify/[token]/+page.svelte' <<EOF\n<script lang=\"ts\">\n  import { onMount } from 'svelte'\n  import { page } from '\\$app/stores'\n  import { goto } from '\\$app/navigation'\n  import { store } from '@freenit-framework/svelte-base'\n\n  onMount(async () => {\n    const response = await store().auth.verify(\\$page.params.token)\n    if (response.ok) {\n      goto('/login')\n    }\n  })\n</script>\nEOF\n  cat >'src/routes/verify/+page.svelte' <<EOF\n<div class=\"root\">\n  <h1>Welcome</h1>\n  <p>You should receive email to verify your account shortly!</p>\n</div>\n\n<style>\n  .root {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    height: 100%;\n  }\n</style>\nEOF\n\n  npm run format\n  cd bin\n  cat >devel.sh<<EOF\n#!/bin/sh\n\n\nBIN_DIR=\\`dirname \\$0\\`\n. \"\\${BIN_DIR}/common.sh\"\nsetup\n\necho \"Frontend\"\necho \"========\"\nenv BACKEND_URL=\\${BACKEND_URL} npm run dev -- --host 0.0.0.0\nEOF\n  chmod +x devel.sh\n  cd ../..\n}\n\nproject() {\n  echo \"Creating project\"\n  mkdir \"${NAME}\"\n  cd \"${NAME}\"\n  echo \"# ${NAME}\" >README.md\n\n  echo \"Creating bin\"\n  mkdir bin\n  cd bin\n  cat >devel.sh<<EOF\n#!/bin/sh\n\nexport BIN_DIR=\\`dirname \\$0\\`\nexport PROJECT_ROOT=\"\\${BIN_DIR}/..\"\n. \"\\${PROJECT_ROOT}/services/backend/name.py\"\nexport backend_app_name=\\${app_name}\nexport OFFLINE=\\${OFFLINE:=\"no\"}\nexport SYSPKG=\\${SYSPKG:=\"no\"}\nRAW_SERVICES=\\$@\nexport SERVICES=\\${RAW_SERVICES:=\"backend frontend\"}\nfirstone=\"yes\"\n\nif [ \"\\${REGGAE}\" != \"yes\" ]; then\n  \"\\${BIN_DIR}/download_repos.sh\"\nfi\n\nfor service in \\${SERVICES}; do\n  if [ \"backend\" = \"\\${service}\" ]; then\n    firstone=\"no\"\n    if [ \"\\${REGGAE}\" = \"yes\" ]; then\n      export backend_hostname=\\$(sudo cbsd jexec user=devel \"jname=\\${backend_app_name}\" hostname)\n      sudo tmux new-session -s \"\\${backend_app_name}\" -d \"make -C services/\\${service} devel offline=\\${OFFLINE}\"\n    else\n      export backend_hostname=\"localhost\"\n      tmux new-session -s \"\\${backend_app_name}\" -d \"env OFFLINE=\\${OFFLINE} SYSPKG=\\${SYSPKG} \\${PROJECT_ROOT}/services/\\${service}/bin/devel.sh\"\n    fi\n  fi\ndone\n\nfor service in \\${SERVICES}; do\n  if [ \"backend\" = \"\\${service}\" ]; then\n    continue\n  fi\n  if [ \"\\${firstone}\" = \"yes\" ]; then\n    firstone=\"no\"\n    if [ \"\\${REGGAE}\" = \"yes\" ]; then\n      sudo tmux new-session -s \"\\${backend_app_name}\" -d \"make -C services/\\${service} devel offline=\\${OFFLINE}\"\n    else\n      tmux new-session -s \"\\${backend_app_name}\" -d \"env OFFLINE=\\${OFFLINE} SYSPKG=\\${SYSPKG} \\${PROJECT_ROOT}/services/\\${service}/bin/devel.sh\"\n    fi\n  else\n    if [ \"\\${REGGAE}\" = \"yes\" ]; then\n      sudo tmux split-window -h -p 50 -t 0 \"make -C services/\\${service} BACKEND_URL=http://\\${backend_hostname}:5000 devel offline=\\${OFFLINE}\"\n    else\n      tmux split-window -h -p 50 -t 0 \"env OFFLINE=\\${OFFLINE} BACKEND_URL=http://\\${backend_hostname}:5000 \\${PROJECT_ROOT}/services/\\${service}/bin/devel.sh\"\n    fi\n  fi\ndone\n\nif [ \"\\${REGGAE}\" = \"yes\" ]; then\n  sudo tmux select-layout tiled\n  sudo tmux a -t \"\\${backend_app_name}\"\nelse\n  tmux select-layout tiled\n  tmux a -t \"\\${backend_app_name}\"\nfi\nEOF\n  chmod +x devel.sh\n\n  cat >download_repos.sh<<EOF\n#!/bin/sh\n\nexport BIN_DIR=\\`dirname \\$0\\`\nexport PROJECT_ROOT=\"\\${BIN_DIR}/..\"\n\nif [ ! -d \"\\${PROJECT_ROOT}/services\" ]; then\n  mkdir \"\\${PROJECT_ROOT}/services\"\nfi\n\nif [ ! -d \"\\${PROJECT_ROOT}/services/backend\" ]; then\n  git clone https://github.com/freenit-framework/backend \"\\${PROJECT_ROOT}/services/backend\"\n\nfi\nif [ ! -d \"\\${PROJECT_ROOT}/services/frontend\" ]; then\n  git clone https://github.com/freenit-framework/frontend \"\\${PROJECT_ROOT}/services/frontend\"\nfi\nEOF\n  chmod +x download_repos.sh\n\n  cat >update_repos.sh<<EOF\n#!/bin/sh\n\nexport BIN_DIR=\\`dirname \\$0\\`\nexport PROJECT_ROOT=\"\\${BIN_DIR}/..\"\nSERVICES_ROOT=\"\\${PROJECT_ROOT}/services\"\n\ncd \"\\${SERVICES_ROOT}\"\nls -1 | while read service; do\n  echo \"\\${service}\"\n  cd \"\\${service}\"\n  git pull\n  cd -\ndone\ncd ..\ngit pull\nEOF\n  chmod +x update_repos.sh\n  cd ..\n\n  cat >Makefile<<EOF\nREGGAE_PATH = /usr/local/share/reggae\n# USE = letsencrypt nginx\nSERVICES += backend https://github.com/freenit-framework/backend\nSERVICES += frontend https://github.com/freenit-framework/frontend\nUSE_FREENIT = YES\n\n.include <\\${REGGAE_PATH}/mk/project.mk>\nEOF\n\n  cat >.gitignore<<EOF\nservices/\nvars.mk\nEOF\n\n  echo \"Creating services\"\n  mkdir services\n  cd services\n\n  echo \"Creating backend\"\n  backend\n  mv \"${NAME}\" backend\n\n  echo \"Creating frontend\"\n  frontend\n  mv \"${NAME}\" frontend\n  cd ..\n}\n\n\n${TYPE}\n", "security.sh": "#!/bin/sh\n\nBIN_DIR=`dirname $0`\nexport FREENIT_ENV=\"test\"\n. ${BIN_DIR}/common.sh\n\n\nsetup no\nbandit `find freenit -type f -name '*.py' | grep -v 'freenit/cli\\.py'`\n", "test.sh": "#!/bin/sh\n\nBIN_DIR=`dirname $0`\nexport FREENIT_ENV=\"test\"\n. ${BIN_DIR}/common.sh\n\n\nsetup\npytest -v -rs --ignore=freenit/project/\n", "freenit": {}, "mail.py": "from smtplib import SMTP\n\nfrom freenit.config import getConfig\n\nconfig = getConfig()\n\n\ndef sendmail(to, message):\n    mail = config.mail\n    server = SMTP(host=mail.server, port=mail.port)\n    if mail.tls:\n        server.ehlo()\n        server.starttls()\n        server.ehlo()\n    server.login(mail.user, mail.password)\n    server.sendmail(message[\"From\"], to, message.as_string().encode(\"utf-8\"))\n", "auth.py": "import pytest\n\nfrom freenit.models.user import User\n\nfrom . import factories\n\n\n@pytest.mark.asyncio\nclass TestAuth:\n    async def test_login(self, client):\n        user: User = factories.User()\n        await user.save()\n        response = client.login(user=user)\n\n        assert response.status_code == 200\n\n    async def test_register(self, client):\n        data = {\n            \"email\": \"user3@example.com\",\n            \"password\": \"Sekrit\",\n        }\n        response = client.post(\"/auth/register\", data=data)\n        assert response.status_code == 200\n\n    async def test_refresh(self, client):\n        user: User = factories.User()\n        await user.save()\n        client.login(user=user)\n        response = client.post(\"/auth/refresh\")\n        assert response.status_code == 200\n", "config.py": "import socket\nfrom importlib import import_module\n\nimport databases\nimport sqlalchemy\n\nsecond = 1\nminute = 60 * second\nhour = 60 * minute\nday = 24 * hour\nyear = 365 * day\nregister_message = \"\"\"Hello,\n\nPlease confirm user registration by following this link\n\n{}\n\nRegards,\nFreenit\n\"\"\"\n\n\nclass Auth:\n    def __init__(self, secure=True, expire=hour, refresh_expire=year) -> None:\n        self.secure = secure\n        self.expire = expire\n        self.refresh_expire = refresh_expire\n\n\nclass Mail:\n    def __init__(\n        self,\n        server=\"mail.example.com\",\n        user=\"user@example.com\",\n        password=\"Sekrit\",  # nosec\n        port=587,\n        tls=True,\n        from_addr=\"no-reply@mail.com\",\n        register_subject=\"[Freenit] User Registration\",\n        register_message=register_message,\n        master_user=\"dovecot@example.com\",\n        master_pw=\"Sekrit\",\n    ) -> None:\n        self.server = server\n        self.user = user\n        self.password = password\n        self.port = port\n        self.tls = tls\n        self.from_addr = from_addr\n        self.register_subject = register_subject\n        self.register_message = register_message\n        self.master_user = master_user\n        self.master_pw = master_pw\n\n\nclass LDAP:\n    def __init__(\n        self,\n        host=\"ldap.example.com\",\n        tls=True,\n        base=\"uid={},ou={},dc=account,dc=ldap\",\n        service_dn=\"cn=freenit,dc=service,dc=ldap\",\n        service_pw=\"\",\n        userClasses=[\"pilotPerson\", \"posixAccount\"],\n        groupClasses=[\"groupOfUniqueNames\"],\n    ):\n        self.host = host\n        self.tls = tls\n        self.base = base\n        self.service_dn = service_dn\n        self.service_pw = service_pw\n        self.userClasses = userClasses\n        self.groupClasses = groupClasses\n\n\nclass BaseConfig:\n    name = \"Freenit\"\n    version = \"0.0.1\"\n    api_root = \"/api/v1\"\n    hostname = socket.gethostname()\n    port = 5000\n    debug = False\n    metadata = sqlalchemy.MetaData()\n    dburl = \"sqlite:///db.sqlite\"\n    database = None\n    engine = None\n    secret = \"SECRET\"  # nosec\n    user = \"freenit.models.sql.user\"\n    role = \"freenit.models.sql.role\"\n    theme = \"freenit.models.sql.theme\"\n    theme_name = \"Freenit\"\n    meta = None\n    auth = Auth()\n    mail = Mail()\n    ldap = LDAP()\n\n    def __init__(self):\n        self.database = databases.Database(self.dburl)\n        self.engine = sqlalchemy.create_engine(self.dburl)\n\n    def __repr__(self):\n        return (\n            f\"<{self.envname()} config: {self.name}({self.version}) on {self.hostname}>\"\n        )\n\n    def get_model(self, model):\n        mymodel = getattr(self, model)\n        return import_module(mymodel)\n\n    @classmethod\n    def envname(cls):\n        classname = cls.__name__.lower()\n        if classname.endswith(\"config\"):\n            return classname[: -len(\"config\")]\n        return classname\n\n\nclass DevConfig(BaseConfig):\n    debug = True\n    dburl = \"sqlite:///db.sqlite\"\n    auth = Auth(secure=False)\n    mail = None\n\n\nclass TestConfig(BaseConfig):\n    debug = True\n    dburl = \"sqlite:///test.sqlite\"\n    auth = Auth(secure=False)\n    mail = None\n\n\nclass ProdConfig(BaseConfig):\n    secret = \"MORESECURESECRET\"  # nosec\n", "base_config.py": "import socket\nfrom importlib import import_module\n\nimport databases\nimport sqlalchemy\n\nsecond = 1\nminute = 60 * second\nhour = 60 * minute\nday = 24 * hour\nyear = 365 * day\nregister_message = \"\"\"Hello,\n\nPlease confirm user registration by following this link\n\n{}\n\nRegards,\nFreenit\n\"\"\"\n\n\nclass Auth:\n    def __init__(self, secure=True, expire=hour, refresh_expire=year) -> None:\n        self.secure = secure\n        self.expire = expire\n        self.refresh_expire = refresh_expire\n\n\nclass Mail:\n    def __init__(\n        self,\n        server=\"mail.example.com\",\n        user=\"user@example.com\",\n        password=\"Sekrit\",  # nosec\n        port=587,\n        tls=True,\n        from_addr=\"no-reply@mail.com\",\n        register_subject=\"[Freenit] User Registration\",\n        register_message=register_message,\n        master_user=\"dovecot@example.com\",\n        master_pw=\"Sekrit\",\n    ) -> None:\n        self.server = server\n        self.user = user\n        self.password = password\n        self.port = port\n        self.tls = tls\n        self.from_addr = from_addr\n        self.register_subject = register_subject\n        self.register_message = register_message\n        self.master_user = master_user\n        self.master_pw = master_pw\n\n\nclass LDAP:\n    def __init__(\n        self,\n        host=\"ldap.example.com\",\n        tls=True,\n        base=\"uid={},ou={},dc=account,dc=ldap\",\n        service_dn=\"cn=freenit,dc=service,dc=ldap\",\n        service_pw=\"\",\n        userClasses=[\"pilotPerson\", \"posixAccount\"],\n        groupClasses=[\"groupOfUniqueNames\"],\n    ):\n        self.host = host\n        self.tls = tls\n        self.base = base\n        self.service_dn = service_dn\n        self.service_pw = service_pw\n        self.userClasses = userClasses\n        self.groupClasses = groupClasses\n\n\nclass BaseConfig:\n    name = \"Freenit\"\n    version = \"0.0.1\"\n    api_root = \"/api/v1\"\n    hostname = socket.gethostname()\n    port = 5000\n    debug = False\n    metadata = sqlalchemy.MetaData()\n    dburl = \"sqlite:///db.sqlite\"\n    database = None\n    engine = None\n    secret = \"SECRET\"  # nosec\n    user = \"freenit.models.sql.user\"\n    role = \"freenit.models.sql.role\"\n    theme = \"freenit.models.sql.theme\"\n    theme_name = \"Freenit\"\n    meta = None\n    auth = Auth()\n    mail = Mail()\n    ldap = LDAP()\n\n    def __init__(self):\n        self.database = databases.Database(self.dburl)\n        self.engine = sqlalchemy.create_engine(self.dburl)\n\n    def __repr__(self):\n        return (\n            f\"<{self.envname()} config: {self.name}({self.version}) on {self.hostname}>\"\n        )\n\n    def get_model(self, model):\n        mymodel = getattr(self, model)\n        return import_module(mymodel)\n\n    @classmethod\n    def envname(cls):\n        classname = cls.__name__.lower()\n        if classname.endswith(\"config\"):\n            return classname[: -len(\"config\")]\n        return classname\n\n\nclass DevConfig(BaseConfig):\n    debug = True\n    dburl = \"sqlite:///db.sqlite\"\n    auth = Auth(secure=False)\n    mail = None\n\n\nclass TestConfig(BaseConfig):\n    debug = True\n    dburl = \"sqlite:///test.sqlite\"\n    auth = Auth(secure=False)\n    mail = None\n\n\nclass ProdConfig(BaseConfig):\n    secret = \"MORESECURESECRET\"  # nosec\n", "__init__.py": "from freenit.models.user import User\n\nif User.dbtype() == \"sql\":\n    from .sql import UserListAPI, UserDetailAPI, ProfileDetailAPI\nelif User.dbtype() == \"ldap\":\n    from .ldap import UserListAPI, UserDetailAPI, ProfileDetailAPI\n", "cli.py": "import pathlib\nimport subprocess\n\nfrom prompt_toolkit import prompt\n\n\ndef main():\n    path = pathlib.Path(__file__).parent.resolve()\n    project_name = prompt(\"Name of the project: \")\n    subprocess.run([f\"{path}/../bin/freenit.sh\", \"project\", project_name])\n", "app.py": "from contextlib import asynccontextmanager\nfrom fastapi import FastAPI\n\nfrom .config import getConfig\n\nfrom .api import api\n\nconfig = getConfig()\n# TODO: ps. \u0432 \u0438\u0434\u0435\u0430\u043b\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c FastAPI \u043d\u0430 Falcon\n\n@asynccontextmanager\nasync def lifespan(_: FastAPI):\n    if not config.database.is_connected:\n        await config.database.connect()\n    yield\n    if config.database.is_connected:\n        await config.database.disconnect()\n\n\napp = FastAPI(lifespan=lifespan)\napp.mount(config.api_root, api)\n", "permissions.py": "from freenit.auth import permissions\n\nrole_perms = permissions()\nprofile_perms = permissions()\nuser_perms = permissions()\ntheme_perms = permissions()\n", "migration.py": "from logging.config import fileConfig\n\nimport freenit.app\nfrom alembic import context\n\nfrom .models import *\n\nfileConfig(context.config.config_file_name)\n\n\ndef run_migrations_offline(config):\n    context.configure(\n        url=config.dburl,\n        target_metadata=config.metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n        user_module_prefix=\"sa.\",\n    )\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online(config):\n    connectable = config.engine\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection,\n            target_metadata=config.metadata,\n            user_module_prefix=\"sa.\",\n        )\n        with context.begin_transaction():\n            context.run_migrations()\n", "decorators.py": "import functools\n\n\ndef FreenitAPI(app):\n    class route:\n        def __init__(self, route, tags=[\"object\"]):\n            self.app = app\n            self.route = route\n            self.tags = tags\n\n        def __call__(self, cls):\n            origGet = getattr(cls, \"get\", None)\n            origPost = getattr(cls, \"post\", None)\n            origPatch = getattr(cls, \"patch\", None)\n            origDelete = getattr(cls, \"delete\", None)\n\n            class Wrapped(cls):\n                tags = self.tags\n                tag = tags[0]\n                if callable(origGet):\n                    _deco = self.app.get(\n                        self.route,\n                        summary=getattr(origGet, \"description\", f\"Get {tag}\"),\n                        tags=tags,\n                    )\n                    get = _deco(origGet)\n                if callable(origPost):\n                    _deco = self.app.post(\n                        self.route,\n                        summary=getattr(origPost, \"description\", f\"Create {tag}\"),\n                        tags=tags,\n                    )\n                    post = _deco(origPost)\n                if callable(origPatch):\n                    _deco = self.app.patch(\n                        self.route,\n                        summary=getattr(origPatch, \"description\", f\"Edit {tag}\"),\n                        tags=tags,\n                    )\n                    patch = _deco(origPatch)\n                if callable(origDelete):\n                    _deco = self.app.delete(\n                        self.route,\n                        summary=getattr(origDelete, \"description\", f\"Destroy {tag}\"),\n                        tags=tags,\n                    )\n                    delete = _deco(origDelete)\n                _deco = None\n\n            return Wrapped\n\n    return route\n\n\ndef description(desc: str):\n    def decorator(func):\n        @functools.wraps(func)\n        async def endpoint(*args, **kwargs):\n            return await func(*args, **kwargs)\n\n        setattr(endpoint, \"description\", desc)\n        return endpoint\n\n    return decorator\n", "tests": {}, "conftest.py": "import importlib\nimport os\n\nimport pytest\n\nfrom alembic import command\nfrom alembic.config import Config\nfrom name import app_name\n\nfrom .client import Client\n\nalembic_cfg = Config(\"alembic.ini\")\n\nos.environ[\"FREENIT_ENV\"] = \"test\"\n\n\n@pytest.fixture\ndef db_setup():\n    app = importlib.import_module(f\"{app_name}.app\")\n    command.upgrade(alembic_cfg, \"head\")\n\n    yield app.app\n\n    current_path = os.path.dirname(__file__)\n    os.remove(f\"{current_path}/../test.sqlite\")\n\n\n@pytest.fixture\ndef client(db_setup):\n    return Client(db_setup)\n", "test_user.py": "import pytest\n\nfrom freenit.models.user import User\n\nfrom . import factories\n\n\n@pytest.mark.asyncio\nclass TestUser:\n    async def test_get_profile(self, client):\n        user: User = factories.User()\n        await user.save()\n        client.login(user=user)\n        response = client.get(\"/profile\")\n        assert response.status_code == 200\n\n    async def test_patch_profile(self, client):\n        admin: User = factories.User()\n        await admin.save()\n        client.login(user=admin)\n        data = {\n            \"password\": \"Sekrit\",\n            \"email\": \"user2@example.com\",\n        }\n        response = client.patch(\"/profile\", data=data)\n        assert response.status_code == 200\n        assert response.json()[\"email\"] == data[\"email\"]\n\n    async def test_get_user_list(self, client):\n        admin: User = factories.User()\n        await admin.save()\n        client.login(user=admin)\n        response = client.get(f\"/users\")\n        assert response.status_code == 200\n\n    async def test_get_user_by_id(self, client):\n        admin: User = factories.User()\n        await admin.save()\n        client.login(user=admin)\n        response = client.get(f\"/users/{admin.id}\")\n        assert response.status_code == 200\n\n    async def test_delete_user(self, client):\n        admin: User = factories.User()\n        await admin.save()\n        client.login(user=admin)\n        user: User = factories.User()\n        await user.save()\n        response = client.delete(f\"/users/{user.id}\")\n        assert response.status_code == 200\n\n    async def test_edit_user(self, client):\n        admin: User = factories.User()\n        await admin.save()\n        client.login(user=admin)\n        data = {\n            \"password\": \"Sekrit\",\n            \"email\": \"user2@example.com\",\n        }\n        response = client.patch(f\"/users/{admin.id}\", data=data)\n        assert response.status_code == 200\n        assert response.json()[\"email\"] == data[\"email\"]\n", "test_auth.py": "import pytest\n\nfrom freenit.models.user import User\n\nfrom . import factories\n\n\n@pytest.mark.asyncio\nclass TestAuth:\n    async def test_login(self, client):\n        user: User = factories.User()\n        await user.save()\n        response = client.login(user=user)\n\n        assert response.status_code == 200\n\n    async def test_register(self, client):\n        data = {\n            \"email\": \"user3@example.com\",\n            \"password\": \"Sekrit\",\n        }\n        response = client.post(\"/auth/register\", data=data)\n        assert response.status_code == 200\n\n    async def test_refresh(self, client):\n        user: User = factories.User()\n        await user.save()\n        client.login(user=user)\n        response = client.post(\"/auth/refresh\")\n        assert response.status_code == 200\n", "test_role.py": "import pytest\n\nfrom freenit.models.role import Role\nfrom freenit.models.user import User\n\nfrom . import factories\n\n\n@pytest.mark.asyncio\nclass TestRole:\n    async def test_get_role_list(self, client):\n        user: User = factories.User()\n        await user.save()\n        client.login(user=user)\n        response = client.get(f\"/roles\")\n        assert response.status_code == 200\n\n    async def test_create_role(self, client):\n        user: User = factories.User()\n        await user.save()\n        client.login(user=user)\n        data = {\"name\": \"myrole\"}\n        response = client.post(f\"/roles\", data=data)\n        assert response.status_code == 200\n\n    async def test_get_role_by_id(self, client):\n        user: User = factories.User()\n        await user.save()\n        client.login(user=user)\n        role: Role = factories.Role()\n        await role.save()\n        response = client.get(f\"/roles/{role.id}\")\n        assert response.status_code == 200\n\n    async def test_edit_role(self, client):\n        user: User = factories.User()\n        await user.save()\n        client.login(user=user)\n        role: Role = factories.Role()\n        await role.save()\n        data = {\"name\": \"myrole\"}\n        response = client.patch(f\"/roles/{role.id}\", data=data)\n        assert response.status_code == 200\n\n    async def test_delete_role(self, client):\n        user: User = factories.User()\n        await user.save()\n        client.login(user=user)\n        role: Role = factories.Role()\n        await role.save()\n        response = client.delete(f\"/roles/{role.id}\")\n        assert response.status_code == 200\n\n    async def test_role_assign_user(self, client):\n        user: User = factories.User()\n        await user.save()\n        client.login(user=user)\n        role: Role = factories.Role()\n        await role.save()\n        response = client.post(f\"/roles/{role.id}/{user.id}\")\n        assert response.status_code == 200\n\n    async def test_role_deassign_user(self, client):\n        user: User = factories.User()\n        await user.save()\n        client.login(user=user)\n        role: Role = factories.Role()\n        await role.save()\n        await user.roles.add(role)\n        response = client.delete(f\"/roles/{role.id}/{user.id}\")\n        assert response.status_code == 200\n", "client.py": "import json\nimport socket\n\nfrom fastapi.testclient import TestClient\n\n\nclass Client(TestClient):\n    def url_for(self, name, host=socket.gethostname()):\n        return f\"http://{host}:5000/api/v1{name}\"\n\n    def get(self, endpoint):\n        url = self.url_for(endpoint)\n        return super().get(url)\n\n    def post(self, endpoint, data=None):\n        url = self.url_for(endpoint)\n        response = super().post(\n            url,\n            json=data,\n            headers=self.headers,\n        )\n\n        return response\n\n    def put(self, endpoint, data=None):\n        url = self.url_for(endpoint)\n        response = super().put(url, json=data)\n        return response\n\n    def patch(self, endpoint, data=None):\n        url = self.url_for(endpoint)\n        response = super().patch(url, json=data)\n        return response\n\n    def delete(self, endpoint):\n        url = self.url_for(endpoint)\n        return super().delete(url)\n\n    def login(self, user, endpoint=\"/auth/login\"):\n        data = {\n            \"email\": user.email,\n            \"password\": \"Sekrit\",\n        }\n        response = self.post(endpoint, data)\n        self.cookies = response.cookies\n        return response\n", "factories.py": "import factory\nfrom passlib.hash import pbkdf2_sha256\n\nfrom freenit.config import getConfig\nfrom freenit.models.role import Role as RoleModel\n\nconfig = getConfig()\nauth = config.get_model(\"user\")\n\n\nclass User(factory.Factory):\n    class Meta:\n        model = auth.User\n\n    email = factory.Faker(\"email\")\n    password = pbkdf2_sha256.hash(f\"{config.secret}Sekrit\")\n    active = True\n\n\nclass InactiveUser(User):\n    active = False\n\n\nclass Role(factory.Factory):\n    class Meta:\n        model = RoleModel\n\n    name = factory.Faker(\"pystr\")\n", "test_permission.py": "import pytest\nfrom fastapi import HTTPException, Request\n\nfrom freenit.auth import decode, encode, permissions\nfrom freenit.models.role import Role\nfrom freenit.models.user import User\n\nfrom . import factories\n\n\ndef prepareRequest(user):\n    scope = {\"type\": \"http\"}\n    request = Request(scope=scope)\n    request._cookies = {\"access\": encode(user)}\n    return request\n\n\n@pytest.mark.asyncio\nclass TestPermission:\n    async def test_encode_decode(self, client):\n        user: User = factories.User()\n        await user.save()\n        client.login(user=user)\n        role: Role = factories.Role()\n        await role.save()\n        token = encode(user)\n        token_user = await decode(token)\n        assert token_user == user\n\n    async def test_permissions(self, client):\n        user: User = factories.User()\n        await user.save()\n        client.login(user=user)\n        perms = permissions()\n        request = prepareRequest(user)\n        token_user = await perms(request)\n        assert user == token_user\n\n    async def test_role_permissions(self, client):\n        user: User = factories.User()\n        await user.save()\n        role: Role = factories.Role()\n        await role.save()\n        await user.roles.add(role)\n        client.login(user=user)\n        perms = permissions(roles=[role.name])\n        request = prepareRequest(user)\n        api_user = await perms(request)\n        assert user == api_user\n\n    async def test_role_fail_permissions(self, client):\n        user: User = factories.User()\n        await user.save()\n        role: Role = factories.Role()\n        await role.save()\n        client.login(user=user)\n        perms = permissions(roles=[role.name])\n        request = prepareRequest(user)\n        try:\n            await perms(request)\n        except HTTPException as e:\n            assert e.detail == \"Permission denied\"\n        else:\n            pytest.fail(\"Permissions granted!\")\n        perms = permissions(allof=[role.name])\n        try:\n            await perms(request)\n        except HTTPException as e:\n            assert e.detail == \"Permission denied\"\n        else:\n            pytest.fail(\"Permissions granted!\")\n", "alembic": {}, "script.py.mako": "\"\"\"${message}\n\nRevision ID: ${up_revision}\nRevises: ${down_revision | comma,n}\nCreate Date: ${create_date}\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n${imports if imports else \"\"}\n\n# revision identifiers, used by Alembic.\nrevision = ${repr(up_revision)}\ndown_revision = ${repr(down_revision)}\nbranch_labels = ${repr(branch_labels)}\ndepends_on = ${repr(depends_on)}\n\n\ndef upgrade():\n    ${upgrades if upgrades else \"pass\"}\n\n\ndef downgrade():\n    ${downgrades if downgrades else \"pass\"}\n", "env.py": "import os\nimport sys\n\nfrom alembic import context\nfrom freenit.config import getConfig\nfrom freenit.migration import run_migrations_offline, run_migrations_online\n\nsys.path.append(os.getcwd())\nconfig = getConfig()\n\nif context.is_offline_mode():\n    run_migrations_offline(config)\nelse:\n    run_migrations_online(config)\n", "README": "Generic single-database configuration.", "models": {}, "user.py": "from __future__ import annotations\n\nimport ormar\nimport ormar.exceptions\nfrom fastapi import HTTPException\n\nfrom freenit.auth import verify\nfrom freenit.models.sql.base import (\n    OrmarBaseModel,\n    OrmarUserMixin,\n    generate_optional,\n    ormar_config,\n)\nfrom freenit.models.role import Role\n\n\nclass BaseUser(OrmarBaseModel, OrmarUserMixin):\n    def check(self, password: str) -> bool:\n        return verify(password, self.password)\n\n    @classmethod\n    async def login(cls, credentials) -> BaseUser:\n        try:\n            user = await cls.objects.get(email=credentials.email, active=True)\n        except ormar.exceptions.NoMatch:\n            raise HTTPException(status_code=403, detail=\"Failed to login\")\n        if user.check(credentials.password):\n            return user\n        raise HTTPException(status_code=403, detail=\"Failed to login\")\n\n\nclass User(BaseUser, OrmarUserMixin):\n    ormar_config = ormar_config.copy()\n\n    roles = ormar.ManyToMany(Role, unique=True)\n\n\nUserOptional = generate_optional(User)\nUserOptionalPydantic = User.get_pydantic(exclude={\"admin\", \"active\"})\n", "safe.py": "from freenit.models.role import Role\nfrom freenit.models.user import User\n\nif User.dbtype() == \"sql\":\n    RoleSafe = Role.get_pydantic(exclude={\"users__password\"})\n    UserSafe = User.get_pydantic(exclude={\"password\"})\nelif User.dbtype() == \"ldap\":\n    from freenit.config import getConfig\n    config = getConfig()\n    auth = config.get_model(\"user\")\n    UserSafe = auth.UserSafe\n    RoleSafe = Role\n", "theme.py": "import ormar\n\nfrom .base import OrmarBaseModel, ormar_config, generate_optional\n\nclass Theme(OrmarBaseModel):\n    ormar_config = ormar_config.copy()\n\n    id: int = ormar.Integer(primary_key=True)\n    name: str = ormar.Text(unique=True)\n    bg_color: str = ormar.Text()\n    bg_secondary_color: str = ormar.Text()\n    color_primary: str = ormar.Text()\n    color_lightGrey: str = ormar.Text()\n    color_grey: str = ormar.Text()\n    color_darkGrey: str = ormar.Text()\n    color_error: str = ormar.Text()\n    color_success: str = ormar.Text()\n    grid_maxWidth: str = ormar.Text()\n    grid_gutter: str = ormar.Text()\n    font_size: str = ormar.Text()\n    font_color: str = ormar.Text()\n    font_family_sans: str = ormar.Text()\n    font_family_mono: str = ormar.Text()\n\n\nThemeOptional = generate_optional(Theme)\n", "role.py": "from .base import OrmarBaseModel, OrmarRoleMixin, generate_optional, ormar_config\n\n\nclass Role(OrmarBaseModel, OrmarRoleMixin):\n    ormar_config = ormar_config.copy()\n\n\nRoleOptional = generate_optional(Role)\n", "pagination.py": "from math import ceil\nfrom typing import Generic, List, TypeVar\n\nfrom fastapi import HTTPException\nfrom pydantic import Field, BaseModel\n\nT = TypeVar(\"T\")\n\n\nclass Page(BaseModel, Generic[T]):\n    total: int = Field(0, description=(\"Total number of items in DB\"))\n    page: int = Field(0, description=(\"Current page\"))\n    pages: int = Field(0, description=(\"Total number of pages\"))\n    perpage: int = Field(10, description=(\"Items per page\"))\n    data: List[T] = Field(..., description=(\"List of results for the current page\"))\n\n\nasync def paginate(query, page, perpage):\n    total = await query.count()\n    pages = ceil(total / perpage)\n    if total > 0 and page > pages:\n        raise HTTPException(status_code=404, detail=\"No such page\")\n    data = await query.paginate(page, perpage).all()\n    return Page(data=data, page=page, perpage=perpage, pages=pages, total=total)\n", "api": {}, "router.py": "from fastapi import FastAPI\n\nfrom ..decorators import FreenitAPI\n\napi = FastAPI()\nroute = FreenitAPI(api)\n", ".github": {}, "workflows": {}, "pythonapp.yml": "name: Freenit\n\non: \n  pull_request:\n  push:\n    branches: master\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Python 3.11\n      uses: actions/setup-python@v1\n      with:\n        python-version: 3.11\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n    - name: Test and lint\n      run: |\n        bin/test.sh\n    - name: Security\n      run: |\n        bin/security.sh\n", "versions": {}, "06a043f2516a_initial.py": "\"\"\"initial\n\nRevision ID: 06a043f2516a\nRevises: \nCreate Date: 2024-04-03 16:39:58.082206\n\n\"\"\"\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = \"06a043f2516a\"\ndown_revision = None\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"roles\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"name\", sa.Text(), nullable=False),\n        sa.PrimaryKeyConstraint(\"id\"),\n        sa.UniqueConstraint(\"name\"),\n    )\n    op.create_table(\n        \"themes\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"name\", sa.Text(), nullable=False),\n        sa.Column(\"bg_color\", sa.Text(), nullable=False),\n        sa.Column(\"bg_secondary_color\", sa.Text(), nullable=False),\n        sa.Column(\"color_primary\", sa.Text(), nullable=False),\n        sa.Column(\"color_lightGrey\", sa.Text(), nullable=False),\n        sa.Column(\"color_grey\", sa.Text(), nullable=False),\n        sa.Column(\"color_darkGrey\", sa.Text(), nullable=False),\n        sa.Column(\"color_error\", sa.Text(), nullable=False),\n        sa.Column(\"color_success\", sa.Text(), nullable=False),\n        sa.Column(\"grid_maxWidth\", sa.Text(), nullable=False),\n        sa.Column(\"grid_gutter\", sa.Text(), nullable=False),\n        sa.Column(\"font_size\", sa.Text(), nullable=False),\n        sa.Column(\"font_color\", sa.Text(), nullable=False),\n        sa.Column(\"font_family_sans\", sa.Text(), nullable=False),\n        sa.Column(\"font_family_mono\", sa.Text(), nullable=False),\n        sa.PrimaryKeyConstraint(\"id\"),\n        sa.UniqueConstraint(\"name\"),\n    )\n    op.create_table(\n        \"users\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"email\", sa.Text(), nullable=False),\n        sa.Column(\"password\", sa.Text(), nullable=False),\n        sa.Column(\"active\", sa.Boolean(), nullable=True),\n        sa.Column(\"admin\", sa.Boolean(), nullable=True),\n        sa.PrimaryKeyConstraint(\"id\"),\n        sa.UniqueConstraint(\"email\"),\n    )\n    op.create_table(\n        \"users_roles\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"role\", sa.Integer(), nullable=True),\n        sa.Column(\"user\", sa.Integer(), nullable=True),\n        sa.ForeignKeyConstraint(\n            [\"role\"],\n            [\"roles.id\"],\n            name=\"fk_users_roles_roles_role_id\",\n            onupdate=\"CASCADE\",\n            ondelete=\"CASCADE\",\n        ),\n        sa.ForeignKeyConstraint(\n            [\"user\"],\n            [\"users.id\"],\n            name=\"fk_users_roles_users_user_id\",\n            onupdate=\"CASCADE\",\n            ondelete=\"CASCADE\",\n        ),\n        sa.PrimaryKeyConstraint(\"id\"),\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table(\"users_roles\")\n    op.drop_table(\"users\")\n    op.drop_table(\"themes\")\n    op.drop_table(\"roles\")\n    # ### end Alembic commands ###\n", "ldap": {}, "base.py": "import ormar\nimport pydantic\n\nfrom freenit.config import getConfig\n\nconfig = getConfig()\n\n\nclass OrmarBaseModel(ormar.Model):\n    @classmethod\n    def dbtype(cls):\n        return \"sql\"\n\n    async def patch(self, fields):\n        result = {}\n        data = fields.dict()\n        for k in data:\n            if data[k] is not None:\n                result[k] = data[k]\n        return await self.update(**result)\n\n\nclass OrmarUserMixin:\n    id: int = ormar.Integer(primary_key=True)\n    email: pydantic.EmailStr = ormar.Text(unique=True)\n    password: str = ormar.Text()\n    active: bool = ormar.Boolean(default=False)\n    admin: bool = ormar.Boolean(default=False)\n\n\nclass OrmarRoleMixin:\n    id: int = ormar.Integer(primary_key=True)\n    name: str = ormar.Text(unique=True)\n\n\normar_config = ormar.OrmarConfig(\n    database=config.database,\n    metadata=config.metadata,\n    engine=config.engine,\n)\n\n\ndef generate_optional(Model):\n    class OptionalModel(Model):\n        pass\n\n    for field_name in OptionalModel.model_fields:\n        OptionalModel.model_fields[field_name].default = None\n\n    return OptionalModel\n", "sql": {}, "role": {}, "ldap.py": "import bonsai\nfrom fastapi import Depends, Header, HTTPException\n\nfrom freenit.api.router import route\nfrom freenit.config import getConfig\nfrom freenit.decorators import description\nfrom freenit.models.ldap.base import get_client\nfrom freenit.models.pagination import Page\nfrom freenit.models.safe import UserSafe\nfrom freenit.models.user import User, UserOptional\nfrom freenit.permissions import profile_perms, user_perms\n\ntags = [\"user\"]\n\nconfig = getConfig()\n\n\n@route(\"/users\", tags=tags)\nclass UserListAPI:\n    @staticmethod\n    @description(\"Get users\")\n    async def get(\n        page: int = Header(default=1),\n        perpage: int = Header(default=10),\n        _: User = Depends(user_perms),\n    ) -> Page[UserSafe]:\n        users = await User.get_all()\n        total = len(users)\n        page = Page(total=total, page=1, pages=1, perpage=total, data=users)\n        return page\n\n\n@route(\"/users/{id}\", tags=tags)\nclass UserDetailAPI:\n    @staticmethod\n    async def get(id, _: User = Depends(user_perms)) -> UserSafe:\n        user = await User.get(id)\n        return user\n\n    @staticmethod\n    async def patch(id, data: UserOptional, _: User = Depends(user_perms)) -> UserSafe:\n        user = await User.get(id)\n        update = {\n            field: getattr(data, field)\n            for field in data.__fields__\n            if getattr(data, field) != \"\"\n        }\n        await user.update(active=user.userClass, **update)\n        return user\n\n    @staticmethod\n    async def delete(id, _: User = Depends(user_perms)) -> UserSafe:\n        client = get_client()\n        try:\n            async with client.connect(is_async=True) as conn:\n                res = await conn.search(\n                    id, bonsai.LDAPSearchScope.SUB, \"objectClass=person\"\n                )\n                if len(res) < 1:\n                    raise HTTPException(status_code=404, detail=\"No such user\")\n                if len(res) > 1:\n                    raise HTTPException(status_code=409, detail=\"Multiple users found\")\n                existing = res[0]\n                user = User(\n                    email=existing[\"mail\"][0],\n                    sn=existing[\"sn\"][0],\n                    cn=existing[\"cn\"][0],\n                    dn=str(existing[\"dn\"]),\n                    uid=existing[\"uid\"][0],\n                    userClass=existing[\"userClass\"][0],\n                )\n                await existing.delete()\n                return user\n        except bonsai.errors.AuthenticationError:\n            raise HTTPException(status_code=403, detail=\"Failed to login\")\n\n\n@route(\"/profile\", tags=[\"profile\"])\nclass ProfileDetailAPI:\n    @staticmethod\n    @description(\"Get my profile\")\n    async def get(user: User = Depends(profile_perms)) -> UserSafe:\n        return user\n\n    @staticmethod\n    @description(\"Edit my profile\")\n    async def patch(\n        data: UserOptional, user: User = Depends(profile_perms)\n    ) -> UserSafe:\n        update = {\n            field: getattr(data, field)\n            for field in data.__fields__\n            if getattr(data, field) != \"\"\n        }\n        await user.update(active=user.userClass, **update)\n        return user\n", "sql.py": "import ormar\nimport ormar.exceptions\nfrom fastapi import Depends, Header, HTTPException\n\nfrom freenit.api.router import route\nfrom freenit.auth import encrypt\nfrom freenit.config import getConfig\nfrom freenit.decorators import description\nfrom freenit.models.pagination import Page, paginate\nfrom freenit.models.safe import UserSafe\nfrom freenit.models.user import User, UserOptional\nfrom freenit.permissions import profile_perms, user_perms\n\ntags = [\"user\"]\n\nconfig = getConfig()\n\n\n@route(\"/users\", tags=tags)\nclass UserListAPI:\n    @staticmethod\n    @description(\"Get users\")\n    async def get(\n        page: int = Header(default=1),\n        perpage: int = Header(default=10),\n        _: User = Depends(user_perms),\n    ) -> Page[UserSafe]:\n        return await paginate(User.objects, page, perpage)\n\n\n@route(\"/users/{id}\", tags=tags)\nclass UserDetailAPI:\n    @staticmethod\n    async def get(id, _: User = Depends(user_perms)) -> UserSafe:\n        try:\n            user = await User.objects.get(pk=id)\n        except ormar.exceptions.NoMatch:\n            raise HTTPException(status_code=404, detail=\"No such user\")\n        await user.load_all(follow=True)\n        return user\n\n    @staticmethod\n    async def patch(id, data: UserOptional, _: User = Depends(user_perms)) -> UserSafe:\n        if data.password:\n            data.password = encrypt(data.password)\n        try:\n            user = await User.objects.get(pk=id)\n        except ormar.exceptions.NoMatch:\n            raise HTTPException(status_code=404, detail=\"No such user\")\n        await user.patch(data)\n        return user\n\n    @staticmethod\n    async def delete(id, _: User = Depends(user_perms)) -> UserSafe:\n        try:\n            user = await User.objects.get(pk=id)\n        except ormar.exceptions.NoMatch:\n            raise HTTPException(status_code=404, detail=\"No such user\")\n        await user.delete()\n        return user\n\n\n@route(\"/profile\", tags=[\"profile\"])\nclass ProfileDetailAPI:\n    @staticmethod\n    @description(\"Get my profile\")\n    async def get(user: User = Depends(profile_perms)) -> UserSafe:\n        await user.load_all()\n        return user\n\n    @staticmethod\n    @description(\"Edit my profile\")\n    async def patch(\n        data: UserOptional, user: User = Depends(profile_perms)\n    ) -> UserSafe:\n        if data.password:\n            data.password = encrypt(data.password)\n        await user.patch(data)\n        await user.load_all()\n        return user\n", "auth": {}, "user": {}}